/**
* Copyright (C) 2011, BMW AG
*
* GeniviAudioMananger AudioManagerDaemon
*
* \file DBusWrapper.h
*
* \date 20-Oct-2011 3:42:04 PM
* \author Christian Mueller (christian.ei.mueller@bmw.de)
*
* \section License
* GNU Lesser General Public License, version 2.1, with special exception (GENIVI clause)
* Copyright (C) 2011, BMW AG Christian Mueller  Christian.ei.mueller@bmw.de
*
* This program is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License, version 2.1, as published by the Free Software Foundation.
* This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License, version 2.1, for more details.
* You should have received a copy of the GNU Lesser General Public License, version 2.1, along with this program; if not, see <http://www.gnu.org/licenses/lgpl-2.1.html>.
* Note that the copyright holders assume that the GNU Lesser General Public License, version 2.1, may also be applicable to programs even in cases in which the program is not a library in the technical sense.
* Linking AudioManager statically or dynamically with other modules is making a combined work based on AudioManager. You may license such other modules under the GNU Lesser General Public License, version 2.1. If you do not want to license your linked modules under the GNU Lesser General Public License, version 2.1, you may use the program under the following exception.
* As a special exception, the copyright holders of AudioManager give you permission to combine AudioManager with software programs or libraries that are released under any license unless such a combination is not permitted by the license of such a software program or library. You may copy and distribute such a system following the terms of the GNU Lesser General Public License, version 2.1, including this special exception, for AudioManager and the licenses of the other code concerned.
* Note that people who make modified versions of AudioManager are not obligated to grant this special exception for their modified versions; it is their choice whether to do so. The GNU Lesser General Public License, version 2.1, gives permission to release a modified version without this exception; this exception also makes it possible to release a modified version which carries forward this exception.
*
* THIS CODE HAS BEEN GENERATED BY ENTERPRISE ARCHITECT GENIVI MODEL. PLEASE CHANGE ONLY IN ENTERPRISE ARCHITECT AND GENERATE AGAIN
*/

#ifndef DBUSWRAPPER_H_
#define DBUSWRAPPER_H_

#include "audiomanagertypes.h"
#include "DBusConfiguration.h"
#include <dbus/dbus.h>
#include <string>
#include <list>

/**
 * This wraps dbus and provides everything needed to anyone who wants to use dbus (including plugins)
 */
class DBusWrapper {
public:
	DBusWrapper();
	virtual ~DBusWrapper();

	/**
	 * registers a callback that is entered as path below the main path.
	 * The configuration of the mainpath is done via DBusConfiguration.h
	 * @param vtable the vtable that holds a pointer to the callback that is called when the path is called from the dbus
	 * @param path the name of the path
	 * @param userdata pointer to the class that will handle the callback
	 */
	void registerCallback(const DBusObjectPathVTable* vtable, const std::string& path, void* userdata);

	/**
	 * returns the dbus connection
	 * @param connection pointer to the connection
	 */
	void getDBusConnection(DBusConnection*& connection) const;

	/**
	 * If Dbus is used, this MainLoop must be called as mainloop, otherwise the messages are not dispatched.
	 */
	void dbusMainLoop();

private:
    static DBusWrapper* mReference;
	static DBusHandlerResult cbRootIntrospection(DBusConnection *conn, DBusMessage *msg, void *reference);
	DBusObjectPathVTable mObjectPathVTable;
    DBusConnection* mDbusConnection;
    DBusError mDBusError;
    std::list<std::string> mNodesList;
};

#endif /* DBUSWRAPPER_H_ */

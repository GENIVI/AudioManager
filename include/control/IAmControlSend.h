/**
 * Copyright (C) 2012 - 2014, BMW AG
 *
 * This file is part of GENIVI Project AudioManager.
 *
 * Contributions are licensed to the GENIVI Alliance under one or more
 * Contribution License Agreements.
 *
 * \copyright
 * This Source Code Form is subject to the terms of the
 * Mozilla Public License, v. 2.0. If a  copy of the MPL was not distributed with
 * this file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * \author Christian Linke, christian.linke@bmw.de BMW 2011 - 2014
 *
 * \file
 * For further information see http://projects.genivi.org/audio-manager
 *
 * THIS CODE HAS BEEN GENERATED BY ENTERPRISE ARCHITECT GENIVI MODEL. 
 * PLEASE CHANGE ONLY IN ENTERPRISE ARCHITECT AND GENERATE AGAIN.
 */
#if !defined(EA_D17C9A1A_AB65_4f6e_A787_51033D190C21__INCLUDED_)
#define EA_D17C9A1A_AB65_4f6e_A787_51033D190C21__INCLUDED_

#include <vector>
#include <string>
#include "audiomanagertypes.h"

namespace am {
class IAmControlReceive;
}

#include "IAmControlReceive.h"
#include "audiomanagertypes.h"
#include "NodeStateManager.h"

#define ControlSendVersion "2.0" 
namespace am {

/**
 * This interface is presented by the AudioManager controller.
 * All the hooks represent system events that need to be handled. The callback
 * functions are used to handle for example answers to function calls on the
 * AudioManagerCoreInterface.
 * There are two rules that have to be kept in mind when implementing against this
 * interface:\n
 * \warning
 * 1. CALLS TO THIS INTERFACE ARE NOT THREAD SAFE !!!! \n
 * 2. YOU MAY NOT CALL THE CALLING INTERFACE DURING AN SYNCHRONOUS OR ASYNCHRONOUS
 * CALL THAT EXPECTS A RETURN VALUE.\n
 * \details
 * Violation these rules may lead to unexpected behavior! Nevertheless you can
 * implement thread safe by using the deferred-call pattern described on the wiki
 * which also helps to implement calls that are forbidden.\n
 * For more information, please check CAmSerializer
 */
class IAmControlSend
{

public:
	IAmControlSend() {

	}

	virtual ~IAmControlSend() {

	}

	virtual void getInterfaceVersion(std::string& version) const =0;
	virtual am_Error_e startupController(IAmControlReceive* controlreceiveinterface) =0;
	virtual void setControllerReady() =0;
	virtual void setControllerRundown(const int16_t signal) =0;
	virtual am_Error_e hookUserConnectionRequest(const am_sourceID_t sourceID, const am_sinkID_t sinkID, am_mainConnectionID_t& mainConnectionID) =0;
	virtual am_Error_e hookUserDisconnectionRequest(const am_mainConnectionID_t connectionID) =0;
	virtual am_Error_e hookUserSetMainSinkSoundProperty(const am_sinkID_t sinkID, const am_MainSoundProperty_s& soundProperty) =0;
	virtual am_Error_e hookUserSetMainSourceSoundProperty(const am_sourceID_t sourceID, const am_MainSoundProperty_s& soundProperty) =0;
	virtual am_Error_e hookUserSetSystemProperty(const am_SystemProperty_s& property) =0;
	virtual am_Error_e hookUserVolumeChange(const am_sinkID_t SinkID, const am_mainVolume_t newVolume) =0;
	virtual am_Error_e hookUserVolumeStep(const am_sinkID_t SinkID, const int16_t increment) =0;
	virtual am_Error_e hookUserSetSinkMuteState(const am_sinkID_t sinkID, const am_MuteState_e muteState) =0;
	virtual am_Error_e hookSystemRegisterDomain(const am_Domain_s& domainData, am_domainID_t& domainID) =0;
	virtual am_Error_e hookSystemDeregisterDomain(const am_domainID_t domainID) =0;
	virtual void hookSystemDomainRegistrationComplete(const am_domainID_t domainID) =0;
	virtual am_Error_e hookSystemRegisterSink(const am_Sink_s& sinkData, am_sinkID_t& sinkID) =0;
	virtual am_Error_e hookSystemDeregisterSink(const am_sinkID_t sinkID) =0;
	virtual am_Error_e hookSystemRegisterSource(const am_Source_s& sourceData, am_sourceID_t& sourceID) =0;
	virtual am_Error_e hookSystemDeregisterSource(const am_sourceID_t sourceID) =0;
	virtual am_Error_e hookSystemRegisterGateway(const am_Gateway_s& gatewayData, am_gatewayID_t& gatewayID) =0;
	virtual am_Error_e hookSystemDeregisterGateway(const am_gatewayID_t gatewayID) =0;
	virtual am_Error_e hookSystemRegisterCrossfader(const am_Crossfader_s& crossfaderData, am_crossfaderID_t& crossfaderID) =0;
	virtual am_Error_e hookSystemDeregisterCrossfader(const am_crossfaderID_t crossfaderID) =0;
	virtual void hookSystemSinkVolumeTick(const am_Handle_s handle, const am_sinkID_t sinkID, const am_volume_t volume) =0;
	virtual void hookSystemSourceVolumeTick(const am_Handle_s handle, const am_sourceID_t sourceID, const am_volume_t volume) =0;
	virtual void hookSystemInterruptStateChange(const am_sourceID_t sourceID, const am_InterruptState_e interruptState) =0;
	virtual void hookSystemSinkAvailablityStateChange(const am_sinkID_t sinkID, const am_Availability_s& availability) =0;
	virtual void hookSystemSourceAvailablityStateChange(const am_sourceID_t sourceID, const am_Availability_s& availability) =0;
	virtual void hookSystemDomainStateChange(const am_domainID_t domainID, const am_DomainState_e state) =0;
	virtual void hookSystemReceiveEarlyData(const std::vector<am_EarlyData_s>& data) =0;
	virtual void hookSystemSpeedChange(const am_speed_t speed) =0;
	virtual void hookSystemTimingInformationChanged(const am_mainConnectionID_t mainConnectionID, const am_timeSync_t time) =0;
	virtual void cbAckConnect(const am_Handle_s handle, const am_Error_e errorID) =0;
	virtual void cbAckDisconnect(const am_Handle_s handle, const am_Error_e errorID) =0;
	virtual void cbAckCrossFade(const am_Handle_s handle, const am_HotSink_e hostsink, const am_Error_e error) =0;
	virtual void cbAckSetSinkVolumeChange(const am_Handle_s handle, const am_volume_t volume, const am_Error_e error) =0;
	virtual void cbAckSetSourceVolumeChange(const am_Handle_s handle, const am_volume_t voulme, const am_Error_e error) =0;
	virtual void cbAckSetSourceState(const am_Handle_s handle, const am_Error_e error) =0;
	virtual void cbAckSetSourceSoundProperties(const am_Handle_s handle, const am_Error_e error) =0;
	virtual void cbAckSetSourceSoundProperty(const am_Handle_s handle, const am_Error_e error) =0;
	virtual void cbAckSetSinkSoundProperties(const am_Handle_s handle, const am_Error_e error) =0;
	virtual void cbAckSetSinkSoundProperty(const am_Handle_s handle, const am_Error_e error) =0;
	virtual am_Error_e getConnectionFormatChoice(const am_sourceID_t sourceID, const am_sinkID_t sinkID, const am_Route_s listRoute, const std::vector<am_CustomConnectionFormat_t> listPossibleConnectionFormats, std::vector<am_CustomConnectionFormat_t>& listPrioConnectionFormats) =0;
	virtual void confirmCommandReady(const am_Error_e error) =0;
	virtual void confirmRoutingReady(const am_Error_e error) =0;
	virtual void confirmCommandRundown(const am_Error_e error) =0;
	virtual void confirmRoutingRundown(const am_Error_e error) =0;
	virtual am_Error_e hookSystemUpdateSink(const am_sinkID_t sinkID, const am_sinkClass_t sinkClassID, const std::vector<am_SoundProperty_s>& listSoundProperties, const std::vector<am_CustomConnectionFormat_t>& listConnectionFormats, const std::vector<am_MainSoundProperty_s>& listMainSoundProperties) =0;
	virtual am_Error_e hookSystemUpdateSource(const am_sourceID_t sourceID, const am_sourceClass_t sourceClassID, const std::vector<am_SoundProperty_s>& listSoundProperties, const std::vector<am_CustomConnectionFormat_t>& listConnectionFormats, const std::vector<am_MainSoundProperty_s>& listMainSoundProperties) =0;
	virtual am_Error_e hookSystemUpdateGateway(const am_gatewayID_t gatewayID, const std::vector<am_CustomConnectionFormat_t>& listSourceConnectionFormats, const std::vector<am_CustomConnectionFormat_t>& listSinkConnectionFormats, const std::vector<bool>& convertionMatrix) =0;
	virtual void cbAckSetVolumes(const am_Handle_s handle, const std::vector<am_Volumes_s>& listVolumes, const am_Error_e error) =0;
	virtual void cbAckSetSinkNotificationConfiguration(const am_Handle_s handle, const am_Error_e error) =0;
	virtual void cbAckSetSourceNotificationConfiguration(const am_Handle_s handle, const am_Error_e error) =0;
	virtual void hookSinkNotificationDataChanged(const am_sinkID_t sinkID, const am_NotificationPayload_s& payload) =0;
	virtual void hookSourceNotificationDataChanged(const am_sourceID_t sourceID, const am_NotificationPayload_s& payload) =0;
	virtual am_Error_e hookUserSetMainSinkNotificationConfiguration(const am_sinkID_t sinkID, const am_NotificationConfiguration_s& notificationConfiguration) =0;
	virtual am_Error_e hookUserSetMainSourceNotificationConfiguration(const am_sourceID_t sourceID, const am_NotificationConfiguration_s& notificationConfiguration) =0;
	virtual void hookSystemNodeStateChanged(const NsmNodeState_e NodeStateId) =0;
	virtual void hookSystemNodeApplicationModeChanged(const NsmApplicationMode_e ApplicationModeId) =0;
	virtual void hookSystemSessionStateChanged(const std::string& sessionName, const NsmSeat_e seatID, const NsmSessionState_e sessionStateID) =0;
	virtual NsmErrorStatus_e hookSystemLifecycleRequest(const uint32_t Request, const uint32_t RequestId) =0;

};
}
#endif // !defined(EA_D17C9A1A_AB65_4f6e_A787_51033D190C21__INCLUDED_)

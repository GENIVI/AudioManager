/**
 * Copyright (C) 2011, BMW AG
 *
 * GeniviAudioMananger DbusPlugin
 *
 * \file CommandReceiverShadow.h
 *
 * \date 20-Oct-2011 3:42:04 PM
 * \author Christian Mueller (christian.ei.mueller@bmw.de)
 *
 * \section License
 * GNU Lesser General Public License, version 2.1, with special exception (GENIVI clause)
 * Copyright (C) 2011, BMW AG Christian Mueller  Christian.ei.mueller@bmw.de
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License, version 2.1, as published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License, version 2.1, for more details.
 * You should have received a copy of the GNU Lesser General Public License, version 2.1, along with this program; if not, see <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * Note that the copyright holders assume that the GNU Lesser General Public License, version 2.1, may also be applicable to programs even in cases in which the program is not a library in the technical sense.
 * Linking AudioManager statically or dynamically with other modules is making a combined work based on AudioManager. You may license such other modules under the GNU Lesser General Public License, version 2.1. If you do not want to license your linked modules under the GNU Lesser General Public License, version 2.1, you may use the program under the following exception.
 * As a special exception, the copyright holders of AudioManager give you permission to combine AudioManager with software programs or libraries that are released under any license unless such a combination is not permitted by the license of such a software program or library. You may copy and distribute such a system following the terms of the GNU Lesser General Public License, version 2.1, including this special exception, for AudioManager and the licenses of the other code concerned.
 * Note that people who make modified versions of AudioManager are not obligated to grant this special exception for their modified versions; it is their choice whether to do so. The GNU Lesser General Public License, version 2.1, gives permission to release a modified version without this exception; this exception also makes it possible to release a modified version which carries forward this exception.
 *
 * THIS CODE HAS BEEN GENERATED BY ENTERPRISE ARCHITECT GENIVI MODEL. PLEASE CHANGE ONLY IN ENTERPRISE ARCHITECT AND GENERATE AGAIN
 */

#ifndef COMMANDRECEIVERSHADOW_H_
#define COMMANDRECEIVERSHADOW_H_



#include <dbus/dbus.h>
#include <map>
#include "config.h"
#include "command/IAmCommandReceive.h"
#include "CAmDbusMessageHandler.h"
#include "shared/CAmDbusWrapper.h"

namespace am
{

class IAmCommandReceiverShadow;

typedef void (IAmCommandReceiverShadow::*CallBackMethod)(DBusConnection *connection, DBusMessage *message);

/**
 * receives the DBus Callbacks, marhsalls and demarshalls the parameters and calls CommandReceive
 */
class IAmCommandReceiverShadow
{
public:
    IAmCommandReceiverShadow();
    virtual ~IAmCommandReceiverShadow();
    void connect(DBusConnection *conn, DBusMessage *msg);
    void disconnect(DBusConnection *conn, DBusMessage *msg);
    void setVolume(DBusConnection *conn, DBusMessage *msg);
    void volumeStep(DBusConnection *conn, DBusMessage *msg);
    void setSinkMuteState(DBusConnection *conn, DBusMessage *msg);
    void setMainSinkSoundProperty(DBusConnection *conn, DBusMessage *msg);
    void setMainSourceSoundProperty(DBusConnection *conn, DBusMessage *msg);
    void setSystemProperty(DBusConnection *conn, DBusMessage *msg);
    void getListMainConnections(DBusConnection *conn, DBusMessage *msg);
    void getListMainSinks(DBusConnection *conn, DBusMessage *msg);
    void getListMainSources(DBusConnection *conn, DBusMessage *msg);
    void getListMainSinkSoundProperties(DBusConnection *conn, DBusMessage *msg);
    void getListMainSourceSoundProperties(DBusConnection *conn, DBusMessage *msg);
    void getListSourceClasses(DBusConnection *conn, DBusMessage *msg);
    void getListSinkClasses(DBusConnection *conn, DBusMessage *msg);
    void getListSystemProperties(DBusConnection *conn, DBusMessage *msg);
    void getTimingInformation(DBusConnection *conn, DBusMessage *msg);

    /**
     * sets the pointer to the CommandReceiveInterface and registers Callback
     * @param receiver
     */
    void setCommandReceiver(IAmCommandReceive*& receiver);
private:
    typedef std::map<std::string, CallBackMethod> functionMap_t;
    functionMap_t mFunctionMap;
    CAmDbusMessageHandler mDBUSMessageHandler;
    IAmCommandReceive* mpIAmCommandReceive;
    CAmDbusWrapper* mpCAmDbusWrapper;

    /**
     * receives a callback whenever the path of the plugin is called
     */
    static DBusHandlerResult receiveCallback(DBusConnection *conn, DBusMessage *msg, void *user_data);

    /**
     * dynamic delegate that handles the Callback of the static receiveCallback
     * @param conn DBus connection
     * @param msg DBus message
     * @param user_data pointer to instance of CommandReceiverShadow
     * @return
     */
    DBusHandlerResult receiveCallbackDelegate(DBusConnection *conn, DBusMessage *msg);

    /**
     * sends out introspectiondata read from an xml file.
     * @param conn
     * @param msg
     */
    void sendIntrospection(DBusConnection* conn, DBusMessage* msg);

    /**
     * creates the function map needed to combine DBus messages and function adresses
     * @return the map
     */
    functionMap_t createMap();
};

}

#endif /* COMMANDRECEIVERSHADOW_H_ */

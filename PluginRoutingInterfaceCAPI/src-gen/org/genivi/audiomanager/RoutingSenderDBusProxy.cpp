/*
* This file was generated by the CommonAPI Generators.
*
 *  Copyright (c) 2012 BMW
 *
 *  \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
 *
 *  \copyright
 *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction,
 *  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 *  subject to the following conditions:
 *  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *  For further information see http://www.genivi.org/.
*/
#include "RoutingSenderDBusProxy.h"

namespace org {
namespace genivi {
namespace audiomanager {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createRoutingSenderDBusProxy(
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection) {
    return std::make_shared<RoutingSenderDBusProxy>(commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection);
}

__attribute__((constructor)) void registerRoutingSenderDBusProxy(void) {
    CommonAPI::DBus::DBusFactory::registerProxyFactoryMethod(RoutingSender::getInterfaceId(),
       &createRoutingSenderDBusProxy);
}

RoutingSenderDBusProxy::RoutingSenderDBusProxy(
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection):
        CommonAPI::DBus::DBusProxy(commonApiAddress, interfaceName, busName, objectPath, dbusProxyconnection)
 {
}



void RoutingSenderDBusProxy::asyncSetSourceState(const uint16_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_SourceState_e& sourceState, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_sourceID_t, am_gen::am_SourceState_e>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "asyncSetSourceState",
        "qqi",
        handle, sourceID, sourceState, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::asyncSetSourceStateAsync(const uint16_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_SourceState_e& sourceState, AsyncSetSourceStateAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_sourceID_t, am_gen::am_SourceState_e>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "asyncSetSourceState",
        "qqi",
        handle, sourceID, sourceState, 
        std::move(callback));
}
void RoutingSenderDBusProxy::setDomainState(const am_gen::am_domainID_t& domainID, const am_gen::am_DomainState_e& domainState, CommonAPI::CallStatus& callStatus, am_gen::am_Error_e& error) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t, am_gen::am_DomainState_e>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "setDomainState",
        "qi",
        domainID, domainState, 
        callStatus
        , error);
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::setDomainStateAsync(const am_gen::am_domainID_t& domainID, const am_gen::am_DomainState_e& domainState, SetDomainStateAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t, am_gen::am_DomainState_e>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "setDomainState",
        "qi",
        domainID, domainState, 
        std::move(callback));
}
void RoutingSenderDBusProxy::asyncSetSourceVolume(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_volume_t& volume, const am_gen::am_RampType_e& ramp, const am_gen::am_time_t& time, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sourceID_t, am_gen::am_volume_t, am_gen::am_RampType_e, am_gen::am_time_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "asyncSetSourceVolume",
        "qqniq",
        handle, sourceID, volume, ramp, time, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::asyncSetSourceVolumeAsync(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_volume_t& volume, const am_gen::am_RampType_e& ramp, const am_gen::am_time_t& time, AsyncSetSourceVolumeAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sourceID_t, am_gen::am_volume_t, am_gen::am_RampType_e, am_gen::am_time_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "asyncSetSourceVolume",
        "qqniq",
        handle, sourceID, volume, ramp, time, 
        std::move(callback));
}
void RoutingSenderDBusProxy::asyncSetSinkVolume(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_volume_t& volume, const am_gen::am_RampType_e& ramp, const am_gen::am_time_t& time, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sinkID_t, am_gen::am_volume_t, am_gen::am_RampType_e, am_gen::am_time_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "asyncSetSinkVolume",
        "qqniq",
        handle, sinkID, volume, ramp, time, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::asyncSetSinkVolumeAsync(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_volume_t& volume, const am_gen::am_RampType_e& ramp, const am_gen::am_time_t& time, AsyncSetSinkVolumeAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sinkID_t, am_gen::am_volume_t, am_gen::am_RampType_e, am_gen::am_time_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "asyncSetSinkVolume",
        "qqniq",
        handle, sinkID, volume, ramp, time, 
        std::move(callback));
}
void RoutingSenderDBusProxy::asyncConnect(const am_gen::am_handle_t& handle, const am_gen::am_connectionID_t& connectionID, const am_gen::am_sourceID_t& sourceID, const am_gen::am_sinkID_t& sinkID, const am_gen::am_ConnectionFormat_e& connectionFormat, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_connectionID_t, am_gen::am_sourceID_t, am_gen::am_sinkID_t, am_gen::am_ConnectionFormat_e>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "asyncConnect",
        "qqqqi",
        handle, connectionID, sourceID, sinkID, connectionFormat, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::asyncConnectAsync(const am_gen::am_handle_t& handle, const am_gen::am_connectionID_t& connectionID, const am_gen::am_sourceID_t& sourceID, const am_gen::am_sinkID_t& sinkID, const am_gen::am_ConnectionFormat_e& connectionFormat, AsyncConnectAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_connectionID_t, am_gen::am_sourceID_t, am_gen::am_sinkID_t, am_gen::am_ConnectionFormat_e>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "asyncConnect",
        "qqqqi",
        handle, connectionID, sourceID, sinkID, connectionFormat, 
        std::move(callback));
}
void RoutingSenderDBusProxy::asyncDisconnect(const am_gen::am_handle_t& handle, const am_gen::am_connectionID_t& connectionID, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_connectionID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "asyncDisconnect",
        "qq",
        handle, connectionID, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::asyncDisconnectAsync(const am_gen::am_handle_t& handle, const am_gen::am_connectionID_t& connectionID, AsyncDisconnectAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_connectionID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "asyncDisconnect",
        "qq",
        handle, connectionID, 
        std::move(callback));
}
void RoutingSenderDBusProxy::asyncAbort(const am_gen::am_handle_t& handle, CommonAPI::CallStatus& callStatus, am_gen::am_Error_e& error) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "asyncAbort",
        "q",
        handle, 
        callStatus
        , error);
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::asyncAbortAsync(const am_gen::am_handle_t& handle, AsyncAbortAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "asyncAbort",
        "q",
        handle, 
        std::move(callback));
}
void RoutingSenderDBusProxy::asyncSetSinkSoundProperties(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_SoundProperty_L& listSoundProperties, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sinkID_t, am_gen::am_SoundProperty_L>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "asyncSetSinkSoundProperties",
        "qqa(in)",
        handle, sinkID, listSoundProperties, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::asyncSetSinkSoundPropertiesAsync(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_SoundProperty_L& listSoundProperties, AsyncSetSinkSoundPropertiesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sinkID_t, am_gen::am_SoundProperty_L>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "asyncSetSinkSoundProperties",
        "qqa(in)",
        handle, sinkID, listSoundProperties, 
        std::move(callback));
}
void RoutingSenderDBusProxy::asyncSetSinkSoundProperty(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_SoundProperty_s& soundProperty, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sinkID_t, am_gen::am_SoundProperty_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "asyncSetSinkSoundProperty",
        "qq(in)",
        handle, sinkID, soundProperty, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::asyncSetSinkSoundPropertyAsync(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_SoundProperty_s& soundProperty, AsyncSetSinkSoundPropertyAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sinkID_t, am_gen::am_SoundProperty_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "asyncSetSinkSoundProperty",
        "qq(in)",
        handle, sinkID, soundProperty, 
        std::move(callback));
}
void RoutingSenderDBusProxy::asyncSetSourceSoundProperties(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_SoundProperty_L& listSoundProperties, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sourceID_t, am_gen::am_SoundProperty_L>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "asyncSetSourceSoundProperties",
        "qqa(in)",
        handle, sourceID, listSoundProperties, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::asyncSetSourceSoundPropertiesAsync(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_SoundProperty_L& listSoundProperties, AsyncSetSourceSoundPropertiesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sourceID_t, am_gen::am_SoundProperty_L>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "asyncSetSourceSoundProperties",
        "qqa(in)",
        handle, sourceID, listSoundProperties, 
        std::move(callback));
}
void RoutingSenderDBusProxy::asyncSetSourceSoundProperty(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_SoundProperty_s& soundProperty, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sourceID_t, am_gen::am_SoundProperty_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "asyncSetSourceSoundProperty",
        "qq(in)",
        handle, sourceID, soundProperty, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::asyncSetSourceSoundPropertyAsync(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_SoundProperty_s& soundProperty, AsyncSetSourceSoundPropertyAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sourceID_t, am_gen::am_SoundProperty_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "asyncSetSourceSoundProperty",
        "qq(in)",
        handle, sourceID, soundProperty, 
        std::move(callback));
}
void RoutingSenderDBusProxy::asyncCrossFade(const am_gen::am_handle_t& handle, const am_gen::am_crossfaderID_t& crossfaderID, const am_gen::am_HotSink_e& hotSink, const am_gen::am_RampType_e& rampType, const am_gen::am_time_t& time, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_crossfaderID_t, am_gen::am_HotSink_e, am_gen::am_RampType_e, am_gen::am_time_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "asyncCrossFade",
        "qqiiq",
        handle, crossfaderID, hotSink, rampType, time, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::asyncCrossFadeAsync(const am_gen::am_handle_t& handle, const am_gen::am_crossfaderID_t& crossfaderID, const am_gen::am_HotSink_e& hotSink, const am_gen::am_RampType_e& rampType, const am_gen::am_time_t& time, AsyncCrossFadeAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_crossfaderID_t, am_gen::am_HotSink_e, am_gen::am_RampType_e, am_gen::am_time_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "asyncCrossFade",
        "qqiiq",
        handle, crossfaderID, hotSink, rampType, time, 
        std::move(callback));
}
void RoutingSenderDBusProxy::asyncSetVolumes(const am_gen::am_handle_t& handle, const am_gen::am_Volumes_l& volumes, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_Volumes_l>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "asyncSetVolumes",
        "qa(i(yv)niq)",
        handle, volumes, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::asyncSetVolumesAsync(const am_gen::am_handle_t& handle, const am_gen::am_Volumes_l& volumes, AsyncSetVolumesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_Volumes_l>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "asyncSetVolumes",
        "qa(i(yv)niq)",
        handle, volumes, 
        std::move(callback));
}
void RoutingSenderDBusProxy::asyncSetSinkNotificationConfiguration(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_NotificationConfiguration_s& notificationConfiguration, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sinkID_t, am_gen::am_NotificationConfiguration_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "asyncSetSinkNotificationConfiguration",
        "qq(iin)",
        handle, sinkID, notificationConfiguration, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::asyncSetSinkNotificationConfigurationAsync(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_NotificationConfiguration_s& notificationConfiguration, AsyncSetSinkNotificationConfigurationAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sinkID_t, am_gen::am_NotificationConfiguration_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "asyncSetSinkNotificationConfiguration",
        "qq(iin)",
        handle, sinkID, notificationConfiguration, 
        std::move(callback));
}
void RoutingSenderDBusProxy::asyncSetSourceNotificationConfiguration(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_NotificationConfiguration_s& notificationConfiguration, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sourceID_t, am_gen::am_NotificationConfiguration_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "asyncSetSourceNotificationConfiguration",
        "qq(iin)",
        handle, sourceID, notificationConfiguration, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingSenderDBusProxy::asyncSetSourceNotificationConfigurationAsync(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_NotificationConfiguration_s& notificationConfiguration, AsyncSetSourceNotificationConfigurationAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_handle_t, am_gen::am_sourceID_t, am_gen::am_NotificationConfiguration_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "asyncSetSourceNotificationConfiguration",
        "qq(iin)",
        handle, sourceID, notificationConfiguration, 
        std::move(callback));
}

void RoutingSenderDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
}

} // namespace audiomanager
} // namespace genivi
} // namespace org

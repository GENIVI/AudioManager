 /*
 * This file was generated by the CommonAPI Generators.
 *
  *  Copyright (c) 2012 BMW
  *
  *  \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
  *
  *  \copyright
  *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction,
  *  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
  *  subject to the following conditions:
  *  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
  *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
  *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  *
  *  For further information see http://www.genivi.org/.
 */
 #ifndef ORG_GENIVI_AUDIOMANAGER_Routing_Interface_PROXY_BASE_H_
 #define ORG_GENIVI_AUDIOMANAGER_Routing_Interface_PROXY_BASE_H_
 
 #include "RoutingInterface.h"
 
 
 #include <org/genivi/audiomanager/am_gen.h>
 
 #define COMMONAPI_INTERNAL_COMPILATION
 
 #include <CommonAPI/InputStream.h>
 #include <CommonAPI/OutputStream.h>
 #include <CommonAPI/SerializableStruct.h>
 #include <cstdint>
 #include <string>
 #include <vector>

 #include <CommonAPI/Event.h>
 #include <CommonAPI/Proxy.h>
 #include <functional>
 #include <future>
 
 #undef COMMONAPI_INTERNAL_COMPILATION

 namespace org {
 namespace genivi {
 namespace audiomanager {

 class RoutingInterfaceProxyBase: virtual public CommonAPI::Proxy {
  public:
     typedef CommonAPI::Event<> SetRoutingReadyEvent;
     typedef CommonAPI::Event<> SetRoutingRundownEvent;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckConnectAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckDisconnectAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckSetSinkVolumeAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckSetSourceVolumeAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckSetSourceStateAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckSetSinkSoundPropertiesAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckSetSinkSoundPropertyAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckSetSourceSoundPropertiesAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckSetSourceSoundPropertyAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckSourceVolumeTickAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckSinkVolumeTickAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckCrossFadingAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_domainID_t&, const am_gen::am_Error_e&)> PeekDomainAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_domainID_t&, const am_gen::am_Error_e&)> RegisterDomainAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_Error_e&)> DeregisterDomainAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_gatewayID_t&, const am_gen::am_Error_e&)> RegisterGatewayAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_Error_e&)> DeregisterGatewayAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_sinkID_t&, const am_gen::am_Error_e&)> PeekSinkAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_sinkID_t&, const am_gen::am_Error_e&)> RegisterSinkAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_Error_e&)> DeregisterSinkAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_sourceID_t&, const am_gen::am_Error_e&)> PeekSourceAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_sourceID_t&, const am_gen::am_Error_e&)> RegisterSourceAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_Error_e&)> DeregisterSourceAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_crossfaderID_t&, const am_gen::am_Error_e&)> RegisterCrossfaderAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_Error_e&)> DeregisterCrossfaderAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_sourceClass_t&, const am_gen::am_Error_e&)> PeekSourceClassIDAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_sinkClass_t&, const am_gen::am_Error_e&)> PeekSinkClassIDAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> HookInterruptStatusChangeAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> HookDomainRegistrationCompleteAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> HookSinkAvailablityStatusChangeAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> HookSourceAvailablityStatusChangeAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> HookDomainStateChangeAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> HookTimingInformationChangedAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> SendChangedDataAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> ConfirmRoutingReadyAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> ConfirmRoutingRundownAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> UpdateGatewayAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> UpdateSinkAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> UpdateSourceAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckSetVolumesAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckSinkNotificationConfigurationAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AckSourceNotificationConfigurationAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> HookSinkNotificationDataChangeAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> HookSourceNotificationDataChangeAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const bool&)> GetRoutingReadyStateAsyncCallback;


     virtual SetRoutingReadyEvent& getSetRoutingReadyEvent() = 0;
     virtual SetRoutingRundownEvent& getSetRoutingRundownEvent() = 0;


     virtual void ackConnect(const uint16_t& handle, const am_gen::am_connectionID_t& connectionID, const uint16_t& error, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackConnectAsync(const uint16_t& handle, const am_gen::am_connectionID_t& connectionID, const uint16_t& error, AckConnectAsyncCallback callback) = 0;

     virtual void ackDisconnect(const uint16_t& handle, const am_gen::am_connectionID_t& connectionID, const uint16_t& error, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackDisconnectAsync(const uint16_t& handle, const am_gen::am_connectionID_t& connectionID, const uint16_t& error, AckDisconnectAsyncCallback callback) = 0;

     virtual void ackSetSinkVolume(const uint16_t& handle, const am_gen::am_volume_t& volume, const uint16_t& error, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackSetSinkVolumeAsync(const uint16_t& handle, const am_gen::am_volume_t& volume, const uint16_t& error, AckSetSinkVolumeAsyncCallback callback) = 0;

     virtual void ackSetSourceVolume(const uint16_t& handle, const am_gen::am_volume_t& volume, const uint16_t& error, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackSetSourceVolumeAsync(const uint16_t& handle, const am_gen::am_volume_t& volume, const uint16_t& error, AckSetSourceVolumeAsyncCallback callback) = 0;

     virtual void ackSetSourceState(const uint16_t& handle, const uint16_t& error, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackSetSourceStateAsync(const uint16_t& handle, const uint16_t& error, AckSetSourceStateAsyncCallback callback) = 0;

     virtual void ackSetSinkSoundProperties(const uint16_t& handle, const uint16_t& error, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackSetSinkSoundPropertiesAsync(const uint16_t& handle, const uint16_t& error, AckSetSinkSoundPropertiesAsyncCallback callback) = 0;

     virtual void ackSetSinkSoundProperty(const uint16_t& handle, const uint16_t& error, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackSetSinkSoundPropertyAsync(const uint16_t& handle, const uint16_t& error, AckSetSinkSoundPropertyAsyncCallback callback) = 0;

     virtual void ackSetSourceSoundProperties(const uint16_t& handle, const uint16_t& error, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackSetSourceSoundPropertiesAsync(const uint16_t& handle, const uint16_t& error, AckSetSourceSoundPropertiesAsyncCallback callback) = 0;

     virtual void ackSetSourceSoundProperty(const uint16_t& handle, const uint16_t& error, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackSetSourceSoundPropertyAsync(const uint16_t& handle, const uint16_t& error, AckSetSourceSoundPropertyAsyncCallback callback) = 0;

     virtual void ackSourceVolumeTick(const uint16_t& handle, const am_gen::am_sourceID_t& source, const am_gen::am_volume_t& volume, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackSourceVolumeTickAsync(const uint16_t& handle, const am_gen::am_sourceID_t& source, const am_gen::am_volume_t& volume, AckSourceVolumeTickAsyncCallback callback) = 0;

     virtual void ackSinkVolumeTick(const uint16_t& handle, const am_gen::am_sinkID_t& sink, const am_gen::am_volume_t& volume, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackSinkVolumeTickAsync(const uint16_t& handle, const am_gen::am_sinkID_t& sink, const am_gen::am_volume_t& volume, AckSinkVolumeTickAsyncCallback callback) = 0;

     virtual void ackCrossFading(const uint16_t& handle, const am_gen::am_HotSink_e& hotSink, const am_gen::am_Error_e& returnError, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackCrossFadingAsync(const uint16_t& handle, const am_gen::am_HotSink_e& hotSink, const am_gen::am_Error_e& returnError, AckCrossFadingAsyncCallback callback) = 0;

     virtual void peekDomain(const std::string& name, CommonAPI::CallStatus& callStatus, am_gen::am_domainID_t& domainID, am_gen::am_Error_e& error) = 0;
     virtual std::future<CommonAPI::CallStatus> peekDomainAsync(const std::string& name, PeekDomainAsyncCallback callback) = 0;

     virtual void registerDomain(const am_gen::am_Domain_s& domainData, const std::string& returnBusname, const std::string& returnPath, const std::string& returnInterface, CommonAPI::CallStatus& callStatus, am_gen::am_domainID_t& domainID, am_gen::am_Error_e& error) = 0;
     virtual std::future<CommonAPI::CallStatus> registerDomainAsync(const am_gen::am_Domain_s& domainData, const std::string& returnBusname, const std::string& returnPath, const std::string& returnInterface, RegisterDomainAsyncCallback callback) = 0;

     virtual void deregisterDomain(const am_gen::am_domainID_t& domainID, CommonAPI::CallStatus& callStatus, am_gen::am_Error_e& returnError) = 0;
     virtual std::future<CommonAPI::CallStatus> deregisterDomainAsync(const am_gen::am_domainID_t& domainID, DeregisterDomainAsyncCallback callback) = 0;

     virtual void registerGateway(const am_gen::am_Gateway_s& gatewayData, CommonAPI::CallStatus& callStatus, am_gen::am_gatewayID_t& gatewayID, am_gen::am_Error_e& error) = 0;
     virtual std::future<CommonAPI::CallStatus> registerGatewayAsync(const am_gen::am_Gateway_s& gatewayData, RegisterGatewayAsyncCallback callback) = 0;

     virtual void deregisterGateway(const am_gen::am_gatewayID_t& gatewayID, CommonAPI::CallStatus& callStatus, am_gen::am_Error_e& returnError) = 0;
     virtual std::future<CommonAPI::CallStatus> deregisterGatewayAsync(const am_gen::am_gatewayID_t& gatewayID, DeregisterGatewayAsyncCallback callback) = 0;

     virtual void peekSink(const std::string& name, CommonAPI::CallStatus& callStatus, am_gen::am_sinkID_t& sinkID, am_gen::am_Error_e& error) = 0;
     virtual std::future<CommonAPI::CallStatus> peekSinkAsync(const std::string& name, PeekSinkAsyncCallback callback) = 0;

     virtual void registerSink(const am_gen::sinkData_s& sinkData, CommonAPI::CallStatus& callStatus, am_gen::am_sinkID_t& sinkID, am_gen::am_Error_e& error) = 0;
     virtual std::future<CommonAPI::CallStatus> registerSinkAsync(const am_gen::sinkData_s& sinkData, RegisterSinkAsyncCallback callback) = 0;

     virtual void deregisterSink(const am_gen::am_sinkID_t& sinkID, CommonAPI::CallStatus& callStatus, am_gen::am_Error_e& returnError) = 0;
     virtual std::future<CommonAPI::CallStatus> deregisterSinkAsync(const am_gen::am_sinkID_t& sinkID, DeregisterSinkAsyncCallback callback) = 0;

     virtual void peekSource(const std::string& name, CommonAPI::CallStatus& callStatus, am_gen::am_sourceID_t& sourceID, am_gen::am_Error_e& error) = 0;
     virtual std::future<CommonAPI::CallStatus> peekSourceAsync(const std::string& name, PeekSourceAsyncCallback callback) = 0;

     virtual void registerSource(const am_gen::sourceData_s& sourceData, CommonAPI::CallStatus& callStatus, am_gen::am_sourceID_t& sourceID, am_gen::am_Error_e& error) = 0;
     virtual std::future<CommonAPI::CallStatus> registerSourceAsync(const am_gen::sourceData_s& sourceData, RegisterSourceAsyncCallback callback) = 0;

     virtual void deregisterSource(const am_gen::am_sourceID_t& sourceID, CommonAPI::CallStatus& callStatus, am_gen::am_Error_e& returnError) = 0;
     virtual std::future<CommonAPI::CallStatus> deregisterSourceAsync(const am_gen::am_sourceID_t& sourceID, DeregisterSourceAsyncCallback callback) = 0;

     virtual void registerCrossfader(const am_gen::crossfaderData_s& crossfaderData, CommonAPI::CallStatus& callStatus, am_gen::am_crossfaderID_t& crossfaderID, am_gen::am_Error_e& error) = 0;
     virtual std::future<CommonAPI::CallStatus> registerCrossfaderAsync(const am_gen::crossfaderData_s& crossfaderData, RegisterCrossfaderAsyncCallback callback) = 0;

     virtual void deregisterCrossfader(const am_gen::am_crossfaderID_t& crossfaderID, CommonAPI::CallStatus& callStatus, am_gen::am_Error_e& returnError) = 0;
     virtual std::future<CommonAPI::CallStatus> deregisterCrossfaderAsync(const am_gen::am_crossfaderID_t& crossfaderID, DeregisterCrossfaderAsyncCallback callback) = 0;

     virtual void peekSourceClassID(const std::string& name, CommonAPI::CallStatus& callStatus, am_gen::am_sourceClass_t& sourceClassID, am_gen::am_Error_e& error) = 0;
     virtual std::future<CommonAPI::CallStatus> peekSourceClassIDAsync(const std::string& name, PeekSourceClassIDAsyncCallback callback) = 0;

     virtual void peekSinkClassID(const std::string& name, CommonAPI::CallStatus& callStatus, am_gen::am_sinkClass_t& sinkClassID, am_gen::am_Error_e& error) = 0;
     virtual std::future<CommonAPI::CallStatus> peekSinkClassIDAsync(const std::string& name, PeekSinkClassIDAsyncCallback callback) = 0;

     virtual void hookInterruptStatusChange(const am_gen::am_sourceID_t& sourceID, const uint16_t& interruptState, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> hookInterruptStatusChangeAsync(const am_gen::am_sourceID_t& sourceID, const uint16_t& interruptState, HookInterruptStatusChangeAsyncCallback callback) = 0;

     virtual void hookDomainRegistrationComplete(const am_gen::am_domainID_t& domainID, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> hookDomainRegistrationCompleteAsync(const am_gen::am_domainID_t& domainID, HookDomainRegistrationCompleteAsyncCallback callback) = 0;

     virtual void hookSinkAvailablityStatusChange(const am_gen::am_sinkID_t& sinkID, const am_gen::am_Availability_s& availability, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> hookSinkAvailablityStatusChangeAsync(const am_gen::am_sinkID_t& sinkID, const am_gen::am_Availability_s& availability, HookSinkAvailablityStatusChangeAsyncCallback callback) = 0;

     virtual void hookSourceAvailablityStatusChange(const am_gen::am_sourceID_t& sourceID, const am_gen::am_Availability_s& availability, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> hookSourceAvailablityStatusChangeAsync(const am_gen::am_sourceID_t& sourceID, const am_gen::am_Availability_s& availability, HookSourceAvailablityStatusChangeAsyncCallback callback) = 0;

     virtual void hookDomainStateChange(const am_gen::am_domainID_t& domainID, const am_gen::am_DomainState_e& domainState, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> hookDomainStateChangeAsync(const am_gen::am_domainID_t& domainID, const am_gen::am_DomainState_e& domainState, HookDomainStateChangeAsyncCallback callback) = 0;

     virtual void hookTimingInformationChanged(const am_gen::am_connectionID_t& connectionID, const int16_t& delay, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> hookTimingInformationChangedAsync(const am_gen::am_connectionID_t& connectionID, const int16_t& delay, HookTimingInformationChangedAsyncCallback callback) = 0;

     virtual void sendChangedData(const am_gen::am_EarlyData_l& earlyData_volumes, const am_gen::am_EarlyData_l& earlyData_soundproperties, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> sendChangedDataAsync(const am_gen::am_EarlyData_l& earlyData_volumes, const am_gen::am_EarlyData_l& earlyData_soundproperties, SendChangedDataAsyncCallback callback) = 0;

     virtual void confirmRoutingReady(const am_gen::am_domainID_t& domainID, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> confirmRoutingReadyAsync(const am_gen::am_domainID_t& domainID, ConfirmRoutingReadyAsyncCallback callback) = 0;

     virtual void confirmRoutingRundown(const am_gen::am_domainID_t& domainID, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> confirmRoutingRundownAsync(const am_gen::am_domainID_t& domainID, ConfirmRoutingRundownAsyncCallback callback) = 0;

     virtual void updateGateway(const am_gen::am_gatewayID_t& gatewayID, const am_gen::am_ConnectionFormat_L& listSourceFormats, const am_gen::am_ConnectionFormat_L& listSinkFormats, const am_gen::bool_L& convertionMatrix, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> updateGatewayAsync(const am_gen::am_gatewayID_t& gatewayID, const am_gen::am_ConnectionFormat_L& listSourceFormats, const am_gen::am_ConnectionFormat_L& listSinkFormats, const am_gen::bool_L& convertionMatrix, UpdateGatewayAsyncCallback callback) = 0;

     virtual void updateSink(const am_gen::am_sinkID_t& sinkID, const am_gen::am_sinkClass_t& sinkClassID, const am_gen::am_SoundProperty_L& listSoundProperties, const am_gen::am_ConnectionFormat_L& listConnectionFormats, const am_gen::am_MainSoundProperty_L& listMainSoundProperties, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> updateSinkAsync(const am_gen::am_sinkID_t& sinkID, const am_gen::am_sinkClass_t& sinkClassID, const am_gen::am_SoundProperty_L& listSoundProperties, const am_gen::am_ConnectionFormat_L& listConnectionFormats, const am_gen::am_MainSoundProperty_L& listMainSoundProperties, UpdateSinkAsyncCallback callback) = 0;

     virtual void updateSource(const am_gen::am_sourceID_t& sourceID, const am_gen::am_sourceClass_t& sourceClassID, const am_gen::am_SoundProperty_L& listSoundProperties, const am_gen::am_ConnectionFormat_L& listConnectionFormats, const am_gen::am_MainSoundProperty_L& listMainSoundProperties, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> updateSourceAsync(const am_gen::am_sourceID_t& sourceID, const am_gen::am_sourceClass_t& sourceClassID, const am_gen::am_SoundProperty_L& listSoundProperties, const am_gen::am_ConnectionFormat_L& listConnectionFormats, const am_gen::am_MainSoundProperty_L& listMainSoundProperties, UpdateSourceAsyncCallback callback) = 0;

     virtual void ackSetVolumes(const uint16_t& handle, const am_gen::am_Volumes_l& listVolumes, const uint16_t& error, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackSetVolumesAsync(const uint16_t& handle, const am_gen::am_Volumes_l& listVolumes, const uint16_t& error, AckSetVolumesAsyncCallback callback) = 0;

     virtual void ackSinkNotificationConfiguration(const uint16_t& handle, const uint16_t& error, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackSinkNotificationConfigurationAsync(const uint16_t& handle, const uint16_t& error, AckSinkNotificationConfigurationAsyncCallback callback) = 0;

     virtual void ackSourceNotificationConfiguration(const uint16_t& handle, const uint16_t& error, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> ackSourceNotificationConfigurationAsync(const uint16_t& handle, const uint16_t& error, AckSourceNotificationConfigurationAsyncCallback callback) = 0;

     virtual void hookSinkNotificationDataChange(const am_gen::am_sinkID_t& sinkID, const am_gen::notificationPayload_s& payload, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> hookSinkNotificationDataChangeAsync(const am_gen::am_sinkID_t& sinkID, const am_gen::notificationPayload_s& payload, HookSinkNotificationDataChangeAsyncCallback callback) = 0;

     virtual void hookSourceNotificationDataChange(const am_gen::am_sourceID_t& sourceID, const am_gen::notificationPayload_s& payload, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> hookSourceNotificationDataChangeAsync(const am_gen::am_sourceID_t& sourceID, const am_gen::notificationPayload_s& payload, HookSourceNotificationDataChangeAsyncCallback callback) = 0;

     virtual void getRoutingReadyState(CommonAPI::CallStatus& callStatus, bool& readyState) = 0;
     virtual std::future<CommonAPI::CallStatus> getRoutingReadyStateAsync(GetRoutingReadyStateAsyncCallback callback) = 0;
 };

 } // namespace audiomanager
 } // namespace genivi
 } // namespace org

 #endif // ORG_GENIVI_AUDIOMANAGER_Routing_Interface_PROXY_BASE_H_

 /*
 * This file was generated by the CommonAPI Generators.
 *
  *  Copyright (c) 2012 BMW
  *
  *  \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
  *
  *  \copyright
  *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction,
  *  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
  *  subject to the following conditions:
  *  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
  *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
  *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  *
  *  For further information see http://www.genivi.org/.
 */
 #ifndef ORG_GENIVI_AUDIOMANAGER_Routing_Sender_PROXY_BASE_H_
 #define ORG_GENIVI_AUDIOMANAGER_Routing_Sender_PROXY_BASE_H_
 
 #include "RoutingSender.h"
 
 
 #include <org/genivi/audiomanager/am_gen.h>
 
 #define COMMONAPI_INTERNAL_COMPILATION
 
 #include <CommonAPI/InputStream.h>
 #include <CommonAPI/OutputStream.h>
 #include <CommonAPI/SerializableStruct.h>
 #include <cstdint>
 #include <vector>

 #include <CommonAPI/Proxy.h>
 #include <functional>
 #include <future>
 
 #undef COMMONAPI_INTERNAL_COMPILATION

 namespace org {
 namespace genivi {
 namespace audiomanager {

 class RoutingSenderProxyBase: virtual public CommonAPI::Proxy {
  public:
     typedef std::function<void(const CommonAPI::CallStatus&)> AsyncSetSourceStateAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_Error_e&)> SetDomainStateAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AsyncSetSourceVolumeAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AsyncSetSinkVolumeAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AsyncConnectAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AsyncDisconnectAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const am_gen::am_Error_e&)> AsyncAbortAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AsyncSetSinkSoundPropertiesAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AsyncSetSinkSoundPropertyAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AsyncSetSourceSoundPropertiesAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AsyncSetSourceSoundPropertyAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AsyncCrossFadeAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AsyncSetVolumesAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AsyncSetSinkNotificationConfigurationAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&)> AsyncSetSourceNotificationConfigurationAsyncCallback;




     virtual void asyncSetSourceState(const uint16_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_SourceState_e& sourceState, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> asyncSetSourceStateAsync(const uint16_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_SourceState_e& sourceState, AsyncSetSourceStateAsyncCallback callback) = 0;

     virtual void setDomainState(const am_gen::am_domainID_t& domainID, const am_gen::am_DomainState_e& domainState, CommonAPI::CallStatus& callStatus, am_gen::am_Error_e& error) = 0;
     virtual std::future<CommonAPI::CallStatus> setDomainStateAsync(const am_gen::am_domainID_t& domainID, const am_gen::am_DomainState_e& domainState, SetDomainStateAsyncCallback callback) = 0;

     virtual void asyncSetSourceVolume(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_volume_t& volume, const am_gen::am_RampType_e& ramp, const am_gen::am_time_t& time, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> asyncSetSourceVolumeAsync(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_volume_t& volume, const am_gen::am_RampType_e& ramp, const am_gen::am_time_t& time, AsyncSetSourceVolumeAsyncCallback callback) = 0;

     virtual void asyncSetSinkVolume(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_volume_t& volume, const am_gen::am_RampType_e& ramp, const am_gen::am_time_t& time, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> asyncSetSinkVolumeAsync(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_volume_t& volume, const am_gen::am_RampType_e& ramp, const am_gen::am_time_t& time, AsyncSetSinkVolumeAsyncCallback callback) = 0;

     virtual void asyncConnect(const am_gen::am_handle_t& handle, const am_gen::am_connectionID_t& connectionID, const am_gen::am_sourceID_t& sourceID, const am_gen::am_sinkID_t& sinkID, const am_gen::am_ConnectionFormat_e& connectionFormat, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> asyncConnectAsync(const am_gen::am_handle_t& handle, const am_gen::am_connectionID_t& connectionID, const am_gen::am_sourceID_t& sourceID, const am_gen::am_sinkID_t& sinkID, const am_gen::am_ConnectionFormat_e& connectionFormat, AsyncConnectAsyncCallback callback) = 0;

     virtual void asyncDisconnect(const am_gen::am_handle_t& handle, const am_gen::am_connectionID_t& connectionID, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> asyncDisconnectAsync(const am_gen::am_handle_t& handle, const am_gen::am_connectionID_t& connectionID, AsyncDisconnectAsyncCallback callback) = 0;

     virtual void asyncAbort(const am_gen::am_handle_t& handle, CommonAPI::CallStatus& callStatus, am_gen::am_Error_e& error) = 0;
     virtual std::future<CommonAPI::CallStatus> asyncAbortAsync(const am_gen::am_handle_t& handle, AsyncAbortAsyncCallback callback) = 0;

     virtual void asyncSetSinkSoundProperties(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_SoundProperty_L& listSoundProperties, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> asyncSetSinkSoundPropertiesAsync(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_SoundProperty_L& listSoundProperties, AsyncSetSinkSoundPropertiesAsyncCallback callback) = 0;

     virtual void asyncSetSinkSoundProperty(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_SoundProperty_s& soundProperty, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> asyncSetSinkSoundPropertyAsync(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_SoundProperty_s& soundProperty, AsyncSetSinkSoundPropertyAsyncCallback callback) = 0;

     virtual void asyncSetSourceSoundProperties(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_SoundProperty_L& listSoundProperties, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> asyncSetSourceSoundPropertiesAsync(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_SoundProperty_L& listSoundProperties, AsyncSetSourceSoundPropertiesAsyncCallback callback) = 0;

     virtual void asyncSetSourceSoundProperty(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_SoundProperty_s& soundProperty, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> asyncSetSourceSoundPropertyAsync(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_SoundProperty_s& soundProperty, AsyncSetSourceSoundPropertyAsyncCallback callback) = 0;

     virtual void asyncCrossFade(const am_gen::am_handle_t& handle, const am_gen::am_crossfaderID_t& crossfaderID, const am_gen::am_HotSink_e& hotSink, const am_gen::am_RampType_e& rampType, const am_gen::am_time_t& time, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> asyncCrossFadeAsync(const am_gen::am_handle_t& handle, const am_gen::am_crossfaderID_t& crossfaderID, const am_gen::am_HotSink_e& hotSink, const am_gen::am_RampType_e& rampType, const am_gen::am_time_t& time, AsyncCrossFadeAsyncCallback callback) = 0;

     virtual void asyncSetVolumes(const am_gen::am_handle_t& handle, const am_gen::am_Volumes_l& volumes, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> asyncSetVolumesAsync(const am_gen::am_handle_t& handle, const am_gen::am_Volumes_l& volumes, AsyncSetVolumesAsyncCallback callback) = 0;

     virtual void asyncSetSinkNotificationConfiguration(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_NotificationConfiguration_s& notificationConfiguration, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> asyncSetSinkNotificationConfigurationAsync(const am_gen::am_handle_t& handle, const am_gen::am_sinkID_t& sinkID, const am_gen::am_NotificationConfiguration_s& notificationConfiguration, AsyncSetSinkNotificationConfigurationAsyncCallback callback) = 0;

     virtual void asyncSetSourceNotificationConfiguration(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_NotificationConfiguration_s& notificationConfiguration, CommonAPI::CallStatus& callStatus) = 0;
     virtual std::future<CommonAPI::CallStatus> asyncSetSourceNotificationConfigurationAsync(const am_gen::am_handle_t& handle, const am_gen::am_sourceID_t& sourceID, const am_gen::am_NotificationConfiguration_s& notificationConfiguration, AsyncSetSourceNotificationConfigurationAsyncCallback callback) = 0;
 };

 } // namespace audiomanager
 } // namespace genivi
 } // namespace org

 #endif // ORG_GENIVI_AUDIOMANAGER_Routing_Sender_PROXY_BASE_H_

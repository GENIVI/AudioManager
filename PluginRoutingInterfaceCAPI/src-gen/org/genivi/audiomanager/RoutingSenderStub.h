/*
* This file was generated by the CommonAPI Generators.
*
 *  Copyright (c) 2012 BMW
 *
 *  \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
 *
 *  \copyright
 *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction,
 *  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 *  subject to the following conditions:
 *  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *  For further information see http://www.genivi.org/.
*/
#ifndef ORG_GENIVI_AUDIOMANAGER_Routing_Sender_STUB_H_
#define ORG_GENIVI_AUDIOMANAGER_Routing_Sender_STUB_H_



#include <org/genivi/audiomanager/am_gen.h>

#include "RoutingSender.h"

#define COMMONAPI_INTERNAL_COMPILATION

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/SerializableStruct.h>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace audiomanager {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service RoutingSender. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class RoutingSenderStubAdapter: virtual public CommonAPI::StubAdapter, public RoutingSender {
 public:

};


/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for RoutingSender.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class RoutingSenderStubRemoteEvent {
 public:
    virtual ~RoutingSenderStubRemoteEvent() { }

};


/**
 * Defines the interface that must be implemented by any class that should provide
 * the service RoutingSender to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class RoutingSenderStub : public CommonAPI::Stub<RoutingSenderStubAdapter , RoutingSenderStubRemoteEvent> {
 public:
    virtual ~RoutingSenderStub() { }


    /// This is the method that will be called on remote calls on the method asyncSetSourceState.
    virtual void asyncSetSourceState(uint16_t handle, am_gen::am_sourceID_t sourceID, am_gen::am_SourceState_e sourceState) = 0;
    /// This is the method that will be called on remote calls on the method setDomainState.
    virtual void setDomainState(am_gen::am_domainID_t domainID, am_gen::am_DomainState_e domainState, am_gen::am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method asyncSetSourceVolume.
    virtual void asyncSetSourceVolume(am_gen::am_handle_t handle, am_gen::am_sourceID_t sourceID, am_gen::am_volume_t volume, am_gen::am_RampType_e ramp, am_gen::am_time_t time) = 0;
    /// This is the method that will be called on remote calls on the method asyncSetSinkVolume.
    virtual void asyncSetSinkVolume(am_gen::am_handle_t handle, am_gen::am_sinkID_t sinkID, am_gen::am_volume_t volume, am_gen::am_RampType_e ramp, am_gen::am_time_t time) = 0;
    /// This is the method that will be called on remote calls on the method asyncConnect.
    virtual void asyncConnect(am_gen::am_handle_t handle, am_gen::am_connectionID_t connectionID, am_gen::am_sourceID_t sourceID, am_gen::am_sinkID_t sinkID, am_gen::am_ConnectionFormat_e connectionFormat) = 0;
    /// This is the method that will be called on remote calls on the method asyncDisconnect.
    virtual void asyncDisconnect(am_gen::am_handle_t handle, am_gen::am_connectionID_t connectionID) = 0;
    /// This is the method that will be called on remote calls on the method asyncAbort.
    virtual void asyncAbort(am_gen::am_handle_t handle, am_gen::am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method asyncSetSinkSoundProperties.
    virtual void asyncSetSinkSoundProperties(am_gen::am_handle_t handle, am_gen::am_sinkID_t sinkID, am_gen::am_SoundProperty_L listSoundProperties) = 0;
    /// This is the method that will be called on remote calls on the method asyncSetSinkSoundProperty.
    virtual void asyncSetSinkSoundProperty(am_gen::am_handle_t handle, am_gen::am_sinkID_t sinkID, am_gen::am_SoundProperty_s soundProperty) = 0;
    /// This is the method that will be called on remote calls on the method asyncSetSourceSoundProperties.
    virtual void asyncSetSourceSoundProperties(am_gen::am_handle_t handle, am_gen::am_sourceID_t sourceID, am_gen::am_SoundProperty_L listSoundProperties) = 0;
    /// This is the method that will be called on remote calls on the method asyncSetSourceSoundProperty.
    virtual void asyncSetSourceSoundProperty(am_gen::am_handle_t handle, am_gen::am_sourceID_t sourceID, am_gen::am_SoundProperty_s soundProperty) = 0;
    /// This is the method that will be called on remote calls on the method asyncCrossFade.
    virtual void asyncCrossFade(am_gen::am_handle_t handle, am_gen::am_crossfaderID_t crossfaderID, am_gen::am_HotSink_e hotSink, am_gen::am_RampType_e rampType, am_gen::am_time_t time) = 0;
    /// This is the method that will be called on remote calls on the method asyncSetVolumes.
    virtual void asyncSetVolumes(am_gen::am_handle_t handle, am_gen::am_Volumes_l volumes) = 0;
    /// This is the method that will be called on remote calls on the method asyncSetSinkNotificationConfiguration.
    virtual void asyncSetSinkNotificationConfiguration(am_gen::am_handle_t handle, am_gen::am_sinkID_t sinkID, am_gen::am_NotificationConfiguration_s notificationConfiguration) = 0;
    /// This is the method that will be called on remote calls on the method asyncSetSourceNotificationConfiguration.
    virtual void asyncSetSourceNotificationConfiguration(am_gen::am_handle_t handle, am_gen::am_sourceID_t sourceID, am_gen::am_NotificationConfiguration_s notificationConfiguration) = 0;
    
};

} // namespace audiomanager
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_AUDIOMANAGER_Routing_Sender_STUB_H_

/*
* This file was generated by the CommonAPI Generators.
*
 *  Copyright (c) 2012 BMW
 *
 *  \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
 *
 *  \copyright
 *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction,
 *  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 *  subject to the following conditions:
 *  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *  For further information see http://www.genivi.org/.
*/
#include "RoutingInterfaceDBusProxy.h"

namespace org {
namespace genivi {
namespace audiomanager {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createRoutingInterfaceDBusProxy(
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection) {
    return std::make_shared<RoutingInterfaceDBusProxy>(commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection);
}

__attribute__((constructor)) void registerRoutingInterfaceDBusProxy(void) {
    CommonAPI::DBus::DBusFactory::registerProxyFactoryMethod(RoutingInterface::getInterfaceId(),
       &createRoutingInterfaceDBusProxy);
}

RoutingInterfaceDBusProxy::RoutingInterfaceDBusProxy(
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection):
        CommonAPI::DBus::DBusProxy(commonApiAddress, interfaceName, busName, objectPath, dbusProxyconnection)
,        setRoutingReady_(*this, "setRoutingReady", ""),
                        setRoutingRundown_(*this, "setRoutingRundown", "")
                 {
}


RoutingInterfaceDBusProxy::SetRoutingReadyEvent& RoutingInterfaceDBusProxy::getSetRoutingReadyEvent() {
    return setRoutingReady_;
}
RoutingInterfaceDBusProxy::SetRoutingRundownEvent& RoutingInterfaceDBusProxy::getSetRoutingRundownEvent() {
    return setRoutingRundown_;
}

void RoutingInterfaceDBusProxy::ackConnect(const uint16_t& handle, const am_gen::am_connectionID_t& connectionID, const uint16_t& error, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_connectionID_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackConnect",
        "qqq",
        handle, connectionID, error, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackConnectAsync(const uint16_t& handle, const am_gen::am_connectionID_t& connectionID, const uint16_t& error, AckConnectAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_connectionID_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackConnect",
        "qqq",
        handle, connectionID, error, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::ackDisconnect(const uint16_t& handle, const am_gen::am_connectionID_t& connectionID, const uint16_t& error, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_connectionID_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackDisconnect",
        "qqq",
        handle, connectionID, error, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackDisconnectAsync(const uint16_t& handle, const am_gen::am_connectionID_t& connectionID, const uint16_t& error, AckDisconnectAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_connectionID_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackDisconnect",
        "qqq",
        handle, connectionID, error, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::ackSetSinkVolume(const uint16_t& handle, const am_gen::am_volume_t& volume, const uint16_t& error, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_volume_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackSetSinkVolume",
        "qnq",
        handle, volume, error, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackSetSinkVolumeAsync(const uint16_t& handle, const am_gen::am_volume_t& volume, const uint16_t& error, AckSetSinkVolumeAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_volume_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackSetSinkVolume",
        "qnq",
        handle, volume, error, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::ackSetSourceVolume(const uint16_t& handle, const am_gen::am_volume_t& volume, const uint16_t& error, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_volume_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackSetSourceVolume",
        "qnq",
        handle, volume, error, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackSetSourceVolumeAsync(const uint16_t& handle, const am_gen::am_volume_t& volume, const uint16_t& error, AckSetSourceVolumeAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_volume_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackSetSourceVolume",
        "qnq",
        handle, volume, error, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::ackSetSourceState(const uint16_t& handle, const uint16_t& error, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackSetSourceState",
        "qq",
        handle, error, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackSetSourceStateAsync(const uint16_t& handle, const uint16_t& error, AckSetSourceStateAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackSetSourceState",
        "qq",
        handle, error, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::ackSetSinkSoundProperties(const uint16_t& handle, const uint16_t& error, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackSetSinkSoundProperties",
        "qq",
        handle, error, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackSetSinkSoundPropertiesAsync(const uint16_t& handle, const uint16_t& error, AckSetSinkSoundPropertiesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackSetSinkSoundProperties",
        "qq",
        handle, error, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::ackSetSinkSoundProperty(const uint16_t& handle, const uint16_t& error, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackSetSinkSoundProperty",
        "qq",
        handle, error, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackSetSinkSoundPropertyAsync(const uint16_t& handle, const uint16_t& error, AckSetSinkSoundPropertyAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackSetSinkSoundProperty",
        "qq",
        handle, error, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::ackSetSourceSoundProperties(const uint16_t& handle, const uint16_t& error, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackSetSourceSoundProperties",
        "qq",
        handle, error, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackSetSourceSoundPropertiesAsync(const uint16_t& handle, const uint16_t& error, AckSetSourceSoundPropertiesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackSetSourceSoundProperties",
        "qq",
        handle, error, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::ackSetSourceSoundProperty(const uint16_t& handle, const uint16_t& error, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackSetSourceSoundProperty",
        "qq",
        handle, error, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackSetSourceSoundPropertyAsync(const uint16_t& handle, const uint16_t& error, AckSetSourceSoundPropertyAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackSetSourceSoundProperty",
        "qq",
        handle, error, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::ackSourceVolumeTick(const uint16_t& handle, const am_gen::am_sourceID_t& source, const am_gen::am_volume_t& volume, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_sourceID_t, am_gen::am_volume_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackSourceVolumeTick",
        "qqn",
        handle, source, volume, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackSourceVolumeTickAsync(const uint16_t& handle, const am_gen::am_sourceID_t& source, const am_gen::am_volume_t& volume, AckSourceVolumeTickAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_sourceID_t, am_gen::am_volume_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackSourceVolumeTick",
        "qqn",
        handle, source, volume, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::ackSinkVolumeTick(const uint16_t& handle, const am_gen::am_sinkID_t& sink, const am_gen::am_volume_t& volume, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_sinkID_t, am_gen::am_volume_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackSinkVolumeTick",
        "qqn",
        handle, sink, volume, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackSinkVolumeTickAsync(const uint16_t& handle, const am_gen::am_sinkID_t& sink, const am_gen::am_volume_t& volume, AckSinkVolumeTickAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_sinkID_t, am_gen::am_volume_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackSinkVolumeTick",
        "qqn",
        handle, sink, volume, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::ackCrossFading(const uint16_t& handle, const am_gen::am_HotSink_e& hotSink, const am_gen::am_Error_e& returnError, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_HotSink_e, am_gen::am_Error_e>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackCrossFading",
        "qii",
        handle, hotSink, returnError, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackCrossFadingAsync(const uint16_t& handle, const am_gen::am_HotSink_e& hotSink, const am_gen::am_Error_e& returnError, AckCrossFadingAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_HotSink_e, am_gen::am_Error_e>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackCrossFading",
        "qii",
        handle, hotSink, returnError, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::peekDomain(const std::string& name, CommonAPI::CallStatus& callStatus, am_gen::am_domainID_t& domainID, am_gen::am_Error_e& error) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t, am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "peekDomain",
        "s",
        name, 
        callStatus
        , domainID, error);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::peekDomainAsync(const std::string& name, PeekDomainAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t, am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "peekDomain",
        "s",
        name, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::registerDomain(const am_gen::am_Domain_s& domainData, const std::string& returnBusname, const std::string& returnPath, const std::string& returnInterface, CommonAPI::CallStatus& callStatus, am_gen::am_domainID_t& domainID, am_gen::am_Error_e& error) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Domain_s, std::string, std::string, std::string>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t, am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "registerDomain",
        "(qsssbbi)sss",
        domainData, returnBusname, returnPath, returnInterface, 
        callStatus
        , domainID, error);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::registerDomainAsync(const am_gen::am_Domain_s& domainData, const std::string& returnBusname, const std::string& returnPath, const std::string& returnInterface, RegisterDomainAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Domain_s, std::string, std::string, std::string>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t, am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "registerDomain",
        "(qsssbbi)sss",
        domainData, returnBusname, returnPath, returnInterface, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::deregisterDomain(const am_gen::am_domainID_t& domainID, CommonAPI::CallStatus& callStatus, am_gen::am_Error_e& returnError) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "deregisterDomain",
        "q",
        domainID, 
        callStatus
        , returnError);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::deregisterDomainAsync(const am_gen::am_domainID_t& domainID, DeregisterDomainAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "deregisterDomain",
        "q",
        domainID, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::registerGateway(const am_gen::am_Gateway_s& gatewayData, CommonAPI::CallStatus& callStatus, am_gen::am_gatewayID_t& gatewayID, am_gen::am_Error_e& error) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Gateway_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_gatewayID_t, am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "registerGateway",
        "(qsqqqqqaiaiab)",
        gatewayData, 
        callStatus
        , gatewayID, error);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::registerGatewayAsync(const am_gen::am_Gateway_s& gatewayData, RegisterGatewayAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Gateway_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_gatewayID_t, am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "registerGateway",
        "(qsqqqqqaiaiab)",
        gatewayData, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::deregisterGateway(const am_gen::am_gatewayID_t& gatewayID, CommonAPI::CallStatus& callStatus, am_gen::am_Error_e& returnError) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_gatewayID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "deregisterGateway",
        "q",
        gatewayID, 
        callStatus
        , returnError);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::deregisterGatewayAsync(const am_gen::am_gatewayID_t& gatewayID, DeregisterGatewayAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_gatewayID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "deregisterGateway",
        "q",
        gatewayID, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::peekSink(const std::string& name, CommonAPI::CallStatus& callStatus, am_gen::am_sinkID_t& sinkID, am_gen::am_Error_e& error) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sinkID_t, am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "peekSink",
        "s",
        name, 
        callStatus
        , sinkID, error);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::peekSinkAsync(const std::string& name, PeekSinkAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sinkID_t, am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "peekSink",
        "s",
        name, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::registerSink(const am_gen::sinkData_s& sinkData, CommonAPI::CallStatus& callStatus, am_gen::am_sinkID_t& sinkID, am_gen::am_Error_e& error) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::sinkData_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sinkID_t, am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "registerSink",
        "(qsqqnb(ii)ina(in)aia(in)a(iin)a(iin))",
        sinkData, 
        callStatus
        , sinkID, error);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::registerSinkAsync(const am_gen::sinkData_s& sinkData, RegisterSinkAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::sinkData_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sinkID_t, am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "registerSink",
        "(qsqqnb(ii)ina(in)aia(in)a(iin)a(iin))",
        sinkData, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::deregisterSink(const am_gen::am_sinkID_t& sinkID, CommonAPI::CallStatus& callStatus, am_gen::am_Error_e& returnError) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sinkID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "deregisterSink",
        "q",
        sinkID, 
        callStatus
        , returnError);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::deregisterSinkAsync(const am_gen::am_sinkID_t& sinkID, DeregisterSinkAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sinkID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "deregisterSink",
        "q",
        sinkID, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::peekSource(const std::string& name, CommonAPI::CallStatus& callStatus, am_gen::am_sourceID_t& sourceID, am_gen::am_Error_e& error) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceID_t, am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "peekSource",
        "s",
        name, 
        callStatus
        , sourceID, error);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::peekSourceAsync(const std::string& name, PeekSourceAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceID_t, am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "peekSource",
        "s",
        name, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::registerSource(const am_gen::sourceData_s& sourceData, CommonAPI::CallStatus& callStatus, am_gen::am_sourceID_t& sourceID, am_gen::am_Error_e& error) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::sourceData_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceID_t, am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "registerSource",
        "(qqsqinb(ii)ia(in)aia(in)a(iin)a(iin))",
        sourceData, 
        callStatus
        , sourceID, error);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::registerSourceAsync(const am_gen::sourceData_s& sourceData, RegisterSourceAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::sourceData_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceID_t, am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "registerSource",
        "(qqsqinb(ii)ia(in)aia(in)a(iin)a(iin))",
        sourceData, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::deregisterSource(const am_gen::am_sourceID_t& sourceID, CommonAPI::CallStatus& callStatus, am_gen::am_Error_e& returnError) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "deregisterSource",
        "q",
        sourceID, 
        callStatus
        , returnError);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::deregisterSourceAsync(const am_gen::am_sourceID_t& sourceID, DeregisterSourceAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "deregisterSource",
        "q",
        sourceID, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::registerCrossfader(const am_gen::crossfaderData_s& crossfaderData, CommonAPI::CallStatus& callStatus, am_gen::am_crossfaderID_t& crossfaderID, am_gen::am_Error_e& error) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::crossfaderData_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_crossfaderID_t, am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "registerCrossfader",
        "(qsqqqi)",
        crossfaderData, 
        callStatus
        , crossfaderID, error);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::registerCrossfaderAsync(const am_gen::crossfaderData_s& crossfaderData, RegisterCrossfaderAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::crossfaderData_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_crossfaderID_t, am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "registerCrossfader",
        "(qsqqqi)",
        crossfaderData, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::deregisterCrossfader(const am_gen::am_crossfaderID_t& crossfaderID, CommonAPI::CallStatus& callStatus, am_gen::am_Error_e& returnError) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_crossfaderID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "deregisterCrossfader",
        "q",
        crossfaderID, 
        callStatus
        , returnError);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::deregisterCrossfaderAsync(const am_gen::am_crossfaderID_t& crossfaderID, DeregisterCrossfaderAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_crossfaderID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "deregisterCrossfader",
        "q",
        crossfaderID, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::peekSourceClassID(const std::string& name, CommonAPI::CallStatus& callStatus, am_gen::am_sourceClass_t& sourceClassID, am_gen::am_Error_e& error) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceClass_t, am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "peekSourceClassID",
        "s",
        name, 
        callStatus
        , sourceClassID, error);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::peekSourceClassIDAsync(const std::string& name, PeekSourceClassIDAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceClass_t, am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "peekSourceClassID",
        "s",
        name, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::peekSinkClassID(const std::string& name, CommonAPI::CallStatus& callStatus, am_gen::am_sinkClass_t& sinkClassID, am_gen::am_Error_e& error) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sinkClass_t, am_gen::am_Error_e> >::callMethodWithReply(
        *this,
        "peekSinkClassID",
        "s",
        name, 
        callStatus
        , sinkClassID, error);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::peekSinkClassIDAsync(const std::string& name, PeekSinkClassIDAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string>,
                                     CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sinkClass_t, am_gen::am_Error_e> >::callMethodAsync(
        *this,
        "peekSinkClassID",
        "s",
        name, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::hookInterruptStatusChange(const am_gen::am_sourceID_t& sourceID, const uint16_t& interruptState, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceID_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "hookInterruptStatusChange",
        "qq",
        sourceID, interruptState, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::hookInterruptStatusChangeAsync(const am_gen::am_sourceID_t& sourceID, const uint16_t& interruptState, HookInterruptStatusChangeAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceID_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "hookInterruptStatusChange",
        "qq",
        sourceID, interruptState, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::hookDomainRegistrationComplete(const am_gen::am_domainID_t& domainID, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "hookDomainRegistrationComplete",
        "q",
        domainID, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::hookDomainRegistrationCompleteAsync(const am_gen::am_domainID_t& domainID, HookDomainRegistrationCompleteAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "hookDomainRegistrationComplete",
        "q",
        domainID, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::hookSinkAvailablityStatusChange(const am_gen::am_sinkID_t& sinkID, const am_gen::am_Availability_s& availability, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sinkID_t, am_gen::am_Availability_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "hookSinkAvailablityStatusChange",
        "q(ii)",
        sinkID, availability, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::hookSinkAvailablityStatusChangeAsync(const am_gen::am_sinkID_t& sinkID, const am_gen::am_Availability_s& availability, HookSinkAvailablityStatusChangeAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sinkID_t, am_gen::am_Availability_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "hookSinkAvailablityStatusChange",
        "q(ii)",
        sinkID, availability, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::hookSourceAvailablityStatusChange(const am_gen::am_sourceID_t& sourceID, const am_gen::am_Availability_s& availability, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceID_t, am_gen::am_Availability_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "hookSourceAvailablityStatusChange",
        "q(ii)",
        sourceID, availability, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::hookSourceAvailablityStatusChangeAsync(const am_gen::am_sourceID_t& sourceID, const am_gen::am_Availability_s& availability, HookSourceAvailablityStatusChangeAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceID_t, am_gen::am_Availability_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "hookSourceAvailablityStatusChange",
        "q(ii)",
        sourceID, availability, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::hookDomainStateChange(const am_gen::am_domainID_t& domainID, const am_gen::am_DomainState_e& domainState, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t, am_gen::am_DomainState_e>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "hookDomainStateChange",
        "qi",
        domainID, domainState, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::hookDomainStateChangeAsync(const am_gen::am_domainID_t& domainID, const am_gen::am_DomainState_e& domainState, HookDomainStateChangeAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t, am_gen::am_DomainState_e>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "hookDomainStateChange",
        "qi",
        domainID, domainState, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::hookTimingInformationChanged(const am_gen::am_connectionID_t& connectionID, const int16_t& delay, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_connectionID_t, int16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "hookTimingInformationChanged",
        "qn",
        connectionID, delay, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::hookTimingInformationChangedAsync(const am_gen::am_connectionID_t& connectionID, const int16_t& delay, HookTimingInformationChangedAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_connectionID_t, int16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "hookTimingInformationChanged",
        "qn",
        connectionID, delay, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::sendChangedData(const am_gen::am_EarlyData_l& earlyData_volumes, const am_gen::am_EarlyData_l& earlyData_soundproperties, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_EarlyData_l, am_gen::am_EarlyData_l>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "sendChangedData",
        "a(i(yv)(yv))a(i(yv)(yv))",
        earlyData_volumes, earlyData_soundproperties, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::sendChangedDataAsync(const am_gen::am_EarlyData_l& earlyData_volumes, const am_gen::am_EarlyData_l& earlyData_soundproperties, SendChangedDataAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_EarlyData_l, am_gen::am_EarlyData_l>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "sendChangedData",
        "a(i(yv)(yv))a(i(yv)(yv))",
        earlyData_volumes, earlyData_soundproperties, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::confirmRoutingReady(const am_gen::am_domainID_t& domainID, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "confirmRoutingReady",
        "q",
        domainID, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::confirmRoutingReadyAsync(const am_gen::am_domainID_t& domainID, ConfirmRoutingReadyAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "confirmRoutingReady",
        "q",
        domainID, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::confirmRoutingRundown(const am_gen::am_domainID_t& domainID, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "confirmRoutingRundown",
        "q",
        domainID, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::confirmRoutingRundownAsync(const am_gen::am_domainID_t& domainID, ConfirmRoutingRundownAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_domainID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "confirmRoutingRundown",
        "q",
        domainID, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::updateGateway(const am_gen::am_gatewayID_t& gatewayID, const am_gen::am_ConnectionFormat_L& listSourceFormats, const am_gen::am_ConnectionFormat_L& listSinkFormats, const am_gen::bool_L& convertionMatrix, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_gatewayID_t, am_gen::am_ConnectionFormat_L, am_gen::am_ConnectionFormat_L, am_gen::bool_L>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "updateGateway",
        "qaiaiab",
        gatewayID, listSourceFormats, listSinkFormats, convertionMatrix, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::updateGatewayAsync(const am_gen::am_gatewayID_t& gatewayID, const am_gen::am_ConnectionFormat_L& listSourceFormats, const am_gen::am_ConnectionFormat_L& listSinkFormats, const am_gen::bool_L& convertionMatrix, UpdateGatewayAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_gatewayID_t, am_gen::am_ConnectionFormat_L, am_gen::am_ConnectionFormat_L, am_gen::bool_L>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "updateGateway",
        "qaiaiab",
        gatewayID, listSourceFormats, listSinkFormats, convertionMatrix, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::updateSink(const am_gen::am_sinkID_t& sinkID, const am_gen::am_sinkClass_t& sinkClassID, const am_gen::am_SoundProperty_L& listSoundProperties, const am_gen::am_ConnectionFormat_L& listConnectionFormats, const am_gen::am_MainSoundProperty_L& listMainSoundProperties, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sinkID_t, am_gen::am_sinkClass_t, am_gen::am_SoundProperty_L, am_gen::am_ConnectionFormat_L, am_gen::am_MainSoundProperty_L>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "updateSink",
        "qqa(in)aia(in)",
        sinkID, sinkClassID, listSoundProperties, listConnectionFormats, listMainSoundProperties, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::updateSinkAsync(const am_gen::am_sinkID_t& sinkID, const am_gen::am_sinkClass_t& sinkClassID, const am_gen::am_SoundProperty_L& listSoundProperties, const am_gen::am_ConnectionFormat_L& listConnectionFormats, const am_gen::am_MainSoundProperty_L& listMainSoundProperties, UpdateSinkAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sinkID_t, am_gen::am_sinkClass_t, am_gen::am_SoundProperty_L, am_gen::am_ConnectionFormat_L, am_gen::am_MainSoundProperty_L>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "updateSink",
        "qqa(in)aia(in)",
        sinkID, sinkClassID, listSoundProperties, listConnectionFormats, listMainSoundProperties, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::updateSource(const am_gen::am_sourceID_t& sourceID, const am_gen::am_sourceClass_t& sourceClassID, const am_gen::am_SoundProperty_L& listSoundProperties, const am_gen::am_ConnectionFormat_L& listConnectionFormats, const am_gen::am_MainSoundProperty_L& listMainSoundProperties, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceID_t, am_gen::am_sourceClass_t, am_gen::am_SoundProperty_L, am_gen::am_ConnectionFormat_L, am_gen::am_MainSoundProperty_L>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "updateSource",
        "qqa(in)aia(in)",
        sourceID, sourceClassID, listSoundProperties, listConnectionFormats, listMainSoundProperties, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::updateSourceAsync(const am_gen::am_sourceID_t& sourceID, const am_gen::am_sourceClass_t& sourceClassID, const am_gen::am_SoundProperty_L& listSoundProperties, const am_gen::am_ConnectionFormat_L& listConnectionFormats, const am_gen::am_MainSoundProperty_L& listMainSoundProperties, UpdateSourceAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceID_t, am_gen::am_sourceClass_t, am_gen::am_SoundProperty_L, am_gen::am_ConnectionFormat_L, am_gen::am_MainSoundProperty_L>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "updateSource",
        "qqa(in)aia(in)",
        sourceID, sourceClassID, listSoundProperties, listConnectionFormats, listMainSoundProperties, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::ackSetVolumes(const uint16_t& handle, const am_gen::am_Volumes_l& listVolumes, const uint16_t& error, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_Volumes_l, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackSetVolumes",
        "qa(i(yv)niq)q",
        handle, listVolumes, error, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackSetVolumesAsync(const uint16_t& handle, const am_gen::am_Volumes_l& listVolumes, const uint16_t& error, AckSetVolumesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, am_gen::am_Volumes_l, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackSetVolumes",
        "qa(i(yv)niq)q",
        handle, listVolumes, error, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::ackSinkNotificationConfiguration(const uint16_t& handle, const uint16_t& error, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackSinkNotificationConfiguration",
        "qq",
        handle, error, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackSinkNotificationConfigurationAsync(const uint16_t& handle, const uint16_t& error, AckSinkNotificationConfigurationAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackSinkNotificationConfiguration",
        "qq",
        handle, error, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::ackSourceNotificationConfiguration(const uint16_t& handle, const uint16_t& error, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "ackSourceNotificationConfiguration",
        "qq",
        handle, error, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::ackSourceNotificationConfigurationAsync(const uint16_t& handle, const uint16_t& error, AckSourceNotificationConfigurationAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint16_t, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "ackSourceNotificationConfiguration",
        "qq",
        handle, error, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::hookSinkNotificationDataChange(const am_gen::am_sinkID_t& sinkID, const am_gen::notificationPayload_s& payload, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sinkID_t, am_gen::notificationPayload_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "hookSinkNotificationDataChange",
        "q(nn)",
        sinkID, payload, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::hookSinkNotificationDataChangeAsync(const am_gen::am_sinkID_t& sinkID, const am_gen::notificationPayload_s& payload, HookSinkNotificationDataChangeAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sinkID_t, am_gen::notificationPayload_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "hookSinkNotificationDataChange",
        "q(nn)",
        sinkID, payload, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::hookSourceNotificationDataChange(const am_gen::am_sourceID_t& sourceID, const am_gen::notificationPayload_s& payload, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceID_t, am_gen::notificationPayload_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "hookSourceNotificationDataChange",
        "q(nn)",
        sourceID, payload, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::hookSourceNotificationDataChangeAsync(const am_gen::am_sourceID_t& sourceID, const am_gen::notificationPayload_s& payload, HookSourceNotificationDataChangeAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<am_gen::am_sourceID_t, am_gen::notificationPayload_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "hookSourceNotificationDataChange",
        "q(nn)",
        sourceID, payload, 
        std::move(callback));
}
void RoutingInterfaceDBusProxy::getRoutingReadyState(CommonAPI::CallStatus& callStatus, bool& readyState) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<bool> >::callMethodWithReply(
        *this,
        "getRoutingReadyState",
        "",
        callStatus
        , readyState);
}
std::future<CommonAPI::CallStatus> RoutingInterfaceDBusProxy::getRoutingReadyStateAsync(GetRoutingReadyStateAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<bool> >::callMethodAsync(
        *this,
        "getRoutingReadyState",
        "",
        std::move(callback));
}

void RoutingInterfaceDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
}

} // namespace audiomanager
} // namespace genivi
} // namespace org

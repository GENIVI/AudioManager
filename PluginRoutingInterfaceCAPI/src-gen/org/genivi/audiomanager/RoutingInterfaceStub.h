/*
* This file was generated by the CommonAPI Generators.
*
 *  Copyright (c) 2012 BMW
 *
 *  \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
 *
 *  \copyright
 *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction,
 *  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 *  subject to the following conditions:
 *  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *  For further information see http://www.genivi.org/.
*/
#ifndef ORG_GENIVI_AUDIOMANAGER_Routing_Interface_STUB_H_
#define ORG_GENIVI_AUDIOMANAGER_Routing_Interface_STUB_H_



#include <org/genivi/audiomanager/am_gen.h>

#include "RoutingInterface.h"

#define COMMONAPI_INTERNAL_COMPILATION

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/SerializableStruct.h>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Stub.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace audiomanager {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service RoutingInterface. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class RoutingInterfaceStubAdapter: virtual public CommonAPI::StubAdapter, public RoutingInterface {
 public:

    /**
     * Sends a broadcast event for setRoutingReady. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSetRoutingReadyEvent() = 0;
    /**
     * Sends a broadcast event for setRoutingRundown. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSetRoutingRundownEvent() = 0;
};


/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for RoutingInterface.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class RoutingInterfaceStubRemoteEvent {
 public:
    virtual ~RoutingInterfaceStubRemoteEvent() { }

};


/**
 * Defines the interface that must be implemented by any class that should provide
 * the service RoutingInterface to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class RoutingInterfaceStub : public CommonAPI::Stub<RoutingInterfaceStubAdapter , RoutingInterfaceStubRemoteEvent> {
 public:
    virtual ~RoutingInterfaceStub() { }


    /// This is the method that will be called on remote calls on the method ackConnect.
    virtual void ackConnect(uint16_t handle, am_gen::am_connectionID_t connectionID, uint16_t error) = 0;
    /// This is the method that will be called on remote calls on the method ackDisconnect.
    virtual void ackDisconnect(uint16_t handle, am_gen::am_connectionID_t connectionID, uint16_t error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetSinkVolume.
    virtual void ackSetSinkVolume(uint16_t handle, am_gen::am_volume_t volume, uint16_t error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetSourceVolume.
    virtual void ackSetSourceVolume(uint16_t handle, am_gen::am_volume_t volume, uint16_t error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetSourceState.
    virtual void ackSetSourceState(uint16_t handle, uint16_t error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetSinkSoundProperties.
    virtual void ackSetSinkSoundProperties(uint16_t handle, uint16_t error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetSinkSoundProperty.
    virtual void ackSetSinkSoundProperty(uint16_t handle, uint16_t error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetSourceSoundProperties.
    virtual void ackSetSourceSoundProperties(uint16_t handle, uint16_t error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetSourceSoundProperty.
    virtual void ackSetSourceSoundProperty(uint16_t handle, uint16_t error) = 0;
    /// This is the method that will be called on remote calls on the method ackSourceVolumeTick.
    virtual void ackSourceVolumeTick(uint16_t handle, am_gen::am_sourceID_t source, am_gen::am_volume_t volume) = 0;
    /// This is the method that will be called on remote calls on the method ackSinkVolumeTick.
    virtual void ackSinkVolumeTick(uint16_t handle, am_gen::am_sinkID_t sink, am_gen::am_volume_t volume) = 0;
    /// This is the method that will be called on remote calls on the method ackCrossFading.
    virtual void ackCrossFading(uint16_t handle, am_gen::am_HotSink_e hotSink, am_gen::am_Error_e returnError) = 0;
    /// This is the method that will be called on remote calls on the method peekDomain.
    virtual void peekDomain(std::string name, am_gen::am_domainID_t& domainID, am_gen::am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method registerDomain.
    virtual void registerDomain(am_gen::am_Domain_s domainData, std::string returnBusname, std::string returnPath, std::string returnInterface, am_gen::am_domainID_t& domainID, am_gen::am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method deregisterDomain.
    virtual void deregisterDomain(am_gen::am_domainID_t domainID, am_gen::am_Error_e& returnError) = 0;
    /// This is the method that will be called on remote calls on the method registerGateway.
    virtual void registerGateway(am_gen::am_Gateway_s gatewayData, am_gen::am_gatewayID_t& gatewayID, am_gen::am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method deregisterGateway.
    virtual void deregisterGateway(am_gen::am_gatewayID_t gatewayID, am_gen::am_Error_e& returnError) = 0;
    /// This is the method that will be called on remote calls on the method peekSink.
    virtual void peekSink(std::string name, am_gen::am_sinkID_t& sinkID, am_gen::am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method registerSink.
    virtual void registerSink(am_gen::sinkData_s sinkData, am_gen::am_sinkID_t& sinkID, am_gen::am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method deregisterSink.
    virtual void deregisterSink(am_gen::am_sinkID_t sinkID, am_gen::am_Error_e& returnError) = 0;
    /// This is the method that will be called on remote calls on the method peekSource.
    virtual void peekSource(std::string name, am_gen::am_sourceID_t& sourceID, am_gen::am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method registerSource.
    virtual void registerSource(am_gen::sourceData_s sourceData, am_gen::am_sourceID_t& sourceID, am_gen::am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method deregisterSource.
    virtual void deregisterSource(am_gen::am_sourceID_t sourceID, am_gen::am_Error_e& returnError) = 0;
    /// This is the method that will be called on remote calls on the method registerCrossfader.
    virtual void registerCrossfader(am_gen::crossfaderData_s crossfaderData, am_gen::am_crossfaderID_t& crossfaderID, am_gen::am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method deregisterCrossfader.
    virtual void deregisterCrossfader(am_gen::am_crossfaderID_t crossfaderID, am_gen::am_Error_e& returnError) = 0;
    /// This is the method that will be called on remote calls on the method peekSourceClassID.
    virtual void peekSourceClassID(std::string name, am_gen::am_sourceClass_t& sourceClassID, am_gen::am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method peekSinkClassID.
    virtual void peekSinkClassID(std::string name, am_gen::am_sinkClass_t& sinkClassID, am_gen::am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method hookInterruptStatusChange.
    virtual void hookInterruptStatusChange(am_gen::am_sourceID_t sourceID, uint16_t interruptState) = 0;
    /// This is the method that will be called on remote calls on the method hookDomainRegistrationComplete.
    virtual void hookDomainRegistrationComplete(am_gen::am_domainID_t domainID) = 0;
    /// This is the method that will be called on remote calls on the method hookSinkAvailablityStatusChange.
    virtual void hookSinkAvailablityStatusChange(am_gen::am_sinkID_t sinkID, am_gen::am_Availability_s availability) = 0;
    /// This is the method that will be called on remote calls on the method hookSourceAvailablityStatusChange.
    virtual void hookSourceAvailablityStatusChange(am_gen::am_sourceID_t sourceID, am_gen::am_Availability_s availability) = 0;
    /// This is the method that will be called on remote calls on the method hookDomainStateChange.
    virtual void hookDomainStateChange(am_gen::am_domainID_t domainID, am_gen::am_DomainState_e domainState) = 0;
    /// This is the method that will be called on remote calls on the method hookTimingInformationChanged.
    virtual void hookTimingInformationChanged(am_gen::am_connectionID_t connectionID, int16_t delay) = 0;
    /// This is the method that will be called on remote calls on the method sendChangedData.
    virtual void sendChangedData(am_gen::am_EarlyData_l earlyData_volumes, am_gen::am_EarlyData_l earlyData_soundproperties) = 0;
    /// This is the method that will be called on remote calls on the method confirmRoutingReady.
    virtual void confirmRoutingReady(am_gen::am_domainID_t domainID) = 0;
    /// This is the method that will be called on remote calls on the method confirmRoutingRundown.
    virtual void confirmRoutingRundown(am_gen::am_domainID_t domainID) = 0;
    /// This is the method that will be called on remote calls on the method updateGateway.
    virtual void updateGateway(am_gen::am_gatewayID_t gatewayID, am_gen::am_ConnectionFormat_L listSourceFormats, am_gen::am_ConnectionFormat_L listSinkFormats, am_gen::bool_L convertionMatrix) = 0;
    /// This is the method that will be called on remote calls on the method updateSink.
    virtual void updateSink(am_gen::am_sinkID_t sinkID, am_gen::am_sinkClass_t sinkClassID, am_gen::am_SoundProperty_L listSoundProperties, am_gen::am_ConnectionFormat_L listConnectionFormats, am_gen::am_MainSoundProperty_L listMainSoundProperties) = 0;
    /// This is the method that will be called on remote calls on the method updateSource.
    virtual void updateSource(am_gen::am_sourceID_t sourceID, am_gen::am_sourceClass_t sourceClassID, am_gen::am_SoundProperty_L listSoundProperties, am_gen::am_ConnectionFormat_L listConnectionFormats, am_gen::am_MainSoundProperty_L listMainSoundProperties) = 0;
    /// This is the method that will be called on remote calls on the method ackSetVolumes.
    virtual void ackSetVolumes(uint16_t handle, am_gen::am_Volumes_l listVolumes, uint16_t error) = 0;
    /// This is the method that will be called on remote calls on the method ackSinkNotificationConfiguration.
    virtual void ackSinkNotificationConfiguration(uint16_t handle, uint16_t error) = 0;
    /// This is the method that will be called on remote calls on the method ackSourceNotificationConfiguration.
    virtual void ackSourceNotificationConfiguration(uint16_t handle, uint16_t error) = 0;
    /// This is the method that will be called on remote calls on the method hookSinkNotificationDataChange.
    virtual void hookSinkNotificationDataChange(am_gen::am_sinkID_t sinkID, am_gen::notificationPayload_s payload) = 0;
    /// This is the method that will be called on remote calls on the method hookSourceNotificationDataChange.
    virtual void hookSourceNotificationDataChange(am_gen::am_sourceID_t sourceID, am_gen::notificationPayload_s payload) = 0;
    /// This is the method that will be called on remote calls on the method getRoutingReadyState.
    virtual void getRoutingReadyState(bool& readyState) = 0;
    
    /// Sends a broadcast event for setRoutingReady.
    virtual void fireSetRoutingReadyEvent() = 0;
    /// Sends a broadcast event for setRoutingRundown.
    virtual void fireSetRoutingRundownEvent() = 0;
};

} // namespace audiomanager
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_AUDIOMANAGER_Routing_Interface_STUB_H_

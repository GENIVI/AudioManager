/*
* This file was generated by the CommonAPI Generators.
*
 *  Copyright (c) 2012 BMW
 *
 *  \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
 *
 *  \copyright
 *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction,
 *  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 *  subject to the following conditions:
 *  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *  For further information see http://www.genivi.org/.
*/
#include <org/genivi/audiomanager/RoutingInterfaceStubDefault.h>

namespace org {
namespace genivi {
namespace audiomanager {

RoutingInterfaceStubDefault::RoutingInterfaceStubDefault():
        remoteEventHandler_(this) {
}

RoutingInterfaceStubRemoteEvent* RoutingInterfaceStubDefault::initStubAdapter(const std::shared_ptr<RoutingInterfaceStubAdapter>& stubAdapter) {
    stubAdapter_ = stubAdapter;
    return &remoteEventHandler_;
}


void RoutingInterfaceStubDefault::ackConnect(uint16_t handle, am_gen::am_connectionID_t connectionID, uint16_t error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::ackDisconnect(uint16_t handle, am_gen::am_connectionID_t connectionID, uint16_t error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::ackSetSinkVolume(uint16_t handle, am_gen::am_volume_t volume, uint16_t error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::ackSetSourceVolume(uint16_t handle, am_gen::am_volume_t volume, uint16_t error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::ackSetSourceState(uint16_t handle, uint16_t error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::ackSetSinkSoundProperties(uint16_t handle, uint16_t error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::ackSetSinkSoundProperty(uint16_t handle, uint16_t error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::ackSetSourceSoundProperties(uint16_t handle, uint16_t error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::ackSetSourceSoundProperty(uint16_t handle, uint16_t error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::ackSourceVolumeTick(uint16_t handle, am_gen::am_sourceID_t source, am_gen::am_volume_t volume) {
    // No operation in default
}

void RoutingInterfaceStubDefault::ackSinkVolumeTick(uint16_t handle, am_gen::am_sinkID_t sink, am_gen::am_volume_t volume) {
    // No operation in default
}

void RoutingInterfaceStubDefault::ackCrossFading(uint16_t handle, am_gen::am_HotSink_e hotSink, am_gen::am_Error_e returnError) {
    // No operation in default
}

void RoutingInterfaceStubDefault::peekDomain(std::string name, am_gen::am_domainID_t& domainID, am_gen::am_Error_e& error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::registerDomain(am_gen::am_Domain_s domainData, std::string returnBusname, std::string returnPath, std::string returnInterface, am_gen::am_domainID_t& domainID, am_gen::am_Error_e& error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::deregisterDomain(am_gen::am_domainID_t domainID, am_gen::am_Error_e& returnError) {
    // No operation in default
}

void RoutingInterfaceStubDefault::registerGateway(am_gen::am_Gateway_s gatewayData, am_gen::am_gatewayID_t& gatewayID, am_gen::am_Error_e& error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::deregisterGateway(am_gen::am_gatewayID_t gatewayID, am_gen::am_Error_e& returnError) {
    // No operation in default
}

void RoutingInterfaceStubDefault::peekSink(std::string name, am_gen::am_sinkID_t& sinkID, am_gen::am_Error_e& error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::registerSink(am_gen::sinkData_s sinkData, am_gen::am_sinkID_t& sinkID, am_gen::am_Error_e& error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::deregisterSink(am_gen::am_sinkID_t sinkID, am_gen::am_Error_e& returnError) {
    // No operation in default
}

void RoutingInterfaceStubDefault::peekSource(std::string name, am_gen::am_sourceID_t& sourceID, am_gen::am_Error_e& error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::registerSource(am_gen::sourceData_s sourceData, am_gen::am_sourceID_t& sourceID, am_gen::am_Error_e& error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::deregisterSource(am_gen::am_sourceID_t sourceID, am_gen::am_Error_e& returnError) {
    // No operation in default
}

void RoutingInterfaceStubDefault::registerCrossfader(am_gen::crossfaderData_s crossfaderData, am_gen::am_crossfaderID_t& crossfaderID, am_gen::am_Error_e& error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::deregisterCrossfader(am_gen::am_crossfaderID_t crossfaderID, am_gen::am_Error_e& returnError) {
    // No operation in default
}

void RoutingInterfaceStubDefault::peekSourceClassID(std::string name, am_gen::am_sourceClass_t& sourceClassID, am_gen::am_Error_e& error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::peekSinkClassID(std::string name, am_gen::am_sinkClass_t& sinkClassID, am_gen::am_Error_e& error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::hookInterruptStatusChange(am_gen::am_sourceID_t sourceID, uint16_t interruptState) {
    // No operation in default
}

void RoutingInterfaceStubDefault::hookDomainRegistrationComplete(am_gen::am_domainID_t domainID) {
    // No operation in default
}

void RoutingInterfaceStubDefault::hookSinkAvailablityStatusChange(am_gen::am_sinkID_t sinkID, am_gen::am_Availability_s availability) {
    // No operation in default
}

void RoutingInterfaceStubDefault::hookSourceAvailablityStatusChange(am_gen::am_sourceID_t sourceID, am_gen::am_Availability_s availability) {
    // No operation in default
}

void RoutingInterfaceStubDefault::hookDomainStateChange(am_gen::am_domainID_t domainID, am_gen::am_DomainState_e domainState) {
    // No operation in default
}

void RoutingInterfaceStubDefault::hookTimingInformationChanged(am_gen::am_connectionID_t connectionID, int16_t delay) {
    // No operation in default
}

void RoutingInterfaceStubDefault::sendChangedData(am_gen::am_EarlyData_l earlyData_volumes, am_gen::am_EarlyData_l earlyData_soundproperties) {
    // No operation in default
}

void RoutingInterfaceStubDefault::confirmRoutingReady(am_gen::am_domainID_t domainID) {
    // No operation in default
}

void RoutingInterfaceStubDefault::confirmRoutingRundown(am_gen::am_domainID_t domainID) {
    // No operation in default
}

void RoutingInterfaceStubDefault::updateGateway(am_gen::am_gatewayID_t gatewayID, am_gen::am_ConnectionFormat_L listSourceFormats, am_gen::am_ConnectionFormat_L listSinkFormats, am_gen::bool_L convertionMatrix) {
    // No operation in default
}

void RoutingInterfaceStubDefault::updateSink(am_gen::am_sinkID_t sinkID, am_gen::am_sinkClass_t sinkClassID, am_gen::am_SoundProperty_L listSoundProperties, am_gen::am_ConnectionFormat_L listConnectionFormats, am_gen::am_MainSoundProperty_L listMainSoundProperties) {
    // No operation in default
}

void RoutingInterfaceStubDefault::updateSource(am_gen::am_sourceID_t sourceID, am_gen::am_sourceClass_t sourceClassID, am_gen::am_SoundProperty_L listSoundProperties, am_gen::am_ConnectionFormat_L listConnectionFormats, am_gen::am_MainSoundProperty_L listMainSoundProperties) {
    // No operation in default
}

void RoutingInterfaceStubDefault::ackSetVolumes(uint16_t handle, am_gen::am_Volumes_l listVolumes, uint16_t error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::ackSinkNotificationConfiguration(uint16_t handle, uint16_t error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::ackSourceNotificationConfiguration(uint16_t handle, uint16_t error) {
    // No operation in default
}

void RoutingInterfaceStubDefault::hookSinkNotificationDataChange(am_gen::am_sinkID_t sinkID, am_gen::notificationPayload_s payload) {
    // No operation in default
}

void RoutingInterfaceStubDefault::hookSourceNotificationDataChange(am_gen::am_sourceID_t sourceID, am_gen::notificationPayload_s payload) {
    // No operation in default
}

void RoutingInterfaceStubDefault::getRoutingReadyState(bool& readyState) {
    // No operation in default
}


void RoutingInterfaceStubDefault::fireSetRoutingReadyEvent() {
    stubAdapter_->fireSetRoutingReadyEvent();
}
void RoutingInterfaceStubDefault::fireSetRoutingRundownEvent() {
    stubAdapter_->fireSetRoutingRundownEvent();
}

RoutingInterfaceStubDefault::RemoteEventHandler::RemoteEventHandler(RoutingInterfaceStubDefault* defaultStub):
        defaultStub_(defaultStub) {
}

} // namespace audiomanager
} // namespace genivi
} // namespace org

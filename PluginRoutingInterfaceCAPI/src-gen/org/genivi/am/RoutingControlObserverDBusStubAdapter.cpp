/*
* This file was generated by the CommonAPI Generators.
*
 * Copyright (C) 2013, BMW AG
 *
 * \author Christian Linke, christian.linke@bmw.de BMW 2012,2013
*/
#include "RoutingControlObserverDBusStubAdapter.h"
#include <org/genivi/am/RoutingControlObserver.h>

namespace org {
namespace genivi {
namespace am {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createRoutingControlObserverDBusStubAdapter(
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<RoutingControlObserverDBusStubAdapter>(commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

__attribute__((constructor)) void registerRoutingControlObserverDBusStubAdapter(void) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(RoutingControlObserver::getInterfaceId(),
                                                               &createRoutingControlObserverDBusStubAdapter);
}

RoutingControlObserverDBusStubAdapter::RoutingControlObserverDBusStubAdapter(
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        RoutingControlObserverDBusStubAdapterHelper(commonApiAddress, dbusInterfaceName, dbusBusName, dbusObjectPath, dbusConnection, std::dynamic_pointer_cast<RoutingControlObserverStub>(stub)) {
}

const char* RoutingControlObserverDBusStubAdapter::getMethodsDBusIntrospectionXmlData() const {
    return
        "<method name=\"getRoutingReadyAttribute\">\n"
        	"<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setRoutingReadyAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onRoutingReadyAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"ackConnect\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"connectionID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"ackDisconnect\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"connectionID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"ackSetSinkVolumeChange\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"volume\" type=\"n\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"ackSetSourceVolumeChange\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"volume\" type=\"n\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"ackSetSourceState\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"ackSetSinkSoundProperties\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"ackSetSinkSoundProperty\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"ackSetSourceSoundProperties\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"ackSetSourceSoundProperty\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"ackCrossFading\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"hotSink\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"ackSourceVolumeTick\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"volume\" type=\"n\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"ackSinkVolumeTick\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"sinkID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"volume\" type=\"n\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"peekDomain\">\n"
            "<arg name=\"name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"domainID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"registerDomain\">\n"
            "<arg name=\"domainData\" type=\"(qsssbbi)\" direction=\"in\" />\n"
            "<arg name=\"returnInterface\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"returnPath\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"returnBusname\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"domainID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"deregisterDomain\">\n"
            "<arg name=\"domainID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"registerGateway\">\n"
            "<arg name=\"gatewayData\" type=\"(qsqqqqqaqaqab)\" direction=\"in\" />\n"
            "<arg name=\"gatewayID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"deregisterGateway\">\n"
            "<arg name=\"gatewayID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"peekSink\">\n"
            "<arg name=\"name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"sinkID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"registerSink\">\n"
            "<arg name=\"sinkData\" type=\"(qsqqnb(iq)ina(qn)aqa(qn)a(qin)a(qin))\" direction=\"in\" />\n"
            "<arg name=\"sinkID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"deregisterSink\">\n"
            "<arg name=\"sinkID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"peekSource\">\n"
            "<arg name=\"name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"sourceID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"registerSource\">\n"
            "<arg name=\"sourceData\" type=\"(qqsqinb(iq)ia(qn)aqa(qn)a(qin)a(qin))\" direction=\"in\" />\n"
            "<arg name=\"sourceID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"deregisterSource\">\n"
            "<arg name=\"sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"registerCrossfader\">\n"
            "<arg name=\"crossfaderData\" type=\"(qsqqqi)\" direction=\"in\" />\n"
            "<arg name=\"crossfaderID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"deregisterCrossfader\">\n"
            "<arg name=\"crossfaderID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"peekSourceClassID\">\n"
            "<arg name=\"name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"sourceClassID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"peekSinkClassID\">\n"
            "<arg name=\"name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"sinkClassID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"hookInterruptStatusChange\">\n"
            "<arg name=\"sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"interruptState\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"hookDomainRegistrationComplete\">\n"
            "<arg name=\"domainID\" type=\"q\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"hookSinkAvailablityStatusChange\">\n"
            "<arg name=\"sinkID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"availability\" type=\"(iq)\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"hookSourceAvailablityStatusChange\">\n"
            "<arg name=\"sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"availability\" type=\"(iq)\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"hookDomainStateChange\">\n"
            "<arg name=\"domainID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"domainState\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"hookTimingInformationChanged\">\n"
            "<arg name=\"connectionID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"delay\" type=\"n\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"sendChangedData\">\n"
            "<arg name=\"earlyData\" type=\"a(i(yv)(yv))\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"updateGateway\">\n"
            "<arg name=\"gatewayID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"listSourceFormats\" type=\"aq\" direction=\"in\" />\n"
            "<arg name=\"listSinkFormats\" type=\"aq\" direction=\"in\" />\n"
            "<arg name=\"convertionMatrix\" type=\"ab\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"updateSink\">\n"
            "<arg name=\"sinkID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"sinkClassID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"listSoundProperties\" type=\"a(qn)\" direction=\"in\" />\n"
            "<arg name=\"listConnectionFormats\" type=\"aq\" direction=\"in\" />\n"
            "<arg name=\"listMainSoundProperties\" type=\"a(qn)\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"updateSource\">\n"
            "<arg name=\"sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"sourceClassID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"listSoundProperties\" type=\"a(qn)\" direction=\"in\" />\n"
            "<arg name=\"listConnectionFormats\" type=\"aq\" direction=\"in\" />\n"
            "<arg name=\"listMainSoundProperties\" type=\"a(qn)\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"ackSetVolumes\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"listvolumes\" type=\"a(i(yv)nqn)\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"ackSinkNotificationConfiguration\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"ackSourceNotificationConfiguration\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"hookSinkNotificationDataChange\">\n"
            "<arg name=\"sinkID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"payload\" type=\"(qn)\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"hookSourceNotificationDataChange\">\n"
            "<arg name=\"sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"payload\" type=\"(qn)\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"confirmRoutingRundown\">\n"
            "<arg name=\"domainName\" type=\"s\" direction=\"in\" />\n"
        "</method>\n"
    ;
}


static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        RoutingControlObserverStub,
        am_RoutingReady_e
        > getRoutingReadyAttributeStubDispatcher(&RoutingControlObserverStub::getRoutingReadyAttribute, "i");
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        RoutingControlObserverStub,
        am_RoutingReady_e
        > setRoutingReadyAttributeStubDispatcher(
                &RoutingControlObserverStub::getRoutingReadyAttribute,
                &RoutingControlObserverStubRemoteEvent::onRemoteSetRoutingReadyAttribute,
                &RoutingControlObserverStubRemoteEvent::onRemoteRoutingReadyAttributeChanged,
                &RoutingControlObserverStubAdapter::fireRoutingReadyAttributeChanged,
                "i");


static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_connectionID_t, am_Error_e>,
    std::tuple<>
    > ackConnectStubDispatcher(&RoutingControlObserverStub::ackConnect, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_connectionID_t, am_Error_e>,
    std::tuple<>
    > ackDisconnectStubDispatcher(&RoutingControlObserverStub::ackDisconnect, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_volume_t, am_Error_e>,
    std::tuple<>
    > ackSetSinkVolumeChangeStubDispatcher(&RoutingControlObserverStub::ackSetSinkVolumeChange, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_volume_t, am_Error_e>,
    std::tuple<>
    > ackSetSourceVolumeChangeStubDispatcher(&RoutingControlObserverStub::ackSetSourceVolumeChange, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_Error_e>,
    std::tuple<>
    > ackSetSourceStateStubDispatcher(&RoutingControlObserverStub::ackSetSourceState, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_Error_e>,
    std::tuple<>
    > ackSetSinkSoundPropertiesStubDispatcher(&RoutingControlObserverStub::ackSetSinkSoundProperties, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_Error_e>,
    std::tuple<>
    > ackSetSinkSoundPropertyStubDispatcher(&RoutingControlObserverStub::ackSetSinkSoundProperty, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_Error_e>,
    std::tuple<>
    > ackSetSourceSoundPropertiesStubDispatcher(&RoutingControlObserverStub::ackSetSourceSoundProperties, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_Error_e>,
    std::tuple<>
    > ackSetSourceSoundPropertyStubDispatcher(&RoutingControlObserverStub::ackSetSourceSoundProperty, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_HotSink_e, am_Error_e>,
    std::tuple<>
    > ackCrossFadingStubDispatcher(&RoutingControlObserverStub::ackCrossFading, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_sourceID_t, am_volume_t>,
    std::tuple<>
    > ackSourceVolumeTickStubDispatcher(&RoutingControlObserverStub::ackSourceVolumeTick, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_sinkID_t, am_volume_t>,
    std::tuple<>
    > ackSinkVolumeTickStubDispatcher(&RoutingControlObserverStub::ackSinkVolumeTick, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<std::string>,
    std::tuple<am_domainID_t, am_Error_e>
    > peekDomainStubDispatcher(&RoutingControlObserverStub::peekDomain, "qi");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Domain_s, std::string, std::string, std::string>,
    std::tuple<am_domainID_t, am_Error_e>
    > registerDomainStubDispatcher(&RoutingControlObserverStub::registerDomain, "qi");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_domainID_t>,
    std::tuple<am_Error_e>
    > deregisterDomainStubDispatcher(&RoutingControlObserverStub::deregisterDomain, "i");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Gateway_s>,
    std::tuple<am_gatewayID_t, am_Error_e>
    > registerGatewayStubDispatcher(&RoutingControlObserverStub::registerGateway, "qi");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_gatewayID_t>,
    std::tuple<am_Error_e>
    > deregisterGatewayStubDispatcher(&RoutingControlObserverStub::deregisterGateway, "i");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<std::string>,
    std::tuple<am_sinkID_t, am_Error_e>
    > peekSinkStubDispatcher(&RoutingControlObserverStub::peekSink, "qi");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Sink_s>,
    std::tuple<am_sinkID_t, am_Error_e>
    > registerSinkStubDispatcher(&RoutingControlObserverStub::registerSink, "qi");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_sinkID_t>,
    std::tuple<am_Error_e>
    > deregisterSinkStubDispatcher(&RoutingControlObserverStub::deregisterSink, "i");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<std::string>,
    std::tuple<am_sourceID_t, am_Error_e>
    > peekSourceStubDispatcher(&RoutingControlObserverStub::peekSource, "qi");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Source_s>,
    std::tuple<am_sourceID_t, am_Error_e>
    > registerSourceStubDispatcher(&RoutingControlObserverStub::registerSource, "qi");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_sourceID_t>,
    std::tuple<am_Error_e>
    > deregisterSourceStubDispatcher(&RoutingControlObserverStub::deregisterSource, "i");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Crossfader_s>,
    std::tuple<am_crossfaderID_t, am_Error_e>
    > registerCrossfaderStubDispatcher(&RoutingControlObserverStub::registerCrossfader, "qi");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_crossfaderID_t>,
    std::tuple<am_Error_e>
    > deregisterCrossfaderStubDispatcher(&RoutingControlObserverStub::deregisterCrossfader, "i");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<std::string>,
    std::tuple<am_sourceClass_t, am_Error_e>
    > peekSourceClassIDStubDispatcher(&RoutingControlObserverStub::peekSourceClassID, "qi");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<std::string>,
    std::tuple<am_sinkClass_t, am_Error_e>
    > peekSinkClassIDStubDispatcher(&RoutingControlObserverStub::peekSinkClassID, "qi");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_sourceID_t, am_InterruptState_e>,
    std::tuple<>
    > hookInterruptStatusChangeStubDispatcher(&RoutingControlObserverStub::hookInterruptStatusChange, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_domainID_t>,
    std::tuple<>
    > hookDomainRegistrationCompleteStubDispatcher(&RoutingControlObserverStub::hookDomainRegistrationComplete, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_sinkID_t, am_Availability_s>,
    std::tuple<>
    > hookSinkAvailablityStatusChangeStubDispatcher(&RoutingControlObserverStub::hookSinkAvailablityStatusChange, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_sourceID_t, am_Availability_s>,
    std::tuple<>
    > hookSourceAvailablityStatusChangeStubDispatcher(&RoutingControlObserverStub::hookSourceAvailablityStatusChange, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_domainID_t, am_DomainState_e>,
    std::tuple<>
    > hookDomainStateChangeStubDispatcher(&RoutingControlObserverStub::hookDomainStateChange, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_connectionID_t, am_timeSync_t>,
    std::tuple<>
    > hookTimingInformationChangedStubDispatcher(&RoutingControlObserverStub::hookTimingInformationChanged, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_EarlyData_L>,
    std::tuple<>
    > sendChangedDataStubDispatcher(&RoutingControlObserverStub::sendChangedData, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_gatewayID_t, am_ConnectionFormat_L, am_ConnectionFormat_L, am_Convertion_L>,
    std::tuple<am_Error_e>
    > updateGatewayStubDispatcher(&RoutingControlObserverStub::updateGateway, "i");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_sinkID_t, am_sinkClass_t, am_SoundProperty_L, am_ConnectionFormat_L, am_MainSoundProperty_L>,
    std::tuple<am_Error_e>
    > updateSinkStubDispatcher(&RoutingControlObserverStub::updateSink, "i");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_sourceID_t, am_sourceClass_t, am_SoundProperty_L, am_ConnectionFormat_L, am_MainSoundProperty_L>,
    std::tuple<am_Error_e>
    > updateSourceStubDispatcher(&RoutingControlObserverStub::updateSource, "i");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_Volumes_L, am_Error_e>,
    std::tuple<>
    > ackSetVolumesStubDispatcher(&RoutingControlObserverStub::ackSetVolumes, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_Error_e>,
    std::tuple<>
    > ackSinkNotificationConfigurationStubDispatcher(&RoutingControlObserverStub::ackSinkNotificationConfiguration, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_Handle_s, am_Error_e>,
    std::tuple<>
    > ackSourceNotificationConfigurationStubDispatcher(&RoutingControlObserverStub::ackSourceNotificationConfiguration, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_sinkID_t, am_NotificationPayload_s>,
    std::tuple<>
    > hookSinkNotificationDataChangeStubDispatcher(&RoutingControlObserverStub::hookSinkNotificationDataChange, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<am_sourceID_t, am_NotificationPayload_s>,
    std::tuple<>
    > hookSourceNotificationDataChangeStubDispatcher(&RoutingControlObserverStub::hookSourceNotificationDataChange, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlObserverStub,
    std::tuple<std::string>,
    std::tuple<>
    > confirmRoutingRundownStubDispatcher(&RoutingControlObserverStub::confirmRoutingRundown, "");

void RoutingControlObserverDBusStubAdapter::fireRoutingReadyAttributeChanged(const am_RoutingReady_e& value) {
	CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<am_RoutingReady_e>>
        ::sendSignal(
            *this,
            "onRoutingReadyAttributeChanged",
            "i",
            value
    );
}


} // namespace am
} // namespace genivi
} // namespace org

template<>
const org::genivi::am::RoutingControlObserverDBusStubAdapterHelper::StubDispatcherTable org::genivi::am::RoutingControlObserverDBusStubAdapterHelper::stubDispatcherTable_ = {
    { { "getRoutingReadyAttribute", "" }, &org::genivi::am::getRoutingReadyAttributeStubDispatcher }
    , { { "setRoutingReadyAttribute", "i" }, &org::genivi::am::setRoutingReadyAttributeStubDispatcher }
    ,
    { { "ackConnect", "(iq)qi" }, &org::genivi::am::ackConnectStubDispatcher },
    { { "ackDisconnect", "(iq)qi" }, &org::genivi::am::ackDisconnectStubDispatcher },
    { { "ackSetSinkVolumeChange", "(iq)ni" }, &org::genivi::am::ackSetSinkVolumeChangeStubDispatcher },
    { { "ackSetSourceVolumeChange", "(iq)ni" }, &org::genivi::am::ackSetSourceVolumeChangeStubDispatcher },
    { { "ackSetSourceState", "(iq)i" }, &org::genivi::am::ackSetSourceStateStubDispatcher },
    { { "ackSetSinkSoundProperties", "(iq)i" }, &org::genivi::am::ackSetSinkSoundPropertiesStubDispatcher },
    { { "ackSetSinkSoundProperty", "(iq)i" }, &org::genivi::am::ackSetSinkSoundPropertyStubDispatcher },
    { { "ackSetSourceSoundProperties", "(iq)i" }, &org::genivi::am::ackSetSourceSoundPropertiesStubDispatcher },
    { { "ackSetSourceSoundProperty", "(iq)i" }, &org::genivi::am::ackSetSourceSoundPropertyStubDispatcher },
    { { "ackCrossFading", "(iq)ii" }, &org::genivi::am::ackCrossFadingStubDispatcher },
    { { "ackSourceVolumeTick", "(iq)qn" }, &org::genivi::am::ackSourceVolumeTickStubDispatcher },
    { { "ackSinkVolumeTick", "(iq)qn" }, &org::genivi::am::ackSinkVolumeTickStubDispatcher },
    { { "peekDomain", "s" }, &org::genivi::am::peekDomainStubDispatcher },
    { { "registerDomain", "(qsssbbi)sss" }, &org::genivi::am::registerDomainStubDispatcher },
    { { "deregisterDomain", "q" }, &org::genivi::am::deregisterDomainStubDispatcher },
    { { "registerGateway", "(qsqqqqqaqaqab)" }, &org::genivi::am::registerGatewayStubDispatcher },
    { { "deregisterGateway", "q" }, &org::genivi::am::deregisterGatewayStubDispatcher },
    { { "peekSink", "s" }, &org::genivi::am::peekSinkStubDispatcher },
    { { "registerSink", "(qsqqnb(iq)ina(qn)aqa(qn)a(qin)a(qin))" }, &org::genivi::am::registerSinkStubDispatcher },
    { { "deregisterSink", "q" }, &org::genivi::am::deregisterSinkStubDispatcher },
    { { "peekSource", "s" }, &org::genivi::am::peekSourceStubDispatcher },
    { { "registerSource", "(qqsqinb(iq)ia(qn)aqa(qn)a(qin)a(qin))" }, &org::genivi::am::registerSourceStubDispatcher },
    { { "deregisterSource", "q" }, &org::genivi::am::deregisterSourceStubDispatcher },
    { { "registerCrossfader", "(qsqqqi)" }, &org::genivi::am::registerCrossfaderStubDispatcher },
    { { "deregisterCrossfader", "q" }, &org::genivi::am::deregisterCrossfaderStubDispatcher },
    { { "peekSourceClassID", "s" }, &org::genivi::am::peekSourceClassIDStubDispatcher },
    { { "peekSinkClassID", "s" }, &org::genivi::am::peekSinkClassIDStubDispatcher },
    { { "hookInterruptStatusChange", "qi" }, &org::genivi::am::hookInterruptStatusChangeStubDispatcher },
    { { "hookDomainRegistrationComplete", "q" }, &org::genivi::am::hookDomainRegistrationCompleteStubDispatcher },
    { { "hookSinkAvailablityStatusChange", "q(iq)" }, &org::genivi::am::hookSinkAvailablityStatusChangeStubDispatcher },
    { { "hookSourceAvailablityStatusChange", "q(iq)" }, &org::genivi::am::hookSourceAvailablityStatusChangeStubDispatcher },
    { { "hookDomainStateChange", "qi" }, &org::genivi::am::hookDomainStateChangeStubDispatcher },
    { { "hookTimingInformationChanged", "qn" }, &org::genivi::am::hookTimingInformationChangedStubDispatcher },
    { { "sendChangedData", "a(i(yv)(yv))" }, &org::genivi::am::sendChangedDataStubDispatcher },
    { { "updateGateway", "qaqaqab" }, &org::genivi::am::updateGatewayStubDispatcher },
    { { "updateSink", "qqa(qn)aqa(qn)" }, &org::genivi::am::updateSinkStubDispatcher },
    { { "updateSource", "qqa(qn)aqa(qn)" }, &org::genivi::am::updateSourceStubDispatcher },
    { { "ackSetVolumes", "(iq)a(i(yv)nqn)i" }, &org::genivi::am::ackSetVolumesStubDispatcher },
    { { "ackSinkNotificationConfiguration", "(iq)i" }, &org::genivi::am::ackSinkNotificationConfigurationStubDispatcher },
    { { "ackSourceNotificationConfiguration", "(iq)i" }, &org::genivi::am::ackSourceNotificationConfigurationStubDispatcher },
    { { "hookSinkNotificationDataChange", "q(qn)" }, &org::genivi::am::hookSinkNotificationDataChangeStubDispatcher },
    { { "hookSourceNotificationDataChange", "q(qn)" }, &org::genivi::am::hookSourceNotificationDataChangeStubDispatcher },
    { { "confirmRoutingRundown", "s" }, &org::genivi::am::confirmRoutingRundownStubDispatcher }
};

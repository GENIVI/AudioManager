/*
* This file was generated by the CommonAPI Generators.
*
* This file was generated by the CommonAPI Generators.
*
* This file was generated by the CommonAPI Generators.
*
* Copyright (C) 2012, BMW AG
*
* This file is part of GENIVI Project AudioManager.
*
* Contributions are licensed to the GENIVI Alliance under one or more
* Contribution License Agreements.
*
* \copyright
* This Source Code Form is subject to the terms of the
* Mozilla Public License, v. 2.0. If a  copy of the MPL was not distributed with
* this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
*
* \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
* \author Christian Linke christian.linke@bmw.de BMW 2013
*
* For further information see http://www.genivi.org/.
*/
#include "RoutingControlDBusStubAdapter.h"
#include <org/genivi/am/RoutingControl.h>

namespace org {
namespace genivi {
namespace am {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createRoutingControlDBusStubAdapter(
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<RoutingControlDBusStubAdapter>(commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

__attribute__((constructor)) void registerRoutingControlDBusStubAdapter(void) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(RoutingControl::getInterfaceId(),
                                                               &createRoutingControlDBusStubAdapter);
}

RoutingControlDBusStubAdapter::RoutingControlDBusStubAdapter(
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        RoutingControlDBusStubAdapterHelper(commonApiAddress, dbusInterfaceName, dbusBusName, dbusObjectPath, dbusConnection, std::dynamic_pointer_cast<RoutingControlStub>(stub)) {
}

const char* RoutingControlDBusStubAdapter::getMethodsDBusIntrospectionXmlData() const {
    return
        "<method name=\"asyncAbort\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"asyncConnect\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"connectionID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"sinkID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"connectionFormat\" type=\"q\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"asyncDisconnect\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"connectionID\" type=\"q\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"asyncSetSinkVolume\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"sinkID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"volume\" type=\"n\" direction=\"in\" />\n"
            "<arg name=\"ramp\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"time\" type=\"n\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"asyncSetSourceVolume\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"volume\" type=\"n\" direction=\"in\" />\n"
            "<arg name=\"ramp\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"time\" type=\"n\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"asyncSetSourceState\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"state\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"asyncSetSinkSoundProperties\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"sinkID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"listSoundProperties\" type=\"a(qn)\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"asyncSetSinkSoundProperty\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"sinkID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"soundProperty\" type=\"(qn)\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"asyncSetSourceSoundProperties\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"listSoundProperties\" type=\"a(qn)\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"asyncSetSourceSoundProperty\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"soundProperty\" type=\"(qn)\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"asyncCrossFade\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"crossfaderID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"hotSink\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"rampType\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"time\" type=\"n\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"setDomainState\">\n"
            "<arg name=\"domainID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"domainState\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"asyncSetVolumes\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"volumes\" type=\"a(i(yv)nqn)\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"asyncSetSinkNotificationConfiguration\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"sinkID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"notificationConfiguration\" type=\"(qin)\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"asyncSetSourceNotificationConfiguration\">\n"
            "<arg name=\"handle\" type=\"(iq)\" direction=\"in\" />\n"
            "<arg name=\"sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"notificationConfiguration\" type=\"(qin)\" direction=\"in\" />\n"
        "</method>\n"
    ;
}



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_Handle_s>,
    std::tuple<>
    > asyncAbortStubDispatcher(&RoutingControlStub::asyncAbort, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_Handle_s, am_connectionID_t, am_sourceID_t, am_sinkID_t, am_ConnectionFormat_pe>,
    std::tuple<>
    > asyncConnectStubDispatcher(&RoutingControlStub::asyncConnect, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_Handle_s, am_connectionID_t>,
    std::tuple<>
    > asyncDisconnectStubDispatcher(&RoutingControlStub::asyncDisconnect, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_Handle_s, am_sinkID_t, am_volume_t, am_RampType_pe, am_time_t>,
    std::tuple<>
    > asyncSetSinkVolumeStubDispatcher(&RoutingControlStub::asyncSetSinkVolume, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_Handle_s, am_sourceID_t, am_volume_t, am_RampType_pe, am_time_t>,
    std::tuple<>
    > asyncSetSourceVolumeStubDispatcher(&RoutingControlStub::asyncSetSourceVolume, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_Handle_s, am_sourceID_t, am_SourceState_e>,
    std::tuple<>
    > asyncSetSourceStateStubDispatcher(&RoutingControlStub::asyncSetSourceState, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_Handle_s, am_sinkID_t, am_SoundProperty_L>,
    std::tuple<>
    > asyncSetSinkSoundPropertiesStubDispatcher(&RoutingControlStub::asyncSetSinkSoundProperties, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_Handle_s, am_sinkID_t, am_SoundProperty_s>,
    std::tuple<>
    > asyncSetSinkSoundPropertyStubDispatcher(&RoutingControlStub::asyncSetSinkSoundProperty, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_Handle_s, am_sourceID_t, am_SoundProperty_L>,
    std::tuple<>
    > asyncSetSourceSoundPropertiesStubDispatcher(&RoutingControlStub::asyncSetSourceSoundProperties, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_Handle_s, am_sourceID_t, am_SoundProperty_s>,
    std::tuple<>
    > asyncSetSourceSoundPropertyStubDispatcher(&RoutingControlStub::asyncSetSourceSoundProperty, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_Handle_s, am_crossfaderID_t, am_HotSink_e, am_RampType_pe, am_time_t>,
    std::tuple<>
    > asyncCrossFadeStubDispatcher(&RoutingControlStub::asyncCrossFade, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_domainID_t, am_DomainState_e>,
    std::tuple<am_Error_e>
    > setDomainStateStubDispatcher(&RoutingControlStub::setDomainState, "i");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_Handle_s, am_Volumes_L>,
    std::tuple<>
    > asyncSetVolumesStubDispatcher(&RoutingControlStub::asyncSetVolumes, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_Handle_s, am_sinkID_t, am_NotificationConfiguration_s>,
    std::tuple<>
    > asyncSetSinkNotificationConfigurationStubDispatcher(&RoutingControlStub::asyncSetSinkNotificationConfiguration, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    RoutingControlStub,
    std::tuple<am_Handle_s, am_sourceID_t, am_NotificationConfiguration_s>,
    std::tuple<>
    > asyncSetSourceNotificationConfigurationStubDispatcher(&RoutingControlStub::asyncSetSourceNotificationConfiguration, "");



} // namespace am
} // namespace genivi
} // namespace org

template<>
const org::genivi::am::RoutingControlDBusStubAdapterHelper::StubDispatcherTable org::genivi::am::RoutingControlDBusStubAdapterHelper::stubDispatcherTable_ = {
    { { "asyncAbort", "(iq)" }, &org::genivi::am::asyncAbortStubDispatcher },
    { { "asyncConnect", "(iq)qqqq" }, &org::genivi::am::asyncConnectStubDispatcher },
    { { "asyncDisconnect", "(iq)q" }, &org::genivi::am::asyncDisconnectStubDispatcher },
    { { "asyncSetSinkVolume", "(iq)qnqn" }, &org::genivi::am::asyncSetSinkVolumeStubDispatcher },
    { { "asyncSetSourceVolume", "(iq)qnqn" }, &org::genivi::am::asyncSetSourceVolumeStubDispatcher },
    { { "asyncSetSourceState", "(iq)qi" }, &org::genivi::am::asyncSetSourceStateStubDispatcher },
    { { "asyncSetSinkSoundProperties", "(iq)qa(qn)" }, &org::genivi::am::asyncSetSinkSoundPropertiesStubDispatcher },
    { { "asyncSetSinkSoundProperty", "(iq)q(qn)" }, &org::genivi::am::asyncSetSinkSoundPropertyStubDispatcher },
    { { "asyncSetSourceSoundProperties", "(iq)qa(qn)" }, &org::genivi::am::asyncSetSourceSoundPropertiesStubDispatcher },
    { { "asyncSetSourceSoundProperty", "(iq)q(qn)" }, &org::genivi::am::asyncSetSourceSoundPropertyStubDispatcher },
    { { "asyncCrossFade", "(iq)qiqn" }, &org::genivi::am::asyncCrossFadeStubDispatcher },
    { { "setDomainState", "qi" }, &org::genivi::am::setDomainStateStubDispatcher },
    { { "asyncSetVolumes", "(iq)a(i(yv)nqn)" }, &org::genivi::am::asyncSetVolumesStubDispatcher },
    { { "asyncSetSinkNotificationConfiguration", "(iq)q(qin)" }, &org::genivi::am::asyncSetSinkNotificationConfigurationStubDispatcher },
    { { "asyncSetSourceNotificationConfiguration", "(iq)q(qin)" }, &org::genivi::am::asyncSetSourceNotificationConfigurationStubDispatcher }
};

/*
* This file was generated by the CommonAPI Generators.
*
* This file was generated by the CommonAPI Generators.
*
* This file was generated by the CommonAPI Generators.
*
* Copyright (C) 2012, BMW AG
*
* This file is part of GENIVI Project AudioManager.
*
* Contributions are licensed to the GENIVI Alliance under one or more
* Contribution License Agreements.
*
* \copyright
* This Source Code Form is subject to the terms of the
* Mozilla Public License, v. 2.0. If a  copy of the MPL was not distributed with
* this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
*
* \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
* \author Christian Linke christian.linke@bmw.de BMW 2013
*
* For further information see http://www.genivi.org/.
*/
#ifndef ORG_GENIVI_AM_Routing_Control_Observer_STUB_H_
#define ORG_GENIVI_AM_Routing_Control_Observer_STUB_H_



#include <org/genivi/am.h>

#include "RoutingControlObserver.h"

#define COMMONAPI_INTERNAL_COMPILATION

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/SerializableStruct.h>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Stub.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace am {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service RoutingControlObserver. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class RoutingControlObserverStubAdapter: virtual public CommonAPI::StubAdapter, public RoutingControlObserver {
 public:
    ///Notifies all remote listeners about a change of value of the attribute RoutingReady.
    virtual void fireRoutingReadyAttributeChanged(const am_RoutingReady_e& RoutingReady) = 0;

};


/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for RoutingControlObserver.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class RoutingControlObserverStubRemoteEvent {
 public:
    virtual ~RoutingControlObserverStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute RoutingReady.
    virtual bool onRemoteSetRoutingReadyAttribute(am_RoutingReady_e RoutingReady) = 0;
    /// Action callback for remote set requests on the attribute RoutingReady.
    virtual void onRemoteRoutingReadyAttributeChanged() = 0;

};


/**
 * Defines the interface that must be implemented by any class that should provide
 * the service RoutingControlObserver to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class RoutingControlObserverStub : public CommonAPI::Stub<RoutingControlObserverStubAdapter , RoutingControlObserverStubRemoteEvent> {
 public:
    virtual ~RoutingControlObserverStub() { }

    /// Provides getter access to the attribute RoutingReady.
    virtual const am_RoutingReady_e& getRoutingReadyAttribute() = 0;

    /// This is the method that will be called on remote calls on the method ackConnect.
    virtual void ackConnect(am_Handle_s handle, am_connectionID_t connectionID, am_Error_e error) = 0;
    /// This is the method that will be called on remote calls on the method ackDisconnect.
    virtual void ackDisconnect(am_Handle_s handle, am_connectionID_t connectionID, am_Error_e error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetSinkVolumeChange.
    virtual void ackSetSinkVolumeChange(am_Handle_s handle, am_volume_t volume, am_Error_e error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetSourceVolumeChange.
    virtual void ackSetSourceVolumeChange(am_Handle_s handle, am_volume_t volume, am_Error_e error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetSourceState.
    virtual void ackSetSourceState(am_Handle_s handle, am_Error_e error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetSinkSoundProperties.
    virtual void ackSetSinkSoundProperties(am_Handle_s handle, am_Error_e error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetSinkSoundProperty.
    virtual void ackSetSinkSoundProperty(am_Handle_s handle, am_Error_e error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetSourceSoundProperties.
    virtual void ackSetSourceSoundProperties(am_Handle_s handle, am_Error_e error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetSourceSoundProperty.
    virtual void ackSetSourceSoundProperty(am_Handle_s handle, am_Error_e error) = 0;
    /// This is the method that will be called on remote calls on the method ackCrossFading.
    virtual void ackCrossFading(am_Handle_s handle, am_HotSink_e hotSink, am_Error_e error) = 0;
    /// This is the method that will be called on remote calls on the method ackSourceVolumeTick.
    virtual void ackSourceVolumeTick(am_Handle_s handle, am_sourceID_t sourceID, am_volume_t volume) = 0;
    /// This is the method that will be called on remote calls on the method ackSinkVolumeTick.
    virtual void ackSinkVolumeTick(am_Handle_s handle, am_sinkID_t sinkID, am_volume_t volume) = 0;
    /// This is the method that will be called on remote calls on the method peekDomain.
    virtual void peekDomain(std::string name, am_domainID_t& domainID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method registerDomain.
    virtual void registerDomain(am_Domain_s domainData, std::string returnInterface, std::string returnPath, std::string returnBusname, am_domainID_t& domainID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method deregisterDomain.
    virtual void deregisterDomain(am_domainID_t domainID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method registerGateway.
    virtual void registerGateway(am_Gateway_s gatewayData, am_gatewayID_t& gatewayID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method deregisterGateway.
    virtual void deregisterGateway(am_gatewayID_t gatewayID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method peekSink.
    virtual void peekSink(std::string name, am_sinkID_t& sinkID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method registerSink.
    virtual void registerSink(am_Sink_s sinkData, am_sinkID_t& sinkID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method deregisterSink.
    virtual void deregisterSink(am_sinkID_t sinkID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method peekSource.
    virtual void peekSource(std::string name, am_sourceID_t& sourceID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method registerSource.
    virtual void registerSource(am_Source_s sourceData, am_sourceID_t& sourceID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method deregisterSource.
    virtual void deregisterSource(am_sourceID_t sourceID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method registerCrossfader.
    virtual void registerCrossfader(am_Crossfader_s crossfaderData, am_crossfaderID_t& crossfaderID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method deregisterCrossfader.
    virtual void deregisterCrossfader(am_crossfaderID_t crossfaderID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method peekSourceClassID.
    virtual void peekSourceClassID(std::string name, am_sourceClass_t& sourceClassID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method peekSinkClassID.
    virtual void peekSinkClassID(std::string name, am_sinkClass_t& sinkClassID, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method hookInterruptStatusChange.
    virtual void hookInterruptStatusChange(am_sourceID_t sourceID, am_InterruptState_e interruptState) = 0;
    /// This is the method that will be called on remote calls on the method hookDomainRegistrationComplete.
    virtual void hookDomainRegistrationComplete(am_domainID_t domainID) = 0;
    /// This is the method that will be called on remote calls on the method hookSinkAvailablityStatusChange.
    virtual void hookSinkAvailablityStatusChange(am_sinkID_t sinkID, am_Availability_s availability) = 0;
    /// This is the method that will be called on remote calls on the method hookSourceAvailablityStatusChange.
    virtual void hookSourceAvailablityStatusChange(am_sourceID_t sourceID, am_Availability_s availability) = 0;
    /// This is the method that will be called on remote calls on the method hookDomainStateChange.
    virtual void hookDomainStateChange(am_domainID_t domainID, am_DomainState_e domainState) = 0;
    /// This is the method that will be called on remote calls on the method hookTimingInformationChanged.
    virtual void hookTimingInformationChanged(am_connectionID_t connectionID, am_timeSync_t delay) = 0;
    /// This is the method that will be called on remote calls on the method sendChangedData.
    virtual void sendChangedData(am_EarlyData_L earlyData) = 0;
    /// This is the method that will be called on remote calls on the method updateGateway.
    virtual void updateGateway(am_gatewayID_t gatewayID, am_ConnectionFormat_L listSourceFormats, am_ConnectionFormat_L listSinkFormats, am_Convertion_L convertionMatrix, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method updateSink.
    virtual void updateSink(am_sinkID_t sinkID, am_sinkClass_t sinkClassID, am_SoundProperty_L listSoundProperties, am_ConnectionFormat_L listConnectionFormats, am_MainSoundProperty_L listMainSoundProperties, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method updateSource.
    virtual void updateSource(am_sourceID_t sourceID, am_sourceClass_t sourceClassID, am_SoundProperty_L listSoundProperties, am_ConnectionFormat_L listConnectionFormats, am_MainSoundProperty_L listMainSoundProperties, am_Error_e& error) = 0;
    /// This is the method that will be called on remote calls on the method ackSetVolumes.
    virtual void ackSetVolumes(am_Handle_s handle, am_Volumes_L listvolumes, am_Error_e error) = 0;
    /// This is the method that will be called on remote calls on the method ackSinkNotificationConfiguration.
    virtual void ackSinkNotificationConfiguration(am_Handle_s handle, am_Error_e error) = 0;
    /// This is the method that will be called on remote calls on the method ackSourceNotificationConfiguration.
    virtual void ackSourceNotificationConfiguration(am_Handle_s handle, am_Error_e error) = 0;
    /// This is the method that will be called on remote calls on the method hookSinkNotificationDataChange.
    virtual void hookSinkNotificationDataChange(am_sinkID_t sinkID, am_NotificationPayload_s payload) = 0;
    /// This is the method that will be called on remote calls on the method hookSourceNotificationDataChange.
    virtual void hookSourceNotificationDataChange(am_sourceID_t sourceID, am_NotificationPayload_s payload) = 0;
    /// This is the method that will be called on remote calls on the method confirmRoutingRundown.
    virtual void confirmRoutingRundown(std::string domainName) = 0;
    
};

} // namespace am
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_AM_Routing_Control_Observer_STUB_H_

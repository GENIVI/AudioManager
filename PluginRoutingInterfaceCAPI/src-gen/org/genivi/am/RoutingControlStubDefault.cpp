/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.5.201312121915.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <org/genivi/am/RoutingControlStubDefault.h>

namespace org {
namespace genivi {
namespace am {

RoutingControlStubDefault::RoutingControlStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(RoutingControl::getInterfaceVersion()) {
}

const CommonAPI::Version& RoutingControlStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) {
    return interfaceVersion_;
}

RoutingControlStubRemoteEvent* RoutingControlStubDefault::initStubAdapter(const std::shared_ptr<RoutingControlStubAdapter>& stubAdapter) {
    CommonAPI::Stub<RoutingControlStubAdapter, RoutingControlStubRemoteEvent>::stubAdapter_ = stubAdapter;
    return &remoteEventHandler_;
}


/**
 * aborts an asynchronous action.
(at)return E_OK on success, E_UNKNOWN on error,
 *  E_NON_EXISTENT if handle was not found
 */
void RoutingControlStubDefault::asyncAbort(const std::shared_ptr<CommonAPI::ClientId> clientId, am_Handle_s handle) {
    // Call old style methods in default 
    asyncAbort(handle);
}
void RoutingControlStubDefault::asyncAbort(am_Handle_s handle) {
    // No operation in default
}

/**
 * connects a source to a sink
(at)return E_OK on success, E_UNKNOWN on error,
 *  E_WRONG_FORMAT in case am_CustomConnectionFormat_t does not match
 */
void RoutingControlStubDefault::asyncConnect(const std::shared_ptr<CommonAPI::ClientId> clientId, am_Handle_s handle, am_connectionID_t connectionID, am_sourceID_t sourceID, am_sinkID_t sinkID, am_CustomConnectionFormat_t connectionFormat) {
    // Call old style methods in default 
    asyncConnect(handle, connectionID, sourceID, sinkID, connectionFormat);
}
void RoutingControlStubDefault::asyncConnect(am_Handle_s handle, am_connectionID_t connectionID, am_sourceID_t sourceID, am_sinkID_t sinkID, am_CustomConnectionFormat_t connectionFormat) {
    // No operation in default
}

/**
 * disconnect a connection with given connectionID
(at)return E_OK on success,
 *  E_UNKNOWN on error, E_NON_EXISTENT if connection was not found
 */
void RoutingControlStubDefault::asyncDisconnect(const std::shared_ptr<CommonAPI::ClientId> clientId, am_Handle_s handle, am_connectionID_t connectionID) {
    // Call old style methods in default 
    asyncDisconnect(handle, connectionID);
}
void RoutingControlStubDefault::asyncDisconnect(am_Handle_s handle, am_connectionID_t connectionID) {
    // No operation in default
}

/**
 * this method is used to set the volume of a sink. This function is used to drive
 *  ramps, to mute or unmute or directly set the value. The difference is made
 *  through the ramptype.
(at)return E_OK on success, E_UNKNOWN on error,
 *  E_OUT_OF_RANGE if new volume is out of range
 */
void RoutingControlStubDefault::asyncSetSinkVolume(const std::shared_ptr<CommonAPI::ClientId> clientId, am_Handle_s handle, am_sinkID_t sinkID, am_volume_t volume, am_CustomRampType_t ramp, am_time_t time) {
    // Call old style methods in default 
    asyncSetSinkVolume(handle, sinkID, volume, ramp, time);
}
void RoutingControlStubDefault::asyncSetSinkVolume(am_Handle_s handle, am_sinkID_t sinkID, am_volume_t volume, am_CustomRampType_t ramp, am_time_t time) {
    // No operation in default
}

/**
 * sets the volume of a source. This method is used to set the volume of a sink.
 *  This function is used to drive ramps, to mute or unmute or directly set the
 *  value. The difference is made through the ramptype.
(at)return E_OK on
 *  success, E_UNKNOWN on error, E_OUT_OF_RANGE if volume is out of
 *  range.
triggers the acknowledge ackSourceVolumeChange
 */
void RoutingControlStubDefault::asyncSetSourceVolume(const std::shared_ptr<CommonAPI::ClientId> clientId, am_Handle_s handle, am_sourceID_t sourceID, am_volume_t volume, am_CustomRampType_t ramp, am_time_t time) {
    // Call old style methods in default 
    asyncSetSourceVolume(handle, sourceID, volume, ramp, time);
}
void RoutingControlStubDefault::asyncSetSourceVolume(am_Handle_s handle, am_sourceID_t sourceID, am_volume_t volume, am_CustomRampType_t ramp, am_time_t time) {
    // No operation in default
}

/**
 * This function is used to set the source state of a particular
 *  source.
(at)return E_OK on success, E_UNKNOWN on error
 */
void RoutingControlStubDefault::asyncSetSourceState(const std::shared_ptr<CommonAPI::ClientId> clientId, am_Handle_s handle, am_sourceID_t sourceID, am_SourceState_e state) {
    // Call old style methods in default 
    asyncSetSourceState(handle, sourceID, state);
}
void RoutingControlStubDefault::asyncSetSourceState(am_Handle_s handle, am_sourceID_t sourceID, am_SourceState_e state) {
    // No operation in default
}

/**
 * this function sets the sinksoundproperty.
(at)return E_OK on success,
 *  E_UNKNOWN on error, E_OUT_OF_RANGE in case the propery value is out of range
 */
void RoutingControlStubDefault::asyncSetSinkSoundProperties(const std::shared_ptr<CommonAPI::ClientId> clientId, am_Handle_s handle, am_sinkID_t sinkID, am_SoundProperty_L listSoundProperties) {
    // Call old style methods in default 
    asyncSetSinkSoundProperties(handle, sinkID, listSoundProperties);
}
void RoutingControlStubDefault::asyncSetSinkSoundProperties(am_Handle_s handle, am_sinkID_t sinkID, am_SoundProperty_L listSoundProperties) {
    // No operation in default
}

/**
 * this function sets the sinksoundproperty.
(at)return E_OK on success,
 *  E_UNKNOWN on error, E_OUT_OF_RANGE in case the propery value is out of range
 */
void RoutingControlStubDefault::asyncSetSinkSoundProperty(const std::shared_ptr<CommonAPI::ClientId> clientId, am_Handle_s handle, am_sinkID_t sinkID, am_SoundProperty_s soundProperty) {
    // Call old style methods in default 
    asyncSetSinkSoundProperty(handle, sinkID, soundProperty);
}
void RoutingControlStubDefault::asyncSetSinkSoundProperty(am_Handle_s handle, am_sinkID_t sinkID, am_SoundProperty_s soundProperty) {
    // No operation in default
}

/**
 * this function sets the sourcesoundproperty.
(at)return E_OK on success,
 *  E_UNKNOWN on error, E_OUT_OF_RANGE in case the propery value is out of range
 */
void RoutingControlStubDefault::asyncSetSourceSoundProperties(const std::shared_ptr<CommonAPI::ClientId> clientId, am_Handle_s handle, am_sourceID_t sourceID, am_SoundProperty_L listSoundProperties) {
    // Call old style methods in default 
    asyncSetSourceSoundProperties(handle, sourceID, listSoundProperties);
}
void RoutingControlStubDefault::asyncSetSourceSoundProperties(am_Handle_s handle, am_sourceID_t sourceID, am_SoundProperty_L listSoundProperties) {
    // No operation in default
}

/**
 * this function sets the sourcesoundproperty.
(at)return E_OK on success,
 *  E_UNKNOWN on error, E_OUT_OF_RANGE in case the propery value is out of range
 */
void RoutingControlStubDefault::asyncSetSourceSoundProperty(const std::shared_ptr<CommonAPI::ClientId> clientId, am_Handle_s handle, am_sourceID_t sourceID, am_SoundProperty_s soundProperty) {
    // Call old style methods in default 
    asyncSetSourceSoundProperty(handle, sourceID, soundProperty);
}
void RoutingControlStubDefault::asyncSetSourceSoundProperty(am_Handle_s handle, am_sourceID_t sourceID, am_SoundProperty_s soundProperty) {
    // No operation in default
}

/**
 * this function triggers crossfading.
(at)return E_OK on success, E_UNKNOWN on
 *  error
 */
void RoutingControlStubDefault::asyncCrossFade(const std::shared_ptr<CommonAPI::ClientId> clientId, am_Handle_s handle, am_crossfaderID_t crossfaderID, am_HotSink_e hotSink, am_CustomRampType_t rampType, am_time_t time) {
    // Call old style methods in default 
    asyncCrossFade(handle, crossfaderID, hotSink, rampType, time);
}
void RoutingControlStubDefault::asyncCrossFade(am_Handle_s handle, am_crossfaderID_t crossfaderID, am_HotSink_e hotSink, am_CustomRampType_t rampType, am_time_t time) {
    // No operation in default
}

/**
 * this function is used for early and late audio functions to set the domain
 *  state
(at)return E_OK on success, E_UNKNOWN on error
 */
void RoutingControlStubDefault::setDomainState(const std::shared_ptr<CommonAPI::ClientId> clientId, am_domainID_t domainID, am_DomainState_e domainState, am_Error_e& error) {
    // Call old style methods in default 
    setDomainState(domainID, domainState, error);
}
void RoutingControlStubDefault::setDomainState(am_domainID_t domainID, am_DomainState_e domainState, am_Error_e& error) {
    // No operation in default
}

void RoutingControlStubDefault::asyncSetVolumes(const std::shared_ptr<CommonAPI::ClientId> clientId, am_Handle_s handle, am_Volumes_L volumes) {
    // Call old style methods in default 
    asyncSetVolumes(handle, volumes);
}
void RoutingControlStubDefault::asyncSetVolumes(am_Handle_s handle, am_Volumes_L volumes) {
    // No operation in default
}

void RoutingControlStubDefault::asyncSetSinkNotificationConfiguration(const std::shared_ptr<CommonAPI::ClientId> clientId, am_Handle_s handle, am_sinkID_t sinkID, am_NotificationConfiguration_s notificationConfiguration) {
    // Call old style methods in default 
    asyncSetSinkNotificationConfiguration(handle, sinkID, notificationConfiguration);
}
void RoutingControlStubDefault::asyncSetSinkNotificationConfiguration(am_Handle_s handle, am_sinkID_t sinkID, am_NotificationConfiguration_s notificationConfiguration) {
    // No operation in default
}

void RoutingControlStubDefault::asyncSetSourceNotificationConfiguration(const std::shared_ptr<CommonAPI::ClientId> clientId, am_Handle_s handle, am_sourceID_t sourceID, am_NotificationConfiguration_s notificationConfiguration) {
    // Call old style methods in default 
    asyncSetSourceNotificationConfiguration(handle, sourceID, notificationConfiguration);
}
void RoutingControlStubDefault::asyncSetSourceNotificationConfiguration(am_Handle_s handle, am_sourceID_t sourceID, am_NotificationConfiguration_s notificationConfiguration) {
    // No operation in default
}




RoutingControlStubDefault::RemoteEventHandler::RemoteEventHandler(RoutingControlStubDefault* defaultStub):
        defaultStub_(defaultStub) {
}

} // namespace am
} // namespace genivi
} // namespace org

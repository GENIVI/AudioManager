/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.2.201309301424.
* Used org.franca.core 0.8.9.201308271211.
*
*  Copyright (c) 2012 BMW
*  
*   \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
*  
*   \copyright
*   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction,
*   including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
*   subject to the following conditions:
*   The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
*   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
*   THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*    For further information see http://www.genivi.org/.
*  
*/
/**
 * The interface towards the Controlling Instance (e.g HMI). It handles the
 *  communication towards the HMI and other system components who need to interact
 *  with the audiomanagement.
There are two rules that have to be kept in mind
 *  when implementing against this interface:
 * @author Christian Mueller
 */
#ifndef ORG_GENIVI_AM_Command_Control_DBUS_PROXY_H_
#define ORG_GENIVI_AM_Command_Control_DBUS_PROXY_H_

#include <org/genivi/am/CommandControlProxyBase.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusFactory.h>
#include <CommonAPI/DBus/DBusProxy.h>
#include <CommonAPI/DBus/DBusEvent.h>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace org {
namespace genivi {
namespace am {

class CommandControlDBusProxy: virtual public CommandControlProxyBase, virtual public CommonAPI::DBus::DBusProxy {
 public:
    CommandControlDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection);

    virtual ~CommandControlDBusProxy() { }


    virtual NewMainConnectionEvent& getNewMainConnectionEvent();
    virtual RemovedMainConnectionEvent& getRemovedMainConnectionEvent();
    virtual NewSinkEvent& getNewSinkEvent();
    virtual RemovedSinkEvent& getRemovedSinkEvent();
    virtual NewSourceEvent& getNewSourceEvent();
    virtual RemovedSourceEvent& getRemovedSourceEvent();
    virtual NumberOfSinkClassesChangedEvent& getNumberOfSinkClassesChangedEvent();
    virtual NumberOfSourceClassesChangedEvent& getNumberOfSourceClassesChangedEvent();
    virtual MainConnectionStateChangedEvent& getMainConnectionStateChangedEvent();
    virtual MainSinkSoundPropertyChangedEvent& getMainSinkSoundPropertyChangedEvent();
    virtual MainSourceSoundPropertyChangedEvent& getMainSourceSoundPropertyChangedEvent();
    virtual SinkAvailabilityChangedEvent& getSinkAvailabilityChangedEvent();
    virtual SourceAvailabilityChangedEvent& getSourceAvailabilityChangedEvent();
    virtual VolumeChangedEvent& getVolumeChangedEvent();
    virtual SinkMuteStateChangedEvent& getSinkMuteStateChangedEvent();
    virtual SystemPropertyChangedEvent& getSystemPropertyChangedEvent();
    virtual TimingInformationChangedEvent& getTimingInformationChangedEvent();
    virtual SinkUpdatedEvent& getSinkUpdatedEvent();
    virtual SourceUpdatedEvent& getSourceUpdatedEvent();
    virtual SinkNotificationEvent& getSinkNotificationEvent();
    virtual SourceNotificationEvent& getSourceNotificationEvent();
    virtual MainSinkNotificationConfigurationChangedEvent& getMainSinkNotificationConfigurationChangedEvent();
    virtual MainSourceNotificationConfigurationChangedEvent& getMainSourceNotificationConfigurationChangedEvent();

    /**
     * connects a source to sink
    (at)return E_OK on success, E_NOT_POSSIBLE on
     *  failure, E_ALREADY_EXISTS if the connection does already exists
     */
    virtual void connect(const am_sourceID_t& sourceID, const am_sinkID_t& sinkID, CommonAPI::CallStatus& callStatus, am_mainConnectionID_t& mainConnectionID, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> connectAsync(const am_sourceID_t& sourceID, const am_sinkID_t& sinkID, ConnectAsyncCallback callback);
    /**
     * disconnects a mainConnection
    (at)return E_OK on successes, E_NON_EXISTENT if
     *  the connection does not exist, E_NOT_POSSIBLE on error.
     */
    virtual void disconnect(const am_mainConnectionID_t& mainConnectionID, CommonAPI::CallStatus& callStatus, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> disconnectAsync(const am_mainConnectionID_t& mainConnectionID, DisconnectAsyncCallback callback);
    /**
     * sets the volume for a sink
    (at)return E_OK on success, E_UNKOWN on error,
     *  E_OUT_OF_RANGE in case the value is out of range
     */
    virtual void setVolume(const am_sinkID_t& sinkID, const am_mainVolume_t& volume, CommonAPI::CallStatus& callStatus, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> setVolumeAsync(const am_sinkID_t& sinkID, const am_mainVolume_t& volume, SetVolumeAsyncCallback callback);
    /**
     * This function is used to increment or decrement the current volume for a
     *  sink.
    (at)return E_OK on success, E_UNKNOWN on error and E_OUT_OF_RANGE if
     *  the value is not in the given volume range.
     */
    virtual void volumeStep(const am_sinkID_t& sinkID, const int16_t& volumeStep_, CommonAPI::CallStatus& callStatus, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> volumeStepAsync(const am_sinkID_t& sinkID, const int16_t& volumeStep_, VolumeStepAsyncCallback callback);
    /**
     * sets the mute state of a sink
    (at)return E_OK on success, E_UNKNOWN on error.
     *  If the mute state is already the desired one, the Daemon will return E_OK.
     */
    virtual void setSinkMuteState(const am_sinkID_t& sinkID, const am_MuteState_e& muteState, CommonAPI::CallStatus& callStatus, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> setSinkMuteStateAsync(const am_sinkID_t& sinkID, const am_MuteState_e& muteState, SetSinkMuteStateAsyncCallback callback);
    /**
     * This method is used to set sound properties, e.g. Equalizer Values. Since the
     *  capabilities of the system can differ, the exact key value pairs can be
     *  extended in each product
    (at)return E_OK on success, E_OUT_OF_RANGE if value
     *  exceeds range, E_UNKNOWN in case of an error
     */
    virtual void setMainSinkSoundProperty(const am_sinkID_t& sinkID, const am_MainSoundProperty_s& soundProperty, CommonAPI::CallStatus& callStatus, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> setMainSinkSoundPropertyAsync(const am_sinkID_t& sinkID, const am_MainSoundProperty_s& soundProperty, SetMainSinkSoundPropertyAsyncCallback callback);
    /**
     * This method is used to set sound properties, e.g. Equalizer Values. Since the
     *  capabilities of the system can differ, the exact key value pairs can be
     *  extended in each product
    (at)return E_OK on success, E_OUT_OF_RANGE if value
     *  exceeds range, E_UNKNOWN in case of an error
     */
    virtual void setMainSourceSoundProperty(const am_sourceID_t& sourceID, const am_MainSoundProperty_s& soundProperty, CommonAPI::CallStatus& callStatus, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> setMainSourceSoundPropertyAsync(const am_sourceID_t& sourceID, const am_MainSoundProperty_s& soundProperty, SetMainSourceSoundPropertyAsyncCallback callback);
    /**
     * is used to set a specific system property.
    (at)return E_OK on success,
     *  E_OUT_OF_RANGE if value exceeds range, E_UNKNOWN in case of an error
     */
    virtual void setSystemProperty(const am_SystemProperty_s& property, CommonAPI::CallStatus& callStatus, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> setSystemPropertyAsync(const am_SystemProperty_s& property, SetSystemPropertyAsyncCallback callback);
    /**
     * returns the actual list of MainConnections
    (at)return E_OK on success,
     *  E_DATABASE_ERROR on error
     */
    virtual void getListMainConnections(CommonAPI::CallStatus& callStatus, am_MainConnection_L& listConnections, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> getListMainConnectionsAsync(GetListMainConnectionsAsyncCallback callback);
    /**
     * returns the actual list of Sinks
    (at)return E_OK on success, E_DATABASE_ERROR
     *  on error
     */
    virtual void getListMainSinks(CommonAPI::CallStatus& callStatus, am_SinkType_L& listMainSinks, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> getListMainSinksAsync(GetListMainSinksAsyncCallback callback);
    /**
     * returns the actual list of Sources
    (at)return E_OK on success,
     *  E_DATABASE_ERROR on error
     */
    virtual void getListMainSources(CommonAPI::CallStatus& callStatus, am_SourceType_L& listMainSources, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> getListMainSourcesAsync(GetListMainSourcesAsyncCallback callback);
    /**
     * This is used to retrieve all source sound properties related to a source.
     *  Returns a vector of the sound properties and values as pair
    (at)return E_OK
     *  on success, E_DATABASE_ERROR on error
     */
    virtual void getListMainSinkSoundProperties(const am_sinkID_t& sinkID, CommonAPI::CallStatus& callStatus, am_MainSoundProperty_L& listSoundProperties, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> getListMainSinkSoundPropertiesAsync(const am_sinkID_t& sinkID, GetListMainSinkSoundPropertiesAsyncCallback callback);
    /**
     * This is used to retrieve all source sound properties related to a
     *  source.
    (at)return E_OK on success, E_DATABASE_ERROR on error
     */
    virtual void getListMainSourceSoundProperties(const am_sourceID_t& sourceID, CommonAPI::CallStatus& callStatus, am_MainSoundProperty_L& listSourceProperties, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> getListMainSourceSoundPropertiesAsync(const am_sourceID_t& sourceID, GetListMainSourceSoundPropertiesAsyncCallback callback);
    /**
     * This is used to retrieve SourceClass Information of all source classes
     *  
    (at)return E_OK on success, E_DATABASE_ERROR on error
     */
    virtual void getListSourceClasses(CommonAPI::CallStatus& callStatus, am_SourceClass_L& listSourceClasses, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> getListSourceClassesAsync(GetListSourceClassesAsyncCallback callback);
    /**
     * This is used to retrieve SinkClass Information of all sink classes 
    (at)return
     *  E_OK on success, E_DATABASE_ERROR on error
     */
    virtual void getListSinkClasses(CommonAPI::CallStatus& callStatus, am_SinkClass_L& listSinkClasses, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> getListSinkClassesAsync(GetListSinkClassesAsyncCallback callback);
    /**
     * Retrieves a complete list of all systemProperties.
    (at)return E_OK on success,
     *  E_DATABASE_ERROR on error
     */
    virtual void getListSystemProperties(CommonAPI::CallStatus& callStatus, am_SystemProperty_L& listSystemProperties, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> getListSystemPropertiesAsync(GetListSystemPropertiesAsyncCallback callback);
    /**
     * returns the delay in ms that the audiopath for the given mainConnection
     *  has
    (at)return E_OK on success, E_NOT_POSSIBLE if timing information is not
     *  yet retrieved, E_DATABASE_ERROR on read error on the database
     */
    virtual void getTimingInformation(const am_mainConnectionID_t& mainConnectionID, CommonAPI::CallStatus& callStatus, am_timeSync_t& delay, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> getTimingInformationAsync(const am_mainConnectionID_t& mainConnectionID, GetTimingInformationAsyncCallback callback);
    /**
     * Retrieves the list of MainNotifications for a sink. Does not return the
     *  possible ones.
     */
    virtual void getListMainSinkNotificationConfigurations(const am_sinkID_t& sinkID, CommonAPI::CallStatus& callStatus, am_NotificationConfiguration_L& listMainNotificationConfigurations, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> getListMainSinkNotificationConfigurationsAsync(const am_sinkID_t& sinkID, GetListMainSinkNotificationConfigurationsAsyncCallback callback);
    /**
     * Retrieves the list of MainNotifications for a source. Does not return the
     *  possible ones.
     */
    virtual void getListMainSourceNotificationConfigurations(const am_sourceID_t& sourceID, CommonAPI::CallStatus& callStatus, am_NotificationConfiguration_L& listMainNotificationConfigurations, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> getListMainSourceNotificationConfigurationsAsync(const am_sourceID_t& sourceID, GetListMainSourceNotificationConfigurationsAsyncCallback callback);
    /**
     * sets a MainNotificationConfiuration. This can be used to turn on an off
     *  notifications an to change the mode of the configuration.
    (at)return E_OK on
     *  success, E_NON_EXISTENT if sinkID does not exists, E_DATABASE_ERROR on error
     */
    virtual void setMainSinkNotificationConfiguration(const am_sinkID_t& sinkID, const am_NotificationConfiguration_s& mainNotificationConfiguration, CommonAPI::CallStatus& callStatus, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> setMainSinkNotificationConfigurationAsync(const am_sinkID_t& sinkID, const am_NotificationConfiguration_s& mainNotificationConfiguration, SetMainSinkNotificationConfigurationAsyncCallback callback);
    /**
     * sets a MainNotificationConfiuration. This can be used to turn on an off
     *  notifications an to change the mode of the configuration.
    (at)return E_OK on
     *  success, E_NON_EXISTENT if sourceID does not exists, E_DATABASE_ERROR on error
     */
    virtual void setMainSourceNotificationConfiguration(const am_sourceID_t& sourceID, const am_NotificationConfiguration_s& mainNotificationConfiguration, CommonAPI::CallStatus& callStatus, am_Error_e& error);
    virtual std::future<CommonAPI::CallStatus> setMainSourceNotificationConfigurationAsync(const am_sourceID_t& sourceID, const am_NotificationConfiguration_s& mainNotificationConfiguration, SetMainSourceNotificationConfigurationAsyncCallback callback);
    

    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

 private:

    CommonAPI::DBus::DBusEvent<NewMainConnectionEvent> newMainConnection_;
    CommonAPI::DBus::DBusEvent<RemovedMainConnectionEvent> removedMainConnection_;
    CommonAPI::DBus::DBusEvent<NewSinkEvent> newSink_;
    CommonAPI::DBus::DBusEvent<RemovedSinkEvent> removedSink_;
    CommonAPI::DBus::DBusEvent<NewSourceEvent> newSource_;
    CommonAPI::DBus::DBusEvent<RemovedSourceEvent> removedSource_;
    CommonAPI::DBus::DBusEvent<NumberOfSinkClassesChangedEvent> numberOfSinkClassesChanged_;
    CommonAPI::DBus::DBusEvent<NumberOfSourceClassesChangedEvent> numberOfSourceClassesChanged_;
    CommonAPI::DBus::DBusEvent<MainConnectionStateChangedEvent> mainConnectionStateChanged_;
    CommonAPI::DBus::DBusEvent<MainSinkSoundPropertyChangedEvent> mainSinkSoundPropertyChanged_;
    CommonAPI::DBus::DBusEvent<MainSourceSoundPropertyChangedEvent> mainSourceSoundPropertyChanged_;
    CommonAPI::DBus::DBusEvent<SinkAvailabilityChangedEvent> sinkAvailabilityChanged_;
    CommonAPI::DBus::DBusEvent<SourceAvailabilityChangedEvent> sourceAvailabilityChanged_;
    CommonAPI::DBus::DBusEvent<VolumeChangedEvent> volumeChanged_;
    CommonAPI::DBus::DBusEvent<SinkMuteStateChangedEvent> sinkMuteStateChanged_;
    CommonAPI::DBus::DBusEvent<SystemPropertyChangedEvent> systemPropertyChanged_;
    CommonAPI::DBus::DBusEvent<TimingInformationChangedEvent> timingInformationChanged_;
    CommonAPI::DBus::DBusEvent<SinkUpdatedEvent> sinkUpdated_;
    CommonAPI::DBus::DBusEvent<SourceUpdatedEvent> sourceUpdated_;
    CommonAPI::DBus::DBusEvent<SinkNotificationEvent> sinkNotification_;
    CommonAPI::DBus::DBusEvent<SourceNotificationEvent> sourceNotification_;
    CommonAPI::DBus::DBusEvent<MainSinkNotificationConfigurationChangedEvent> mainSinkNotificationConfigurationChanged_;
    CommonAPI::DBus::DBusEvent<MainSourceNotificationConfigurationChangedEvent> mainSourceNotificationConfigurationChanged_;
    
};



} // namespace am
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_AM_Command_Control_DBUS_PROXY_H_

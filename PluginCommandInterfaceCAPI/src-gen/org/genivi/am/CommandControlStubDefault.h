/*
* This file was generated by the CommonAPI Generators.
*
 * Copyright (C) 2013, BMW AG
 *
 * \author Christian Linke, christian.linke@bmw.de BMW 2012,2013
*/
#ifndef ORG_GENIVI_AM_Command_Control_STUB_DEFAULT_H_
#define ORG_GENIVI_AM_Command_Control_STUB_DEFAULT_H_

#include <org/genivi/am/CommandControlStub.h>

namespace org {
namespace genivi {
namespace am {

/**
 * Provides a default implementation for CommandControlStubRemoteEvent and
 * CommandControlStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 * 
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class CommandControlStubDefault : public CommandControlStub {
 public:
    CommandControlStubDefault();

    CommandControlStubRemoteEvent* initStubAdapter(const std::shared_ptr<CommandControlStubAdapter>& stubAdapter);


    virtual void connect(am_sourceID_t sourceID, am_sinkID_t sinkID, am_mainConnectionID_t& mainConnectionID, am_Error_e& error);

    virtual void disconnect(am_mainConnectionID_t mainConnectionID, am_Error_e& error);

    virtual void setVolume(am_sinkID_t sinkID, am_mainVolume_t volume, am_Error_e& error);

    virtual void volumeStep(am_sinkID_t sinkID, int16_t volumeStep, am_Error_e& error);

    virtual void setSinkMuteState(am_sinkID_t sinkID, am_MuteState_e muteState, am_Error_e& error);

    virtual void setMainSinkSoundProperty(am_sinkID_t sinkID, am_MainSoundProperty_s soundProperty, am_Error_e& error);

    virtual void setMainSourceSoundProperty(am_sourceID_t sourceID, am_MainSoundProperty_s soundProperty, am_Error_e& error);

    virtual void setSystemProperty(am_SystemProperty_s property, am_Error_e& error);

    virtual void getListMainConnections(am_Error_e& error, am_MainConnection_L& listConnections);

    virtual void getListMainSinks(am_SinkType_L& listMainSinks, am_Error_e& error);

    virtual void getListMainSources(am_SourceType_L& listMainSources, am_Error_e& error);

    virtual void getListMainSinkSoundProperties(am_sinkID_t sinkID, am_MainSoundProperty_L& listSoundProperties, am_Error_e& error);

    virtual void getListMainSourceSoundProperties(am_sourceID_t sourceID, am_MainSoundProperty_L& listSourceProperties, am_Error_e& error);

    virtual void getListSourceClasses(am_SourceClass_L& listSourceClasses, am_Error_e& error);

    virtual void getListSinkClasses(am_SinkClass_L& listSinkClasses, am_Error_e& error);

    virtual void getListSystemProperties(am_SystemProperty_L& listSystemProperties, am_Error_e& error);

    virtual void getTimingInformation(am_mainConnectionID_t mainConnectionID, am_timeSync_t& delay, am_Error_e& error);

    virtual void getListMainSinkNotificationConfigurations(am_sinkID_t sinkID, am_NotificationConfiguration_L& listMainNotificationConfigurations, am_Error_e& error);

    virtual void getListMainSourceNotificationConfigurations(am_sourceID_t sourceID, am_NotificationConfiguration_L& listMainNotificationConfigurations, am_Error_e& error);

    virtual void setMainSinkNotificationConfiguration(am_sinkID_t sinkID, am_NotificationConfiguration_s mainNotificationConfiguration, am_Error_e& error);

    virtual void setMainSourceNotificationConfiguration(am_sourceID_t sourceID, am_NotificationConfiguration_s mainNotificationConfiguration, am_Error_e& error);

    
    virtual void fireNewMainConnectionEvent(const am_MainConnectionType_s& mainConnection);
    virtual void fireRemovedMainConnectionEvent(const am_mainConnectionID_t& mainConnection);
    virtual void fireNewSinkEvent(const am_SinkType_s& sink);
    virtual void fireRemovedSinkEvent(const am_sinkID_t& sinkID);
    virtual void fireNewSourceEvent(const am_SourceType_s& source);
    virtual void fireRemovedSourceEvent(const am_sourceID_t& source);
    virtual void fireNumberOfSinkClassesChangedEvent();
    virtual void fireNumberOfSourceClassesChangedEvent();
    virtual void fireMainConnectionStateChangedEvent(const am_mainConnectionID_t& connectionID, const am_ConnectionState_e& connectionState);
    virtual void fireMainSinkSoundPropertyChangedEvent(const am_sinkID_t& sinkID, const am_MainSoundProperty_s& soundProperty);
    virtual void fireMainSourceSoundPropertyChangedEvent(const am_sourceID_t& sourceID, const am_MainSoundProperty_s& soundProperty);
    virtual void fireSinkAvailabilityChangedEvent(const am_sinkID_t& sinkID, const am_Availability_s& availability);
    virtual void fireSourceAvailabilityChangedEvent(const am_sourceID_t& sourceID, const am_Availability_s& availability);
    virtual void fireVolumeChangedEvent(const am_sinkID_t& sinkID, const am_mainVolume_t& volume);
    virtual void fireSinkMuteStateChangedEvent(const am_sinkID_t& sinkID, const am_MuteState_e& muteState);
    virtual void fireSystemPropertyChangedEvent(const am_SystemProperty_s& systemProperty);
    virtual void fireTimingInformationChangedEvent(const am_mainConnectionID_t& mainConnectionID, const am_timeSync_t& time);
    virtual void fireSinkUpdatedEvent(const am_sinkID_t& sinkID, const am_sinkClass_t& sinkClassID, const am_MainSoundProperty_L& listMainSoundProperties);
    virtual void fireSourceUpdatedEvent(const am_sourceID_t& sourceID, const am_sourceClass_t& sourceClassID, const am_MainSoundProperty_L& listMainSoundProperties);
    virtual void fireSinkNotificationEvent(const am_sinkID_t& sinkID, const am_NotificationPayload_s& notification);
    virtual void fireSourceNotificationEvent(const am_sourceID_t& sourceID, const am_NotificationPayload_s& notification);
    virtual void fireMainSinkNotificationConfigurationChangedEvent(const am_sinkID_t& sinkID, const am_NotificationConfiguration_s& mainNotificationConfiguration);
    virtual void fireMainSourceNotificationConfigurationChangedEvent(const am_sourceID_t& sourceID, const am_NotificationConfiguration_s& mainNotificationConfiguration);

 protected:
    
 private:
    class RemoteEventHandler: public CommandControlStubRemoteEvent {
     public:
        RemoteEventHandler(CommandControlStubDefault* defaultStub);


     private:
        CommandControlStubDefault* defaultStub_;
    };

    RemoteEventHandler remoteEventHandler_;
    std::shared_ptr<CommandControlStubAdapter> stubAdapter_;

};

} // namespace am
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_AM_Command_Control_STUB_DEFAULT_H_

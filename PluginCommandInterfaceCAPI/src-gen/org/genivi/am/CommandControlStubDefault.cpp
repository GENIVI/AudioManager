/*
* This file was generated by the CommonAPI Generators.
*
 * Copyright (C) 2013, BMW AG
 *
 * \author Christian Linke, christian.linke@bmw.de BMW 2012,2013
*/
#include <org/genivi/am/CommandControlStubDefault.h>

namespace org {
namespace genivi {
namespace am {

CommandControlStubDefault::CommandControlStubDefault():
        remoteEventHandler_(this) {
}

CommandControlStubRemoteEvent* CommandControlStubDefault::initStubAdapter(const std::shared_ptr<CommandControlStubAdapter>& stubAdapter) {
    stubAdapter_ = stubAdapter;
    return &remoteEventHandler_;
}


void CommandControlStubDefault::connect(am_sourceID_t sourceID, am_sinkID_t sinkID, am_mainConnectionID_t& mainConnectionID, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::disconnect(am_mainConnectionID_t mainConnectionID, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::setVolume(am_sinkID_t sinkID, am_mainVolume_t volume, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::volumeStep(am_sinkID_t sinkID, int16_t volumeStep, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::setSinkMuteState(am_sinkID_t sinkID, am_MuteState_e muteState, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::setMainSinkSoundProperty(am_sinkID_t sinkID, am_MainSoundProperty_s soundProperty, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::setMainSourceSoundProperty(am_sourceID_t sourceID, am_MainSoundProperty_s soundProperty, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::setSystemProperty(am_SystemProperty_s property, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::getListMainConnections(am_Error_e& error, am_MainConnection_L& listConnections) {
    // No operation in default
}

void CommandControlStubDefault::getListMainSinks(am_SinkType_L& listMainSinks, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::getListMainSources(am_SourceType_L& listMainSources, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::getListMainSinkSoundProperties(am_sinkID_t sinkID, am_MainSoundProperty_L& listSoundProperties, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::getListMainSourceSoundProperties(am_sourceID_t sourceID, am_MainSoundProperty_L& listSourceProperties, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::getListSourceClasses(am_SourceClass_L& listSourceClasses, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::getListSinkClasses(am_SinkClass_L& listSinkClasses, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::getListSystemProperties(am_SystemProperty_L& listSystemProperties, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::getTimingInformation(am_mainConnectionID_t mainConnectionID, am_timeSync_t& delay, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::getListMainSinkNotificationConfigurations(am_sinkID_t sinkID, am_NotificationConfiguration_L& listMainNotificationConfigurations, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::getListMainSourceNotificationConfigurations(am_sourceID_t sourceID, am_NotificationConfiguration_L& listMainNotificationConfigurations, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::setMainSinkNotificationConfiguration(am_sinkID_t sinkID, am_NotificationConfiguration_s mainNotificationConfiguration, am_Error_e& error) {
    // No operation in default
}

void CommandControlStubDefault::setMainSourceNotificationConfiguration(am_sourceID_t sourceID, am_NotificationConfiguration_s mainNotificationConfiguration, am_Error_e& error) {
    // No operation in default
}


void CommandControlStubDefault::fireNewMainConnectionEvent(const am_MainConnectionType_s& mainConnection) {
    stubAdapter_->fireNewMainConnectionEvent(mainConnection);
}
void CommandControlStubDefault::fireRemovedMainConnectionEvent(const am_mainConnectionID_t& mainConnection) {
    stubAdapter_->fireRemovedMainConnectionEvent(mainConnection);
}
void CommandControlStubDefault::fireNewSinkEvent(const am_SinkType_s& sink) {
    stubAdapter_->fireNewSinkEvent(sink);
}
void CommandControlStubDefault::fireRemovedSinkEvent(const am_sinkID_t& sinkID) {
    stubAdapter_->fireRemovedSinkEvent(sinkID);
}
void CommandControlStubDefault::fireNewSourceEvent(const am_SourceType_s& source) {
    stubAdapter_->fireNewSourceEvent(source);
}
void CommandControlStubDefault::fireRemovedSourceEvent(const am_sourceID_t& source) {
    stubAdapter_->fireRemovedSourceEvent(source);
}
void CommandControlStubDefault::fireNumberOfSinkClassesChangedEvent() {
    stubAdapter_->fireNumberOfSinkClassesChangedEvent();
}
void CommandControlStubDefault::fireNumberOfSourceClassesChangedEvent() {
    stubAdapter_->fireNumberOfSourceClassesChangedEvent();
}
void CommandControlStubDefault::fireMainConnectionStateChangedEvent(const am_mainConnectionID_t& connectionID, const am_ConnectionState_e& connectionState) {
    stubAdapter_->fireMainConnectionStateChangedEvent(connectionID, connectionState);
}
void CommandControlStubDefault::fireMainSinkSoundPropertyChangedEvent(const am_sinkID_t& sinkID, const am_MainSoundProperty_s& soundProperty) {
    stubAdapter_->fireMainSinkSoundPropertyChangedEvent(sinkID, soundProperty);
}
void CommandControlStubDefault::fireMainSourceSoundPropertyChangedEvent(const am_sourceID_t& sourceID, const am_MainSoundProperty_s& soundProperty) {
    stubAdapter_->fireMainSourceSoundPropertyChangedEvent(sourceID, soundProperty);
}
void CommandControlStubDefault::fireSinkAvailabilityChangedEvent(const am_sinkID_t& sinkID, const am_Availability_s& availability) {
    stubAdapter_->fireSinkAvailabilityChangedEvent(sinkID, availability);
}
void CommandControlStubDefault::fireSourceAvailabilityChangedEvent(const am_sourceID_t& sourceID, const am_Availability_s& availability) {
    stubAdapter_->fireSourceAvailabilityChangedEvent(sourceID, availability);
}
void CommandControlStubDefault::fireVolumeChangedEvent(const am_sinkID_t& sinkID, const am_mainVolume_t& volume) {
    stubAdapter_->fireVolumeChangedEvent(sinkID, volume);
}
void CommandControlStubDefault::fireSinkMuteStateChangedEvent(const am_sinkID_t& sinkID, const am_MuteState_e& muteState) {
    stubAdapter_->fireSinkMuteStateChangedEvent(sinkID, muteState);
}
void CommandControlStubDefault::fireSystemPropertyChangedEvent(const am_SystemProperty_s& systemProperty) {
    stubAdapter_->fireSystemPropertyChangedEvent(systemProperty);
}
void CommandControlStubDefault::fireTimingInformationChangedEvent(const am_mainConnectionID_t& mainConnectionID, const am_timeSync_t& time) {
    stubAdapter_->fireTimingInformationChangedEvent(mainConnectionID, time);
}
void CommandControlStubDefault::fireSinkUpdatedEvent(const am_sinkID_t& sinkID, const am_sinkClass_t& sinkClassID, const am_MainSoundProperty_L& listMainSoundProperties) {
    stubAdapter_->fireSinkUpdatedEvent(sinkID, sinkClassID, listMainSoundProperties);
}
void CommandControlStubDefault::fireSourceUpdatedEvent(const am_sourceID_t& sourceID, const am_sourceClass_t& sourceClassID, const am_MainSoundProperty_L& listMainSoundProperties) {
    stubAdapter_->fireSourceUpdatedEvent(sourceID, sourceClassID, listMainSoundProperties);
}
void CommandControlStubDefault::fireSinkNotificationEvent(const am_sinkID_t& sinkID, const am_NotificationPayload_s& notification) {
    stubAdapter_->fireSinkNotificationEvent(sinkID, notification);
}
void CommandControlStubDefault::fireSourceNotificationEvent(const am_sourceID_t& sourceID, const am_NotificationPayload_s& notification) {
    stubAdapter_->fireSourceNotificationEvent(sourceID, notification);
}
void CommandControlStubDefault::fireMainSinkNotificationConfigurationChangedEvent(const am_sinkID_t& sinkID, const am_NotificationConfiguration_s& mainNotificationConfiguration) {
    stubAdapter_->fireMainSinkNotificationConfigurationChangedEvent(sinkID, mainNotificationConfiguration);
}
void CommandControlStubDefault::fireMainSourceNotificationConfigurationChangedEvent(const am_sourceID_t& sourceID, const am_NotificationConfiguration_s& mainNotificationConfiguration) {
    stubAdapter_->fireMainSourceNotificationConfigurationChangedEvent(sourceID, mainNotificationConfiguration);
}

CommandControlStubDefault::RemoteEventHandler::RemoteEventHandler(CommandControlStubDefault* defaultStub):
        defaultStub_(defaultStub) {
}

} // namespace am
} // namespace genivi
} // namespace org

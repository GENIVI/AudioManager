/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.1.201309251246.
* Used org.franca.core 0.8.9.201308271211.
*
* Copyright (c) 2012 BMW
* 
* \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
* 
* \copyright
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction,
* including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
* subject to the following conditions:
* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
* THE USE OR OTHER DEALINGS IN THE SOFTWARE.
* 
* For further information see http://www.genivi.org/.
*/
#include <org/genivi/am/CommandControlStubDefault.h>

namespace org {
namespace genivi {
namespace am {

CommandControlStubDefault::CommandControlStubDefault():
        remoteEventHandler_(this) {
}

CommandControlStubRemoteEvent* CommandControlStubDefault::initStubAdapter(const std::shared_ptr<CommandControlStubAdapter>& stubAdapter) {
    stubAdapter_ = stubAdapter;
    return &remoteEventHandler_;
}


/**
 * connects a source to sink
(at)return E_OK on success, E_NOT_POSSIBLE on
 *  failure, E_ALREADY_EXISTS if the connection does already exists
 */
void CommandControlStubDefault::connect(const std::shared_ptr<CommonAPI::ClientId> clientId, am_sourceID_t sourceID, am_sinkID_t sinkID, am_mainConnectionID_t& mainConnectionID, am_Error_e& error) {
    // Call old style methods in default 
    connect(sourceID, sinkID, mainConnectionID, error);
}
void CommandControlStubDefault::connect(am_sourceID_t sourceID, am_sinkID_t sinkID, am_mainConnectionID_t& mainConnectionID, am_Error_e& error) {
    // No operation in default
}

/**
 * disconnects a mainConnection
(at)return E_OK on successes, E_NON_EXISTENT if
 *  the connection does not exist, E_NOT_POSSIBLE on error.
 */
void CommandControlStubDefault::disconnect(const std::shared_ptr<CommonAPI::ClientId> clientId, am_mainConnectionID_t mainConnectionID, am_Error_e& error) {
    // Call old style methods in default 
    disconnect(mainConnectionID, error);
}
void CommandControlStubDefault::disconnect(am_mainConnectionID_t mainConnectionID, am_Error_e& error) {
    // No operation in default
}

/**
 * sets the volume for a sink
(at)return E_OK on success, E_UNKOWN on error,
 *  E_OUT_OF_RANGE in case the value is out of range
 */
void CommandControlStubDefault::setVolume(const std::shared_ptr<CommonAPI::ClientId> clientId, am_sinkID_t sinkID, am_mainVolume_t volume, am_Error_e& error) {
    // Call old style methods in default 
    setVolume(sinkID, volume, error);
}
void CommandControlStubDefault::setVolume(am_sinkID_t sinkID, am_mainVolume_t volume, am_Error_e& error) {
    // No operation in default
}

/**
 * This function is used to increment or decrement the current volume for a
 *  sink.
(at)return E_OK on success, E_UNKNOWN on error and E_OUT_OF_RANGE if
 *  the value is not in the given volume range.
 */
void CommandControlStubDefault::volumeStep(const std::shared_ptr<CommonAPI::ClientId> clientId, am_sinkID_t sinkID, int16_t volumeStep_, am_Error_e& error) {
    // Call old style methods in default 
    volumeStep(sinkID, volumeStep_, error);
}
void CommandControlStubDefault::volumeStep(am_sinkID_t sinkID, int16_t volumeStep_, am_Error_e& error) {
    // No operation in default
}

/**
 * sets the mute state of a sink
(at)return E_OK on success, E_UNKNOWN on error.
 *  If the mute state is already the desired one, the Daemon will return E_OK.
 */
void CommandControlStubDefault::setSinkMuteState(const std::shared_ptr<CommonAPI::ClientId> clientId, am_sinkID_t sinkID, am_MuteState_e muteState, am_Error_e& error) {
    // Call old style methods in default 
    setSinkMuteState(sinkID, muteState, error);
}
void CommandControlStubDefault::setSinkMuteState(am_sinkID_t sinkID, am_MuteState_e muteState, am_Error_e& error) {
    // No operation in default
}

/**
 * This method is used to set sound properties, e.g. Equalizer Values. Since the
 *  capabilities of the system can differ, the exact key value pairs can be
 *  extended in each product
(at)return E_OK on success, E_OUT_OF_RANGE if value
 *  exceeds range, E_UNKNOWN in case of an error
 */
void CommandControlStubDefault::setMainSinkSoundProperty(const std::shared_ptr<CommonAPI::ClientId> clientId, am_sinkID_t sinkID, am_MainSoundProperty_s soundProperty, am_Error_e& error) {
    // Call old style methods in default 
    setMainSinkSoundProperty(sinkID, soundProperty, error);
}
void CommandControlStubDefault::setMainSinkSoundProperty(am_sinkID_t sinkID, am_MainSoundProperty_s soundProperty, am_Error_e& error) {
    // No operation in default
}

/**
 * This method is used to set sound properties, e.g. Equalizer Values. Since the
 *  capabilities of the system can differ, the exact key value pairs can be
 *  extended in each product
(at)return E_OK on success, E_OUT_OF_RANGE if value
 *  exceeds range, E_UNKNOWN in case of an error
 */
void CommandControlStubDefault::setMainSourceSoundProperty(const std::shared_ptr<CommonAPI::ClientId> clientId, am_sourceID_t sourceID, am_MainSoundProperty_s soundProperty, am_Error_e& error) {
    // Call old style methods in default 
    setMainSourceSoundProperty(sourceID, soundProperty, error);
}
void CommandControlStubDefault::setMainSourceSoundProperty(am_sourceID_t sourceID, am_MainSoundProperty_s soundProperty, am_Error_e& error) {
    // No operation in default
}

/**
 * is used to set a specific system property.
(at)return E_OK on success,
 *  E_OUT_OF_RANGE if value exceeds range, E_UNKNOWN in case of an error
 */
void CommandControlStubDefault::setSystemProperty(const std::shared_ptr<CommonAPI::ClientId> clientId, am_SystemProperty_s property, am_Error_e& error) {
    // Call old style methods in default 
    setSystemProperty(property, error);
}
void CommandControlStubDefault::setSystemProperty(am_SystemProperty_s property, am_Error_e& error) {
    // No operation in default
}

/**
 * returns the actual list of MainConnections
(at)return E_OK on success,
 *  E_DATABASE_ERROR on error
 */
void CommandControlStubDefault::getListMainConnections(const std::shared_ptr<CommonAPI::ClientId> clientId, am_MainConnection_L& listConnections, am_Error_e& error) {
    // Call old style methods in default 
    getListMainConnections(listConnections, error);
}
void CommandControlStubDefault::getListMainConnections(am_MainConnection_L& listConnections, am_Error_e& error) {
    // No operation in default
}

/**
 * returns the actual list of Sinks
(at)return E_OK on success, E_DATABASE_ERROR
 *  on error
 */
void CommandControlStubDefault::getListMainSinks(const std::shared_ptr<CommonAPI::ClientId> clientId, am_SinkType_L& listMainSinks, am_Error_e& error) {
    // Call old style methods in default 
    getListMainSinks(listMainSinks, error);
}
void CommandControlStubDefault::getListMainSinks(am_SinkType_L& listMainSinks, am_Error_e& error) {
    // No operation in default
}

/**
 * returns the actual list of Sources
(at)return E_OK on success,
 *  E_DATABASE_ERROR on error
 */
void CommandControlStubDefault::getListMainSources(const std::shared_ptr<CommonAPI::ClientId> clientId, am_SourceType_L& listMainSources, am_Error_e& error) {
    // Call old style methods in default 
    getListMainSources(listMainSources, error);
}
void CommandControlStubDefault::getListMainSources(am_SourceType_L& listMainSources, am_Error_e& error) {
    // No operation in default
}

/**
 * This is used to retrieve all source sound properties related to a source.
 *  Returns a vector of the sound properties and values as pair
(at)return E_OK
 *  on success, E_DATABASE_ERROR on error
 */
void CommandControlStubDefault::getListMainSinkSoundProperties(const std::shared_ptr<CommonAPI::ClientId> clientId, am_sinkID_t sinkID, am_MainSoundProperty_L& listSoundProperties, am_Error_e& error) {
    // Call old style methods in default 
    getListMainSinkSoundProperties(sinkID, listSoundProperties, error);
}
void CommandControlStubDefault::getListMainSinkSoundProperties(am_sinkID_t sinkID, am_MainSoundProperty_L& listSoundProperties, am_Error_e& error) {
    // No operation in default
}

/**
 * This is used to retrieve all source sound properties related to a
 *  source.
(at)return E_OK on success, E_DATABASE_ERROR on error
 */
void CommandControlStubDefault::getListMainSourceSoundProperties(const std::shared_ptr<CommonAPI::ClientId> clientId, am_sourceID_t sourceID, am_MainSoundProperty_L& listSourceProperties, am_Error_e& error) {
    // Call old style methods in default 
    getListMainSourceSoundProperties(sourceID, listSourceProperties, error);
}
void CommandControlStubDefault::getListMainSourceSoundProperties(am_sourceID_t sourceID, am_MainSoundProperty_L& listSourceProperties, am_Error_e& error) {
    // No operation in default
}

/**
 * This is used to retrieve SourceClass Information of all source classes
 *  
(at)return E_OK on success, E_DATABASE_ERROR on error
 */
void CommandControlStubDefault::getListSourceClasses(const std::shared_ptr<CommonAPI::ClientId> clientId, am_SourceClass_L& listSourceClasses, am_Error_e& error) {
    // Call old style methods in default 
    getListSourceClasses(listSourceClasses, error);
}
void CommandControlStubDefault::getListSourceClasses(am_SourceClass_L& listSourceClasses, am_Error_e& error) {
    // No operation in default
}

/**
 * This is used to retrieve SinkClass Information of all sink classes 
(at)return
 *  E_OK on success, E_DATABASE_ERROR on error
 */
void CommandControlStubDefault::getListSinkClasses(const std::shared_ptr<CommonAPI::ClientId> clientId, am_SinkClass_L& listSinkClasses, am_Error_e& error) {
    // Call old style methods in default 
    getListSinkClasses(listSinkClasses, error);
}
void CommandControlStubDefault::getListSinkClasses(am_SinkClass_L& listSinkClasses, am_Error_e& error) {
    // No operation in default
}

/**
 * Retrieves a complete list of all systemProperties.
(at)return E_OK on success,
 *  E_DATABASE_ERROR on error
 */
void CommandControlStubDefault::getListSystemProperties(const std::shared_ptr<CommonAPI::ClientId> clientId, am_SystemProperty_L& listSystemProperties, am_Error_e& error) {
    // Call old style methods in default 
    getListSystemProperties(listSystemProperties, error);
}
void CommandControlStubDefault::getListSystemProperties(am_SystemProperty_L& listSystemProperties, am_Error_e& error) {
    // No operation in default
}

/**
 * returns the delay in ms that the audiopath for the given mainConnection
 *  has
(at)return E_OK on success, E_NOT_POSSIBLE if timing information is not
 *  yet retrieved, E_DATABASE_ERROR on read error on the database
 */
void CommandControlStubDefault::getTimingInformation(const std::shared_ptr<CommonAPI::ClientId> clientId, am_mainConnectionID_t mainConnectionID, am_timeSync_t& delay, am_Error_e& error) {
    // Call old style methods in default 
    getTimingInformation(mainConnectionID, delay, error);
}
void CommandControlStubDefault::getTimingInformation(am_mainConnectionID_t mainConnectionID, am_timeSync_t& delay, am_Error_e& error) {
    // No operation in default
}

/**
 * Retrieves the list of MainNotifications for a sink. Does not return the
 *  possible ones.
 */
void CommandControlStubDefault::getListMainSinkNotificationConfigurations(const std::shared_ptr<CommonAPI::ClientId> clientId, am_sinkID_t sinkID, am_NotificationConfiguration_L& listMainNotificationConfigurations, am_Error_e& error) {
    // Call old style methods in default 
    getListMainSinkNotificationConfigurations(sinkID, listMainNotificationConfigurations, error);
}
void CommandControlStubDefault::getListMainSinkNotificationConfigurations(am_sinkID_t sinkID, am_NotificationConfiguration_L& listMainNotificationConfigurations, am_Error_e& error) {
    // No operation in default
}

/**
 * Retrieves the list of MainNotifications for a source. Does not return the
 *  possible ones.
 */
void CommandControlStubDefault::getListMainSourceNotificationConfigurations(const std::shared_ptr<CommonAPI::ClientId> clientId, am_sourceID_t sourceID, am_NotificationConfiguration_L& listMainNotificationConfigurations, am_Error_e& error) {
    // Call old style methods in default 
    getListMainSourceNotificationConfigurations(sourceID, listMainNotificationConfigurations, error);
}
void CommandControlStubDefault::getListMainSourceNotificationConfigurations(am_sourceID_t sourceID, am_NotificationConfiguration_L& listMainNotificationConfigurations, am_Error_e& error) {
    // No operation in default
}

/**
 * sets a MainNotificationConfiuration. This can be used to turn on an off
 *  notifications an to change the mode of the configuration.
(at)return E_OK on
 *  success, E_NON_EXISTENT if sinkID does not exists, E_DATABASE_ERROR on error
 */
void CommandControlStubDefault::setMainSinkNotificationConfiguration(const std::shared_ptr<CommonAPI::ClientId> clientId, am_sinkID_t sinkID, am_NotificationConfiguration_s mainNotificationConfiguration, am_Error_e& error) {
    // Call old style methods in default 
    setMainSinkNotificationConfiguration(sinkID, mainNotificationConfiguration, error);
}
void CommandControlStubDefault::setMainSinkNotificationConfiguration(am_sinkID_t sinkID, am_NotificationConfiguration_s mainNotificationConfiguration, am_Error_e& error) {
    // No operation in default
}

/**
 * sets a MainNotificationConfiuration. This can be used to turn on an off
 *  notifications an to change the mode of the configuration.
(at)return E_OK on
 *  success, E_NON_EXISTENT if sourceID does not exists, E_DATABASE_ERROR on error
 */
void CommandControlStubDefault::setMainSourceNotificationConfiguration(const std::shared_ptr<CommonAPI::ClientId> clientId, am_sourceID_t sourceID, am_NotificationConfiguration_s mainNotificationConfiguration, am_Error_e& error) {
    // Call old style methods in default 
    setMainSourceNotificationConfiguration(sourceID, mainNotificationConfiguration, error);
}
void CommandControlStubDefault::setMainSourceNotificationConfiguration(am_sourceID_t sourceID, am_NotificationConfiguration_s mainNotificationConfiguration, am_Error_e& error) {
    // No operation in default
}


/**
 * Callback that is called when the number of connections change
 */
void CommandControlStubDefault::fireNewMainConnectionEvent(const am_MainConnectionType_s& mainConnection) {
    stubAdapter_->fireNewMainConnectionEvent(mainConnection);
}
/**
 * Callback that is called when the number of connections change
 */
void CommandControlStubDefault::fireRemovedMainConnectionEvent(const am_mainConnectionID_t& mainConnection) {
    stubAdapter_->fireRemovedMainConnectionEvent(mainConnection);
}
/**
 * Callback that is called when the number of sinks change
 */
void CommandControlStubDefault::fireNewSinkEvent(const am_SinkType_s& sink) {
    stubAdapter_->fireNewSinkEvent(sink);
}
/**
 * Callback that is called when the number of sinks change
 */
void CommandControlStubDefault::fireRemovedSinkEvent(const am_sinkID_t& sinkID) {
    stubAdapter_->fireRemovedSinkEvent(sinkID);
}
/**
 * Callback that is called when the number of sources change
 */
void CommandControlStubDefault::fireNewSourceEvent(const am_SourceType_s& source) {
    stubAdapter_->fireNewSourceEvent(source);
}
/**
 * Callback that is called when the number of sources change
 */
void CommandControlStubDefault::fireRemovedSourceEvent(const am_sourceID_t& source) {
    stubAdapter_->fireRemovedSourceEvent(source);
}
/**
 * this callback is fired if the number of sink classes changed
 */
void CommandControlStubDefault::fireNumberOfSinkClassesChangedEvent() {
    stubAdapter_->fireNumberOfSinkClassesChangedEvent();
}
/**
 * this callback is fired if the number of source classes changed
 */
void CommandControlStubDefault::fireNumberOfSourceClassesChangedEvent() {
    stubAdapter_->fireNumberOfSourceClassesChangedEvent();
}
/**
 * This callback is called when the ConnectionState of a connection changed.
 */
void CommandControlStubDefault::fireMainConnectionStateChangedEvent(const am_mainConnectionID_t& connectionID, const am_ConnectionState_e& connectionState) {
    stubAdapter_->fireMainConnectionStateChangedEvent(connectionID, connectionState);
}
/**
 * this callback indicates that a sinkSoundProperty has changed.
 */
void CommandControlStubDefault::fireMainSinkSoundPropertyChangedEvent(const am_sinkID_t& sinkID, const am_MainSoundProperty_s& soundProperty) {
    stubAdapter_->fireMainSinkSoundPropertyChangedEvent(sinkID, soundProperty);
}
/**
 * this callback indicates that a sourceSoundProperty has changed.
 */
void CommandControlStubDefault::fireMainSourceSoundPropertyChangedEvent(const am_sourceID_t& sourceID, const am_MainSoundProperty_s& soundProperty) {
    stubAdapter_->fireMainSourceSoundPropertyChangedEvent(sourceID, soundProperty);
}
/**
 * this callback is called when the availability of a sink has changed
 */
void CommandControlStubDefault::fireSinkAvailabilityChangedEvent(const am_sinkID_t& sinkID, const am_Availability_s& availability) {
    stubAdapter_->fireSinkAvailabilityChangedEvent(sinkID, availability);
}
/**
 * this callback is called when the availability of source has changed.
 */
void CommandControlStubDefault::fireSourceAvailabilityChangedEvent(const am_sourceID_t& sourceID, const am_Availability_s& availability) {
    stubAdapter_->fireSourceAvailabilityChangedEvent(sourceID, availability);
}
/**
 * this callback indicates a volume change on the indicated sink
 */
void CommandControlStubDefault::fireVolumeChangedEvent(const am_sinkID_t& sinkID, const am_mainVolume_t& volume) {
    stubAdapter_->fireVolumeChangedEvent(sinkID, volume);
}
/**
 * this callback indicates a mute state change on a sink.
 */
void CommandControlStubDefault::fireSinkMuteStateChangedEvent(const am_sinkID_t& sinkID, const am_MuteState_e& muteState) {
    stubAdapter_->fireSinkMuteStateChangedEvent(sinkID, muteState);
}
/**
 * is fired if a systemProperty changed
 */
void CommandControlStubDefault::fireSystemPropertyChangedEvent(const am_SystemProperty_s& systemProperty) {
    stubAdapter_->fireSystemPropertyChangedEvent(systemProperty);
}
/**
 * This callback is fired if the timinginformation for a mainConnectionID changed
 */
void CommandControlStubDefault::fireTimingInformationChangedEvent(const am_mainConnectionID_t& mainConnectionID, const am_timeSync_t& time) {
    stubAdapter_->fireTimingInformationChangedEvent(mainConnectionID, time);
}
/**
 * This callback is called when a sink is updated.
 */
void CommandControlStubDefault::fireSinkUpdatedEvent(const am_sinkID_t& sinkID, const am_sinkClass_t& sinkClassID, const am_MainSoundProperty_L& listMainSoundProperties) {
    stubAdapter_->fireSinkUpdatedEvent(sinkID, sinkClassID, listMainSoundProperties);
}
/**
 * This callback is called when a source is updated.
 */
void CommandControlStubDefault::fireSourceUpdatedEvent(const am_sourceID_t& sourceID, const am_sourceClass_t& sourceClassID, const am_MainSoundProperty_L& listMainSoundProperties) {
    stubAdapter_->fireSourceUpdatedEvent(sourceID, sourceClassID, listMainSoundProperties);
}
/**
 * This callback is called when a notificated value of a sink changes.
 */
void CommandControlStubDefault::fireSinkNotificationEvent(const am_sinkID_t& sinkID, const am_NotificationPayload_s& notification) {
    stubAdapter_->fireSinkNotificationEvent(sinkID, notification);
}
/**
 * This callback is called when a notifcated value of a source changes.
 */
void CommandControlStubDefault::fireSourceNotificationEvent(const am_sourceID_t& sourceID, const am_NotificationPayload_s& notification) {
    stubAdapter_->fireSourceNotificationEvent(sourceID, notification);
}
/**
 * This callback is triggered when a mainNotificationConfiguration is changed.
 */
void CommandControlStubDefault::fireMainSinkNotificationConfigurationChangedEvent(const am_sinkID_t& sinkID, const am_NotificationConfiguration_s& mainNotificationConfiguration) {
    stubAdapter_->fireMainSinkNotificationConfigurationChangedEvent(sinkID, mainNotificationConfiguration);
}
/**
 * This callback is triggered when a mainNotificationConfiguration is changed.
 */
void CommandControlStubDefault::fireMainSourceNotificationConfigurationChangedEvent(const am_sourceID_t& sourceID, const am_NotificationConfiguration_s& mainNotificationConfiguration) {
    stubAdapter_->fireMainSourceNotificationConfigurationChangedEvent(sourceID, mainNotificationConfiguration);
}


CommandControlStubDefault::RemoteEventHandler::RemoteEventHandler(CommandControlStubDefault* defaultStub):
        defaultStub_(defaultStub) {
}

} // namespace am
} // namespace genivi
} // namespace org

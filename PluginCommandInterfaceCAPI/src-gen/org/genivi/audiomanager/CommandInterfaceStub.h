/*
* This file was generated by the CommonAPI Generators.
*
 *  Copyright (c) 2012 BMW
 *
 *  \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
 *
 *  \copyright
 *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction,
 *  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 *  subject to the following conditions:
 *  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *  For further information see http://www.genivi.org/.
*/
#ifndef ORG_GENIVI_AUDIOMANAGER_Command_Interface_STUB_H_
#define ORG_GENIVI_AUDIOMANAGER_Command_Interface_STUB_H_



#include <org/genivi/audiomanager/am.h>

#include "CommandInterface.h"

#define COMMONAPI_INTERNAL_COMPILATION

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/SerializableStruct.h>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Stub.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace audiomanager {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service CommandInterface. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class CommandInterfaceStubAdapter: virtual public CommonAPI::StubAdapter, public CommandInterface {
 public:

    /**
     * Sends a broadcast event for NumberOfMainConnectionsChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNumberOfMainConnectionsChangedEvent() = 0;
    /**
     * Sends a broadcast event for MainConnectionStateChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireMainConnectionStateChangedEvent(const CommandInterface::am_mainConnectionID_t& connectionID, const CommandInterface::am_ConnectionState_e& connectionState) = 0;
    /**
     * Sends a broadcast event for NumberOfSourceClassesChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNumberOfSourceClassesChangedEvent() = 0;
    /**
     * Sends a broadcast event for SourceAdded. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSourceAddedEvent(const CommandInterface::am_SourceType_s& newSource) = 0;
    /**
     * Sends a broadcast event for SourceRemoved. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSourceRemovedEvent(const CommandInterface::am_sourceID_t& removedSourceID) = 0;
    /**
     * Sends a broadcast event for MainSourceSoundPropertyChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireMainSourceSoundPropertyChangedEvent(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_MainSoundProperty_s& SoundProperty) = 0;
    /**
     * Sends a broadcast event for SourceAvailabilityChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSourceAvailabilityChangedEvent(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_Availability_s& availability) = 0;
    /**
     * Sends a broadcast event for NumberOfSinkClassesChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNumberOfSinkClassesChangedEvent() = 0;
    /**
     * Sends a broadcast event for SinkAdded. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSinkAddedEvent(const CommandInterface::am_SinkType_s& newSink) = 0;
    /**
     * Sends a broadcast event for SinkRemoved. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSinkRemovedEvent(const CommandInterface::am_sinkID_t& removedSinkID) = 0;
    /**
     * Sends a broadcast event for MainSinkSoundPropertyChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireMainSinkSoundPropertyChangedEvent(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_MainSoundProperty_s& SoundProperty) = 0;
    /**
     * Sends a broadcast event for SinkAvailabilityChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSinkAvailabilityChangedEvent(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_Availability_s& availability) = 0;
    /**
     * Sends a broadcast event for VolumeChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireVolumeChangedEvent(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_mainVolume_t& volume) = 0;
    /**
     * Sends a broadcast event for SinkMuteStateChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSinkMuteStateChangedEvent(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_MuteState_e& muteState) = 0;
    /**
     * Sends a broadcast event for SystemPropertyChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSystemPropertyChangedEvent(const CommandInterface::am_SystemProperty_s& SystemProperty) = 0;
    /**
     * Sends a broadcast event for TimingInformationChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireTimingInformationChangedEvent(const CommandInterface::am_mainConnectionID_t& mainConnection, const CommandInterface::am_timeSync_t& time) = 0;
    /**
     * Sends a broadcast event for SinkUpdated. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSinkUpdatedEvent(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_sinkClass_t& sinkClassID, const CommandInterface::am_MainSoundProperty_l& listMainSoundProperties) = 0;
    /**
     * Sends a broadcast event for SourceUpdated. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSourceUpdatedEvent(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_sourceClass_t& sourceClassID, const CommandInterface::am_MainSoundProperty_l& listMainSoundProperties) = 0;
    /**
     * Sends a broadcast event for SinkNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSinkNotificationEvent(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_NotificationPayload_s& notification) = 0;
    /**
     * Sends a broadcast event for SourceNotification. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSourceNotificationEvent(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_NotificationPayload_s& notification) = 0;
    /**
     * Sends a broadcast event for MainSinkNotificationConfigurationChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireMainSinkNotificationConfigurationChangedEvent(const CommandInterface::am_sinkID_t& sinkID, const am::am_NotificationConfiguration_s& mainNotificationConfiguration) = 0;
    /**
     * Sends a broadcast event for MainSourceNotificationConfigurationChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireMainSourceNotificationConfigurationChangedEvent(const CommandInterface::am_sourceID_t& sourceID, const am::am_NotificationConfiguration_s& mainNotificationConfiguration) = 0;
};


/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for CommandInterface.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class CommandInterfaceStubRemoteEvent {
 public:
    virtual ~CommandInterfaceStubRemoteEvent() { }

};


/**
 * Defines the interface that must be implemented by any class that should provide
 * the service CommandInterface to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class CommandInterfaceStub : public CommonAPI::Stub<CommandInterfaceStubAdapter , CommandInterfaceStubRemoteEvent> {
 public:
    virtual ~CommandInterfaceStub() { }


    /// This is the method that will be called on remote calls on the method Connect.
    virtual void Connect(CommandInterface::am_sourceID_t sourceID, CommandInterface::am_sinkID_t sinkID, CommandInterface::am_Error_e& result, CommandInterface::am_mainConnectionID_t& mainConnectionID) = 0;
    /// This is the method that will be called on remote calls on the method Disconnect.
    virtual void Disconnect(CommandInterface::am_mainConnectionID_t mainConnectionID, CommandInterface::am_Error_e& result) = 0;
    /// This is the method that will be called on remote calls on the method SetVolume.
    virtual void SetVolume(CommandInterface::am_sinkID_t sinkID, CommandInterface::am_mainVolume_t volume, CommandInterface::am_Error_e& result) = 0;
    /// This is the method that will be called on remote calls on the method VolumeStep.
    virtual void VolumeStep(CommandInterface::am_sinkID_t sinkID, CommandInterface::am_mainVolume_t volumeStep, CommandInterface::am_Error_e& result) = 0;
    /// This is the method that will be called on remote calls on the method SetSinkMuteState.
    virtual void SetSinkMuteState(CommandInterface::am_sinkID_t sinkID, CommandInterface::am_MuteState_e muteState, CommandInterface::am_Error_e& result) = 0;
    /// This is the method that will be called on remote calls on the method SetMainSinkSoundProperty.
    virtual void SetMainSinkSoundProperty(CommandInterface::am_sinkID_t sinkID, CommandInterface::am_MainSoundProperty_s soundProperty, CommandInterface::am_Error_e& result) = 0;
    /// This is the method that will be called on remote calls on the method SetMainSourceSoundProperty.
    virtual void SetMainSourceSoundProperty(CommandInterface::am_sourceID_t sourceID, CommandInterface::am_MainSoundProperty_s soundProperty, CommandInterface::am_Error_e& result) = 0;
    /// This is the method that will be called on remote calls on the method SetSystemProperty.
    virtual void SetSystemProperty(CommandInterface::am_SystemProperty_s soundProperty, CommandInterface::am_Error_e& result) = 0;
    /// This is the method that will be called on remote calls on the method GetListMainConnections.
    virtual void GetListMainConnections(CommandInterface::am_Error_e& result, CommandInterface::am_MainConnectionType_l& listConnections) = 0;
    /// This is the method that will be called on remote calls on the method GetListMainSinks.
    virtual void GetListMainSinks(CommandInterface::am_Error_e& result, CommandInterface::am_SinkType_l& listMainSinks) = 0;
    /// This is the method that will be called on remote calls on the method GetListMainSources.
    virtual void GetListMainSources(CommandInterface::am_Error_e& result, CommandInterface::am_SourceType_l& listMainSources) = 0;
    /// This is the method that will be called on remote calls on the method GetListMainSinkSoundProperties.
    virtual void GetListMainSinkSoundProperties(CommandInterface::am_sinkID_t sinkID, CommandInterface::am_Error_e& result, CommandInterface::am_MainSoundProperty_l& listSoundProperties) = 0;
    /// This is the method that will be called on remote calls on the method GetListMainSourceSoundProperties.
    virtual void GetListMainSourceSoundProperties(CommandInterface::am_sourceID_t sourceID, CommandInterface::am_Error_e& result, CommandInterface::am_MainSoundProperty_l& listSourceProperties) = 0;
    /// This is the method that will be called on remote calls on the method GetListSourceClasses.
    virtual void GetListSourceClasses(CommandInterface::am_Error_e& result, CommandInterface::am_SourceClass_l& listSourceClasses) = 0;
    /// This is the method that will be called on remote calls on the method GetListSinkClasses.
    virtual void GetListSinkClasses(CommandInterface::am_Error_e& result, CommandInterface::am_SinkClass_l& listSinkClasses) = 0;
    /// This is the method that will be called on remote calls on the method GetListSystemProperties.
    virtual void GetListSystemProperties(CommandInterface::am_Error_e& result, CommandInterface::am_SystemProperty_l& listSystemProperties) = 0;
    /// This is the method that will be called on remote calls on the method GetTimingInformation.
    virtual void GetTimingInformation(CommandInterface::am_mainConnectionID_t mainConnectionID, CommandInterface::am_Error_e& result, CommandInterface::am_timeSync_t& delay) = 0;
    
    /// Sends a broadcast event for NumberOfMainConnectionsChanged.
    virtual void fireNumberOfMainConnectionsChangedEvent() = 0;
    /// Sends a broadcast event for MainConnectionStateChanged.
    virtual void fireMainConnectionStateChangedEvent(const CommandInterface::am_mainConnectionID_t& connectionID, const CommandInterface::am_ConnectionState_e& connectionState) = 0;
    /// Sends a broadcast event for NumberOfSourceClassesChanged.
    virtual void fireNumberOfSourceClassesChangedEvent() = 0;
    /// Sends a broadcast event for SourceAdded.
    virtual void fireSourceAddedEvent(const CommandInterface::am_SourceType_s& newSource) = 0;
    /// Sends a broadcast event for SourceRemoved.
    virtual void fireSourceRemovedEvent(const CommandInterface::am_sourceID_t& removedSourceID) = 0;
    /// Sends a broadcast event for MainSourceSoundPropertyChanged.
    virtual void fireMainSourceSoundPropertyChangedEvent(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_MainSoundProperty_s& SoundProperty) = 0;
    /// Sends a broadcast event for SourceAvailabilityChanged.
    virtual void fireSourceAvailabilityChangedEvent(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_Availability_s& availability) = 0;
    /// Sends a broadcast event for NumberOfSinkClassesChanged.
    virtual void fireNumberOfSinkClassesChangedEvent() = 0;
    /// Sends a broadcast event for SinkAdded.
    virtual void fireSinkAddedEvent(const CommandInterface::am_SinkType_s& newSink) = 0;
    /// Sends a broadcast event for SinkRemoved.
    virtual void fireSinkRemovedEvent(const CommandInterface::am_sinkID_t& removedSinkID) = 0;
    /// Sends a broadcast event for MainSinkSoundPropertyChanged.
    virtual void fireMainSinkSoundPropertyChangedEvent(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_MainSoundProperty_s& SoundProperty) = 0;
    /// Sends a broadcast event for SinkAvailabilityChanged.
    virtual void fireSinkAvailabilityChangedEvent(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_Availability_s& availability) = 0;
    /// Sends a broadcast event for VolumeChanged.
    virtual void fireVolumeChangedEvent(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_mainVolume_t& volume) = 0;
    /// Sends a broadcast event for SinkMuteStateChanged.
    virtual void fireSinkMuteStateChangedEvent(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_MuteState_e& muteState) = 0;
    /// Sends a broadcast event for SystemPropertyChanged.
    virtual void fireSystemPropertyChangedEvent(const CommandInterface::am_SystemProperty_s& SystemProperty) = 0;
    /// Sends a broadcast event for TimingInformationChanged.
    virtual void fireTimingInformationChangedEvent(const CommandInterface::am_mainConnectionID_t& mainConnection, const CommandInterface::am_timeSync_t& time) = 0;
    /// Sends a broadcast event for SinkUpdated.
    virtual void fireSinkUpdatedEvent(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_sinkClass_t& sinkClassID, const CommandInterface::am_MainSoundProperty_l& listMainSoundProperties) = 0;
    /// Sends a broadcast event for SourceUpdated.
    virtual void fireSourceUpdatedEvent(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_sourceClass_t& sourceClassID, const CommandInterface::am_MainSoundProperty_l& listMainSoundProperties) = 0;
    /// Sends a broadcast event for SinkNotification.
    virtual void fireSinkNotificationEvent(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_NotificationPayload_s& notification) = 0;
    /// Sends a broadcast event for SourceNotification.
    virtual void fireSourceNotificationEvent(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_NotificationPayload_s& notification) = 0;
    /// Sends a broadcast event for MainSinkNotificationConfigurationChanged.
    virtual void fireMainSinkNotificationConfigurationChangedEvent(const CommandInterface::am_sinkID_t& sinkID, const am::am_NotificationConfiguration_s& mainNotificationConfiguration) = 0;
    /// Sends a broadcast event for MainSourceNotificationConfigurationChanged.
    virtual void fireMainSourceNotificationConfigurationChangedEvent(const CommandInterface::am_sourceID_t& sourceID, const am::am_NotificationConfiguration_s& mainNotificationConfiguration) = 0;
};

} // namespace audiomanager
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_AUDIOMANAGER_Command_Interface_STUB_H_

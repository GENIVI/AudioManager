 /*
 * This file was generated by the CommonAPI Generators.
 *
  *  Copyright (c) 2012 BMW
  *
  *  \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
  *
  *  \copyright
  *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction,
  *  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
  *  subject to the following conditions:
  *  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
  *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
  *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  *
  *  For further information see http://www.genivi.org/.
 */
 #ifndef ORG_GENIVI_AUDIOMANAGER_Command_Interface_PROXY_BASE_H_
 #define ORG_GENIVI_AUDIOMANAGER_Command_Interface_PROXY_BASE_H_
 
 #include "CommandInterface.h"
 
 
 #include <org/genivi/audiomanager/am.h>
 
 #define COMMONAPI_INTERNAL_COMPILATION
 
 #include <CommonAPI/InputStream.h>
 #include <CommonAPI/OutputStream.h>
 #include <CommonAPI/SerializableStruct.h>
 #include <cstdint>
 #include <string>
 #include <vector>

 #include <CommonAPI/Event.h>
 #include <CommonAPI/Proxy.h>
 #include <functional>
 #include <future>
 
 #undef COMMONAPI_INTERNAL_COMPILATION

 namespace org {
 namespace genivi {
 namespace audiomanager {

 class CommandInterfaceProxyBase: virtual public CommonAPI::Proxy {
  public:
     typedef CommonAPI::Event<> NumberOfMainConnectionsChangedEvent;
     typedef CommonAPI::Event<CommandInterface::am_mainConnectionID_t, CommandInterface::am_ConnectionState_e> MainConnectionStateChangedEvent;
     typedef CommonAPI::Event<> NumberOfSourceClassesChangedEvent;
     typedef CommonAPI::Event<CommandInterface::am_SourceType_s> SourceAddedEvent;
     typedef CommonAPI::Event<CommandInterface::am_sourceID_t> SourceRemovedEvent;
     typedef CommonAPI::Event<CommandInterface::am_sourceID_t, CommandInterface::am_MainSoundProperty_s> MainSourceSoundPropertyChangedEvent;
     typedef CommonAPI::Event<CommandInterface::am_sourceID_t, CommandInterface::am_Availability_s> SourceAvailabilityChangedEvent;
     typedef CommonAPI::Event<> NumberOfSinkClassesChangedEvent;
     typedef CommonAPI::Event<CommandInterface::am_SinkType_s> SinkAddedEvent;
     typedef CommonAPI::Event<CommandInterface::am_sinkID_t> SinkRemovedEvent;
     typedef CommonAPI::Event<CommandInterface::am_sinkID_t, CommandInterface::am_MainSoundProperty_s> MainSinkSoundPropertyChangedEvent;
     typedef CommonAPI::Event<CommandInterface::am_sinkID_t, CommandInterface::am_Availability_s> SinkAvailabilityChangedEvent;
     typedef CommonAPI::Event<CommandInterface::am_sinkID_t, CommandInterface::am_mainVolume_t> VolumeChangedEvent;
     typedef CommonAPI::Event<CommandInterface::am_sinkID_t, CommandInterface::am_MuteState_e> SinkMuteStateChangedEvent;
     typedef CommonAPI::Event<CommandInterface::am_SystemProperty_s> SystemPropertyChangedEvent;
     typedef CommonAPI::Event<CommandInterface::am_mainConnectionID_t, CommandInterface::am_timeSync_t> TimingInformationChangedEvent;
     typedef CommonAPI::Event<CommandInterface::am_sinkID_t, CommandInterface::am_sinkClass_t, CommandInterface::am_MainSoundProperty_l> SinkUpdatedEvent;
     typedef CommonAPI::Event<CommandInterface::am_sourceID_t, CommandInterface::am_sourceClass_t, CommandInterface::am_MainSoundProperty_l> SourceUpdatedEvent;
     typedef CommonAPI::Event<CommandInterface::am_sinkID_t, CommandInterface::am_NotificationPayload_s> SinkNotificationEvent;
     typedef CommonAPI::Event<CommandInterface::am_sourceID_t, CommandInterface::am_NotificationPayload_s> SourceNotificationEvent;
     typedef CommonAPI::Event<CommandInterface::am_sinkID_t, am::am_NotificationConfiguration_s> MainSinkNotificationConfigurationChangedEvent;
     typedef CommonAPI::Event<CommandInterface::am_sourceID_t, am::am_NotificationConfiguration_s> MainSourceNotificationConfigurationChangedEvent;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&, const CommandInterface::am_mainConnectionID_t&)> ConnectAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&)> DisconnectAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&)> SetVolumeAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&)> VolumeStepAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&)> SetSinkMuteStateAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&)> SetMainSinkSoundPropertyAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&)> SetMainSourceSoundPropertyAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&)> SetSystemPropertyAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&, const CommandInterface::am_MainConnectionType_l&)> GetListMainConnectionsAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&, const CommandInterface::am_SinkType_l&)> GetListMainSinksAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&, const CommandInterface::am_SourceType_l&)> GetListMainSourcesAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&, const CommandInterface::am_MainSoundProperty_l&)> GetListMainSinkSoundPropertiesAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&, const CommandInterface::am_MainSoundProperty_l&)> GetListMainSourceSoundPropertiesAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&, const CommandInterface::am_SourceClass_l&)> GetListSourceClassesAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&, const CommandInterface::am_SinkClass_l&)> GetListSinkClassesAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&, const CommandInterface::am_SystemProperty_l&)> GetListSystemPropertiesAsyncCallback;
     typedef std::function<void(const CommonAPI::CallStatus&, const CommandInterface::am_Error_e&, const CommandInterface::am_timeSync_t&)> GetTimingInformationAsyncCallback;


     virtual NumberOfMainConnectionsChangedEvent& getNumberOfMainConnectionsChangedEvent() = 0;
     virtual MainConnectionStateChangedEvent& getMainConnectionStateChangedEvent() = 0;
     virtual NumberOfSourceClassesChangedEvent& getNumberOfSourceClassesChangedEvent() = 0;
     virtual SourceAddedEvent& getSourceAddedEvent() = 0;
     virtual SourceRemovedEvent& getSourceRemovedEvent() = 0;
     virtual MainSourceSoundPropertyChangedEvent& getMainSourceSoundPropertyChangedEvent() = 0;
     virtual SourceAvailabilityChangedEvent& getSourceAvailabilityChangedEvent() = 0;
     virtual NumberOfSinkClassesChangedEvent& getNumberOfSinkClassesChangedEvent() = 0;
     virtual SinkAddedEvent& getSinkAddedEvent() = 0;
     virtual SinkRemovedEvent& getSinkRemovedEvent() = 0;
     virtual MainSinkSoundPropertyChangedEvent& getMainSinkSoundPropertyChangedEvent() = 0;
     virtual SinkAvailabilityChangedEvent& getSinkAvailabilityChangedEvent() = 0;
     virtual VolumeChangedEvent& getVolumeChangedEvent() = 0;
     virtual SinkMuteStateChangedEvent& getSinkMuteStateChangedEvent() = 0;
     virtual SystemPropertyChangedEvent& getSystemPropertyChangedEvent() = 0;
     virtual TimingInformationChangedEvent& getTimingInformationChangedEvent() = 0;
     virtual SinkUpdatedEvent& getSinkUpdatedEvent() = 0;
     virtual SourceUpdatedEvent& getSourceUpdatedEvent() = 0;
     virtual SinkNotificationEvent& getSinkNotificationEvent() = 0;
     virtual SourceNotificationEvent& getSourceNotificationEvent() = 0;
     virtual MainSinkNotificationConfigurationChangedEvent& getMainSinkNotificationConfigurationChangedEvent() = 0;
     virtual MainSourceNotificationConfigurationChangedEvent& getMainSourceNotificationConfigurationChangedEvent() = 0;


     virtual void Connect(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_sinkID_t& sinkID, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_mainConnectionID_t& mainConnectionID) = 0;
     virtual std::future<CommonAPI::CallStatus> ConnectAsync(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_sinkID_t& sinkID, ConnectAsyncCallback callback) = 0;

     virtual void Disconnect(const CommandInterface::am_mainConnectionID_t& mainConnectionID, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result) = 0;
     virtual std::future<CommonAPI::CallStatus> DisconnectAsync(const CommandInterface::am_mainConnectionID_t& mainConnectionID, DisconnectAsyncCallback callback) = 0;

     virtual void SetVolume(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_mainVolume_t& volume, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result) = 0;
     virtual std::future<CommonAPI::CallStatus> SetVolumeAsync(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_mainVolume_t& volume, SetVolumeAsyncCallback callback) = 0;

     virtual void VolumeStep(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_mainVolume_t& volumeStep, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result) = 0;
     virtual std::future<CommonAPI::CallStatus> VolumeStepAsync(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_mainVolume_t& volumeStep, VolumeStepAsyncCallback callback) = 0;

     virtual void SetSinkMuteState(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_MuteState_e& muteState, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result) = 0;
     virtual std::future<CommonAPI::CallStatus> SetSinkMuteStateAsync(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_MuteState_e& muteState, SetSinkMuteStateAsyncCallback callback) = 0;

     virtual void SetMainSinkSoundProperty(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_MainSoundProperty_s& soundProperty, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result) = 0;
     virtual std::future<CommonAPI::CallStatus> SetMainSinkSoundPropertyAsync(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_MainSoundProperty_s& soundProperty, SetMainSinkSoundPropertyAsyncCallback callback) = 0;

     virtual void SetMainSourceSoundProperty(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_MainSoundProperty_s& soundProperty, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result) = 0;
     virtual std::future<CommonAPI::CallStatus> SetMainSourceSoundPropertyAsync(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_MainSoundProperty_s& soundProperty, SetMainSourceSoundPropertyAsyncCallback callback) = 0;

     virtual void SetSystemProperty(const CommandInterface::am_SystemProperty_s& soundProperty, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result) = 0;
     virtual std::future<CommonAPI::CallStatus> SetSystemPropertyAsync(const CommandInterface::am_SystemProperty_s& soundProperty, SetSystemPropertyAsyncCallback callback) = 0;

     virtual void GetListMainConnections(CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_MainConnectionType_l& listConnections) = 0;
     virtual std::future<CommonAPI::CallStatus> GetListMainConnectionsAsync(GetListMainConnectionsAsyncCallback callback) = 0;

     virtual void GetListMainSinks(CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_SinkType_l& listMainSinks) = 0;
     virtual std::future<CommonAPI::CallStatus> GetListMainSinksAsync(GetListMainSinksAsyncCallback callback) = 0;

     virtual void GetListMainSources(CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_SourceType_l& listMainSources) = 0;
     virtual std::future<CommonAPI::CallStatus> GetListMainSourcesAsync(GetListMainSourcesAsyncCallback callback) = 0;

     virtual void GetListMainSinkSoundProperties(const CommandInterface::am_sinkID_t& sinkID, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_MainSoundProperty_l& listSoundProperties) = 0;
     virtual std::future<CommonAPI::CallStatus> GetListMainSinkSoundPropertiesAsync(const CommandInterface::am_sinkID_t& sinkID, GetListMainSinkSoundPropertiesAsyncCallback callback) = 0;

     virtual void GetListMainSourceSoundProperties(const CommandInterface::am_sourceID_t& sourceID, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_MainSoundProperty_l& listSourceProperties) = 0;
     virtual std::future<CommonAPI::CallStatus> GetListMainSourceSoundPropertiesAsync(const CommandInterface::am_sourceID_t& sourceID, GetListMainSourceSoundPropertiesAsyncCallback callback) = 0;

     virtual void GetListSourceClasses(CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_SourceClass_l& listSourceClasses) = 0;
     virtual std::future<CommonAPI::CallStatus> GetListSourceClassesAsync(GetListSourceClassesAsyncCallback callback) = 0;

     virtual void GetListSinkClasses(CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_SinkClass_l& listSinkClasses) = 0;
     virtual std::future<CommonAPI::CallStatus> GetListSinkClassesAsync(GetListSinkClassesAsyncCallback callback) = 0;

     virtual void GetListSystemProperties(CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_SystemProperty_l& listSystemProperties) = 0;
     virtual std::future<CommonAPI::CallStatus> GetListSystemPropertiesAsync(GetListSystemPropertiesAsyncCallback callback) = 0;

     virtual void GetTimingInformation(const CommandInterface::am_mainConnectionID_t& mainConnectionID, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_timeSync_t& delay) = 0;
     virtual std::future<CommonAPI::CallStatus> GetTimingInformationAsync(const CommandInterface::am_mainConnectionID_t& mainConnectionID, GetTimingInformationAsyncCallback callback) = 0;
 };

 } // namespace audiomanager
 } // namespace genivi
 } // namespace org

 #endif // ORG_GENIVI_AUDIOMANAGER_Command_Interface_PROXY_BASE_H_

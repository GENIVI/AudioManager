/*
* This file was generated by the CommonAPI Generators.
*
 *  Copyright (c) 2012 BMW
 *
 *  \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
 *
 *  \copyright
 *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction,
 *  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 *  subject to the following conditions:
 *  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *  For further information see http://www.genivi.org/.
*/
#include "CommandInterface.h"

namespace org {
namespace genivi {
namespace audiomanager {

CommandInterface::am_MainSoundProperty_s::am_MainSoundProperty_s(const am_MainSoundPropertyType_e& typeValue, const int16_t& valueValue):
        type(typeValue),
        value(valueValue)
{
}


bool operator==(const CommandInterface::am_MainSoundProperty_s& lhs, const CommandInterface::am_MainSoundProperty_s& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.type == rhs.type &&
        lhs.value == rhs.value
    ;
}

void CommandInterface::am_MainSoundProperty_s::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> type;
    inputStream >> value;
}

void CommandInterface::am_MainSoundProperty_s::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << type;
    outputStream << value;
}
CommandInterface::am_SystemProperty_s::am_SystemProperty_s(const am_SystemPropertyType_e& typeValue, const int16_t& valueValue):
        type(typeValue),
        value(valueValue)
{
}


bool operator==(const CommandInterface::am_SystemProperty_s& lhs, const CommandInterface::am_SystemProperty_s& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.type == rhs.type &&
        lhs.value == rhs.value
    ;
}

void CommandInterface::am_SystemProperty_s::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> type;
    inputStream >> value;
}

void CommandInterface::am_SystemProperty_s::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << type;
    outputStream << value;
}
CommandInterface::am_MainConnectionType_s::am_MainConnectionType_s(const am_mainConnectionID_t& mainConnectionIDValue, const am_sourceID_t& sourceIDValue, const am_sinkID_t& sinkIDValue, const am_timeSync_t& delayValue, const am_ConnectionState_e& connectionStateValue):
        mainConnectionID(mainConnectionIDValue),
        sourceID(sourceIDValue),
        sinkID(sinkIDValue),
        delay(delayValue),
        connectionState(connectionStateValue)
{
}


bool operator==(const CommandInterface::am_MainConnectionType_s& lhs, const CommandInterface::am_MainConnectionType_s& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.mainConnectionID == rhs.mainConnectionID &&
        lhs.sourceID == rhs.sourceID &&
        lhs.sinkID == rhs.sinkID &&
        lhs.delay == rhs.delay &&
        lhs.connectionState == rhs.connectionState
    ;
}

void CommandInterface::am_MainConnectionType_s::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> mainConnectionID;
    inputStream >> sourceID;
    inputStream >> sinkID;
    inputStream >> delay;
    inputStream >> connectionState;
}

void CommandInterface::am_MainConnectionType_s::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << mainConnectionID;
    outputStream << sourceID;
    outputStream << sinkID;
    outputStream << delay;
    outputStream << connectionState;
}
CommandInterface::am_Availability_s::am_Availability_s(const am_Availablility_e& availabilityValue, const am_AvailabilityReason_e& availabilityReasonValue):
        availability(availabilityValue),
        availabilityReason(availabilityReasonValue)
{
}


bool operator==(const CommandInterface::am_Availability_s& lhs, const CommandInterface::am_Availability_s& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.availability == rhs.availability &&
        lhs.availabilityReason == rhs.availabilityReason
    ;
}

void CommandInterface::am_Availability_s::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> availability;
    inputStream >> availabilityReason;
}

void CommandInterface::am_Availability_s::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << availability;
    outputStream << availabilityReason;
}
CommandInterface::am_SourceType_s::am_SourceType_s(const am_sourceID_t& sourceIDValue, const std::string& nameValue, const am_Availability_s& availabilityValue, const am_sourceClass_t& sourceClassIDValue):
        sourceID(sourceIDValue),
        name(nameValue),
        availability(availabilityValue),
        sourceClassID(sourceClassIDValue)
{
}


bool operator==(const CommandInterface::am_SourceType_s& lhs, const CommandInterface::am_SourceType_s& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.sourceID == rhs.sourceID &&
        lhs.name == rhs.name &&
        lhs.availability == rhs.availability &&
        lhs.sourceClassID == rhs.sourceClassID
    ;
}

void CommandInterface::am_SourceType_s::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> sourceID;
    inputStream >> name;
    inputStream >> availability;
    inputStream >> sourceClassID;
}

void CommandInterface::am_SourceType_s::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << sourceID;
    outputStream << name;
    outputStream << availability;
    outputStream << sourceClassID;
}
CommandInterface::am_SinkType_s::am_SinkType_s(const am_sinkID_t& sinkIDValue, const std::string& nameValue, const am_Availability_s& availabilityValue, const am_mainVolume_t& volumeValue, const am_MuteState_e& muteStateValue, const am_sinkClass_t& sinkClassIDValue):
        sinkID(sinkIDValue),
        name(nameValue),
        availability(availabilityValue),
        volume(volumeValue),
        muteState(muteStateValue),
        sinkClassID(sinkClassIDValue)
{
}


bool operator==(const CommandInterface::am_SinkType_s& lhs, const CommandInterface::am_SinkType_s& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.sinkID == rhs.sinkID &&
        lhs.name == rhs.name &&
        lhs.availability == rhs.availability &&
        lhs.volume == rhs.volume &&
        lhs.muteState == rhs.muteState &&
        lhs.sinkClassID == rhs.sinkClassID
    ;
}

void CommandInterface::am_SinkType_s::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> sinkID;
    inputStream >> name;
    inputStream >> availability;
    inputStream >> volume;
    inputStream >> muteState;
    inputStream >> sinkClassID;
}

void CommandInterface::am_SinkType_s::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << sinkID;
    outputStream << name;
    outputStream << availability;
    outputStream << volume;
    outputStream << muteState;
    outputStream << sinkClassID;
}
CommandInterface::am_ClassProperty_s::am_ClassProperty_s(const am_ClassProperty_e& classPropertyValue, const int16_t& valueValue):
        classProperty(classPropertyValue),
        value(valueValue)
{
}


bool operator==(const CommandInterface::am_ClassProperty_s& lhs, const CommandInterface::am_ClassProperty_s& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.classProperty == rhs.classProperty &&
        lhs.value == rhs.value
    ;
}

void CommandInterface::am_ClassProperty_s::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> classProperty;
    inputStream >> value;
}

void CommandInterface::am_ClassProperty_s::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << classProperty;
    outputStream << value;
}
CommandInterface::am_SourceClass_s::am_SourceClass_s(const am_sourceClass_t& sourceClassIDValue, const std::string& nameValue, const am_ClassProperty_l& listClassPropertiesValue):
        sourceClassID(sourceClassIDValue),
        name(nameValue),
        listClassProperties(listClassPropertiesValue)
{
}


bool operator==(const CommandInterface::am_SourceClass_s& lhs, const CommandInterface::am_SourceClass_s& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.sourceClassID == rhs.sourceClassID &&
        lhs.name == rhs.name &&
        lhs.listClassProperties == rhs.listClassProperties
    ;
}

void CommandInterface::am_SourceClass_s::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> sourceClassID;
    inputStream >> name;
    inputStream >> listClassProperties;
}

void CommandInterface::am_SourceClass_s::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << sourceClassID;
    outputStream << name;
    outputStream << listClassProperties;
}
CommandInterface::am_SinkClass_s::am_SinkClass_s(const am_sinkClass_t& sinkClassIDValue, const std::string& nameValue, const am_ClassProperty_l& listClassPropertiesValue):
        sinkClassID(sinkClassIDValue),
        name(nameValue),
        listClassProperties(listClassPropertiesValue)
{
}


bool operator==(const CommandInterface::am_SinkClass_s& lhs, const CommandInterface::am_SinkClass_s& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.sinkClassID == rhs.sinkClassID &&
        lhs.name == rhs.name &&
        lhs.listClassProperties == rhs.listClassProperties
    ;
}

void CommandInterface::am_SinkClass_s::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> sinkClassID;
    inputStream >> name;
    inputStream >> listClassProperties;
}

void CommandInterface::am_SinkClass_s::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << sinkClassID;
    outputStream << name;
    outputStream << listClassProperties;
}
CommandInterface::am_NotificationPayload_s::am_NotificationPayload_s(const am::am_NotificationType_e& typeValue, const int16_t& valueValue):
        type(typeValue),
        value(valueValue)
{
}


bool operator==(const CommandInterface::am_NotificationPayload_s& lhs, const CommandInterface::am_NotificationPayload_s& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.type == rhs.type &&
        lhs.value == rhs.value
    ;
}

void CommandInterface::am_NotificationPayload_s::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> type;
    inputStream >> value;
}

void CommandInterface::am_NotificationPayload_s::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << type;
    outputStream << value;
}

} // namespace audiomanager
} // namespace genivi
} // namespace org

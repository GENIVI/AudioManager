/*
* This file was generated by the CommonAPI Generators.
*
 *  Copyright (c) 2012 BMW
 *
 *  \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
 *
 *  \copyright
 *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction,
 *  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 *  subject to the following conditions:
 *  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *  For further information see http://www.genivi.org/.
*/
#include "CommandInterfaceDBusProxy.h"

namespace org {
namespace genivi {
namespace audiomanager {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createCommandInterfaceDBusProxy(
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection) {
    return std::make_shared<CommandInterfaceDBusProxy>(commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection);
}

__attribute__((constructor)) void registerCommandInterfaceDBusProxy(void) {
    CommonAPI::DBus::DBusFactory::registerProxyFactoryMethod(CommandInterface::getInterfaceId(),
       &createCommandInterfaceDBusProxy);
}

CommandInterfaceDBusProxy::CommandInterfaceDBusProxy(
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection):
        CommonAPI::DBus::DBusProxy(commonApiAddress, interfaceName, busName, objectPath, dbusProxyconnection)
,        numberOfMainConnectionsChanged_(*this, "NumberOfMainConnectionsChanged", ""),
                        mainConnectionStateChanged_(*this, "MainConnectionStateChanged", "qi"),
                        numberOfSourceClassesChanged_(*this, "NumberOfSourceClassesChanged", ""),
                        sourceAdded_(*this, "SourceAdded", "(qs(ii)q)"),
                        sourceRemoved_(*this, "SourceRemoved", "q"),
                        mainSourceSoundPropertyChanged_(*this, "MainSourceSoundPropertyChanged", "q(in)"),
                        sourceAvailabilityChanged_(*this, "SourceAvailabilityChanged", "q(ii)"),
                        numberOfSinkClassesChanged_(*this, "NumberOfSinkClassesChanged", ""),
                        sinkAdded_(*this, "SinkAdded", "(qs(ii)niq)"),
                        sinkRemoved_(*this, "SinkRemoved", "q"),
                        mainSinkSoundPropertyChanged_(*this, "MainSinkSoundPropertyChanged", "q(in)"),
                        sinkAvailabilityChanged_(*this, "SinkAvailabilityChanged", "q(ii)"),
                        volumeChanged_(*this, "VolumeChanged", "qn"),
                        sinkMuteStateChanged_(*this, "SinkMuteStateChanged", "qi"),
                        systemPropertyChanged_(*this, "SystemPropertyChanged", "(in)"),
                        timingInformationChanged_(*this, "TimingInformationChanged", "qn"),
                        sinkUpdated_(*this, "SinkUpdated", "qqa(in)"),
                        sourceUpdated_(*this, "SourceUpdated", "qqa(in)"),
                        sinkNotification_(*this, "SinkNotification", "q(in)"),
                        sourceNotification_(*this, "SourceNotification", "q(in)"),
                        mainSinkNotificationConfigurationChanged_(*this, "MainSinkNotificationConfigurationChanged", "q(iin)"),
                        mainSourceNotificationConfigurationChanged_(*this, "MainSourceNotificationConfigurationChanged", "q(iin)")
                 {
}


CommandInterfaceDBusProxy::NumberOfMainConnectionsChangedEvent& CommandInterfaceDBusProxy::getNumberOfMainConnectionsChangedEvent() {
    return numberOfMainConnectionsChanged_;
}
CommandInterfaceDBusProxy::MainConnectionStateChangedEvent& CommandInterfaceDBusProxy::getMainConnectionStateChangedEvent() {
    return mainConnectionStateChanged_;
}
CommandInterfaceDBusProxy::NumberOfSourceClassesChangedEvent& CommandInterfaceDBusProxy::getNumberOfSourceClassesChangedEvent() {
    return numberOfSourceClassesChanged_;
}
CommandInterfaceDBusProxy::SourceAddedEvent& CommandInterfaceDBusProxy::getSourceAddedEvent() {
    return sourceAdded_;
}
CommandInterfaceDBusProxy::SourceRemovedEvent& CommandInterfaceDBusProxy::getSourceRemovedEvent() {
    return sourceRemoved_;
}
CommandInterfaceDBusProxy::MainSourceSoundPropertyChangedEvent& CommandInterfaceDBusProxy::getMainSourceSoundPropertyChangedEvent() {
    return mainSourceSoundPropertyChanged_;
}
CommandInterfaceDBusProxy::SourceAvailabilityChangedEvent& CommandInterfaceDBusProxy::getSourceAvailabilityChangedEvent() {
    return sourceAvailabilityChanged_;
}
CommandInterfaceDBusProxy::NumberOfSinkClassesChangedEvent& CommandInterfaceDBusProxy::getNumberOfSinkClassesChangedEvent() {
    return numberOfSinkClassesChanged_;
}
CommandInterfaceDBusProxy::SinkAddedEvent& CommandInterfaceDBusProxy::getSinkAddedEvent() {
    return sinkAdded_;
}
CommandInterfaceDBusProxy::SinkRemovedEvent& CommandInterfaceDBusProxy::getSinkRemovedEvent() {
    return sinkRemoved_;
}
CommandInterfaceDBusProxy::MainSinkSoundPropertyChangedEvent& CommandInterfaceDBusProxy::getMainSinkSoundPropertyChangedEvent() {
    return mainSinkSoundPropertyChanged_;
}
CommandInterfaceDBusProxy::SinkAvailabilityChangedEvent& CommandInterfaceDBusProxy::getSinkAvailabilityChangedEvent() {
    return sinkAvailabilityChanged_;
}
CommandInterfaceDBusProxy::VolumeChangedEvent& CommandInterfaceDBusProxy::getVolumeChangedEvent() {
    return volumeChanged_;
}
CommandInterfaceDBusProxy::SinkMuteStateChangedEvent& CommandInterfaceDBusProxy::getSinkMuteStateChangedEvent() {
    return sinkMuteStateChanged_;
}
CommandInterfaceDBusProxy::SystemPropertyChangedEvent& CommandInterfaceDBusProxy::getSystemPropertyChangedEvent() {
    return systemPropertyChanged_;
}
CommandInterfaceDBusProxy::TimingInformationChangedEvent& CommandInterfaceDBusProxy::getTimingInformationChangedEvent() {
    return timingInformationChanged_;
}
CommandInterfaceDBusProxy::SinkUpdatedEvent& CommandInterfaceDBusProxy::getSinkUpdatedEvent() {
    return sinkUpdated_;
}
CommandInterfaceDBusProxy::SourceUpdatedEvent& CommandInterfaceDBusProxy::getSourceUpdatedEvent() {
    return sourceUpdated_;
}
CommandInterfaceDBusProxy::SinkNotificationEvent& CommandInterfaceDBusProxy::getSinkNotificationEvent() {
    return sinkNotification_;
}
CommandInterfaceDBusProxy::SourceNotificationEvent& CommandInterfaceDBusProxy::getSourceNotificationEvent() {
    return sourceNotification_;
}
CommandInterfaceDBusProxy::MainSinkNotificationConfigurationChangedEvent& CommandInterfaceDBusProxy::getMainSinkNotificationConfigurationChangedEvent() {
    return mainSinkNotificationConfigurationChanged_;
}
CommandInterfaceDBusProxy::MainSourceNotificationConfigurationChangedEvent& CommandInterfaceDBusProxy::getMainSourceNotificationConfigurationChangedEvent() {
    return mainSourceNotificationConfigurationChanged_;
}

void CommandInterfaceDBusProxy::Connect(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_sinkID_t& sinkID, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_mainConnectionID_t& mainConnectionID) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sourceID_t, CommandInterface::am_sinkID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_mainConnectionID_t> >::callMethodWithReply(
        *this,
        "Connect",
        "qq",
        sourceID, sinkID, 
        callStatus
        , result, mainConnectionID);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::ConnectAsync(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_sinkID_t& sinkID, ConnectAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sourceID_t, CommandInterface::am_sinkID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_mainConnectionID_t> >::callMethodAsync(
        *this,
        "Connect",
        "qq",
        sourceID, sinkID, 
        std::move(callback));
}
void CommandInterfaceDBusProxy::Disconnect(const CommandInterface::am_mainConnectionID_t& mainConnectionID, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_mainConnectionID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e> >::callMethodWithReply(
        *this,
        "Disconnect",
        "q",
        mainConnectionID, 
        callStatus
        , result);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::DisconnectAsync(const CommandInterface::am_mainConnectionID_t& mainConnectionID, DisconnectAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_mainConnectionID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e> >::callMethodAsync(
        *this,
        "Disconnect",
        "q",
        mainConnectionID, 
        std::move(callback));
}
void CommandInterfaceDBusProxy::SetVolume(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_mainVolume_t& volume, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sinkID_t, CommandInterface::am_mainVolume_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e> >::callMethodWithReply(
        *this,
        "SetVolume",
        "qn",
        sinkID, volume, 
        callStatus
        , result);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::SetVolumeAsync(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_mainVolume_t& volume, SetVolumeAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sinkID_t, CommandInterface::am_mainVolume_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e> >::callMethodAsync(
        *this,
        "SetVolume",
        "qn",
        sinkID, volume, 
        std::move(callback));
}
void CommandInterfaceDBusProxy::VolumeStep(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_mainVolume_t& volumeStep, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sinkID_t, CommandInterface::am_mainVolume_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e> >::callMethodWithReply(
        *this,
        "VolumeStep",
        "qn",
        sinkID, volumeStep, 
        callStatus
        , result);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::VolumeStepAsync(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_mainVolume_t& volumeStep, VolumeStepAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sinkID_t, CommandInterface::am_mainVolume_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e> >::callMethodAsync(
        *this,
        "VolumeStep",
        "qn",
        sinkID, volumeStep, 
        std::move(callback));
}
void CommandInterfaceDBusProxy::SetSinkMuteState(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_MuteState_e& muteState, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sinkID_t, CommandInterface::am_MuteState_e>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e> >::callMethodWithReply(
        *this,
        "SetSinkMuteState",
        "qi",
        sinkID, muteState, 
        callStatus
        , result);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::SetSinkMuteStateAsync(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_MuteState_e& muteState, SetSinkMuteStateAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sinkID_t, CommandInterface::am_MuteState_e>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e> >::callMethodAsync(
        *this,
        "SetSinkMuteState",
        "qi",
        sinkID, muteState, 
        std::move(callback));
}
void CommandInterfaceDBusProxy::SetMainSinkSoundProperty(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_MainSoundProperty_s& soundProperty, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sinkID_t, CommandInterface::am_MainSoundProperty_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e> >::callMethodWithReply(
        *this,
        "SetMainSinkSoundProperty",
        "q(in)",
        sinkID, soundProperty, 
        callStatus
        , result);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::SetMainSinkSoundPropertyAsync(const CommandInterface::am_sinkID_t& sinkID, const CommandInterface::am_MainSoundProperty_s& soundProperty, SetMainSinkSoundPropertyAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sinkID_t, CommandInterface::am_MainSoundProperty_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e> >::callMethodAsync(
        *this,
        "SetMainSinkSoundProperty",
        "q(in)",
        sinkID, soundProperty, 
        std::move(callback));
}
void CommandInterfaceDBusProxy::SetMainSourceSoundProperty(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_MainSoundProperty_s& soundProperty, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sourceID_t, CommandInterface::am_MainSoundProperty_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e> >::callMethodWithReply(
        *this,
        "SetMainSourceSoundProperty",
        "q(in)",
        sourceID, soundProperty, 
        callStatus
        , result);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::SetMainSourceSoundPropertyAsync(const CommandInterface::am_sourceID_t& sourceID, const CommandInterface::am_MainSoundProperty_s& soundProperty, SetMainSourceSoundPropertyAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sourceID_t, CommandInterface::am_MainSoundProperty_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e> >::callMethodAsync(
        *this,
        "SetMainSourceSoundProperty",
        "q(in)",
        sourceID, soundProperty, 
        std::move(callback));
}
void CommandInterfaceDBusProxy::SetSystemProperty(const CommandInterface::am_SystemProperty_s& soundProperty, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_SystemProperty_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e> >::callMethodWithReply(
        *this,
        "SetSystemProperty",
        "(in)",
        soundProperty, 
        callStatus
        , result);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::SetSystemPropertyAsync(const CommandInterface::am_SystemProperty_s& soundProperty, SetSystemPropertyAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_SystemProperty_s>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e> >::callMethodAsync(
        *this,
        "SetSystemProperty",
        "(in)",
        soundProperty, 
        std::move(callback));
}
void CommandInterfaceDBusProxy::GetListMainConnections(CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_MainConnectionType_l& listConnections) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_MainConnectionType_l> >::callMethodWithReply(
        *this,
        "GetListMainConnections",
        "",
        callStatus
        , result, listConnections);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::GetListMainConnectionsAsync(GetListMainConnectionsAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_MainConnectionType_l> >::callMethodAsync(
        *this,
        "GetListMainConnections",
        "",
        std::move(callback));
}
void CommandInterfaceDBusProxy::GetListMainSinks(CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_SinkType_l& listMainSinks) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_SinkType_l> >::callMethodWithReply(
        *this,
        "GetListMainSinks",
        "",
        callStatus
        , result, listMainSinks);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::GetListMainSinksAsync(GetListMainSinksAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_SinkType_l> >::callMethodAsync(
        *this,
        "GetListMainSinks",
        "",
        std::move(callback));
}
void CommandInterfaceDBusProxy::GetListMainSources(CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_SourceType_l& listMainSources) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_SourceType_l> >::callMethodWithReply(
        *this,
        "GetListMainSources",
        "",
        callStatus
        , result, listMainSources);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::GetListMainSourcesAsync(GetListMainSourcesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_SourceType_l> >::callMethodAsync(
        *this,
        "GetListMainSources",
        "",
        std::move(callback));
}
void CommandInterfaceDBusProxy::GetListMainSinkSoundProperties(const CommandInterface::am_sinkID_t& sinkID, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_MainSoundProperty_l& listSoundProperties) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sinkID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_MainSoundProperty_l> >::callMethodWithReply(
        *this,
        "GetListMainSinkSoundProperties",
        "q",
        sinkID, 
        callStatus
        , result, listSoundProperties);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::GetListMainSinkSoundPropertiesAsync(const CommandInterface::am_sinkID_t& sinkID, GetListMainSinkSoundPropertiesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sinkID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_MainSoundProperty_l> >::callMethodAsync(
        *this,
        "GetListMainSinkSoundProperties",
        "q",
        sinkID, 
        std::move(callback));
}
void CommandInterfaceDBusProxy::GetListMainSourceSoundProperties(const CommandInterface::am_sourceID_t& sourceID, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_MainSoundProperty_l& listSourceProperties) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sourceID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_MainSoundProperty_l> >::callMethodWithReply(
        *this,
        "GetListMainSourceSoundProperties",
        "q",
        sourceID, 
        callStatus
        , result, listSourceProperties);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::GetListMainSourceSoundPropertiesAsync(const CommandInterface::am_sourceID_t& sourceID, GetListMainSourceSoundPropertiesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_sourceID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_MainSoundProperty_l> >::callMethodAsync(
        *this,
        "GetListMainSourceSoundProperties",
        "q",
        sourceID, 
        std::move(callback));
}
void CommandInterfaceDBusProxy::GetListSourceClasses(CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_SourceClass_l& listSourceClasses) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_SourceClass_l> >::callMethodWithReply(
        *this,
        "GetListSourceClasses",
        "",
        callStatus
        , result, listSourceClasses);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::GetListSourceClassesAsync(GetListSourceClassesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_SourceClass_l> >::callMethodAsync(
        *this,
        "GetListSourceClasses",
        "",
        std::move(callback));
}
void CommandInterfaceDBusProxy::GetListSinkClasses(CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_SinkClass_l& listSinkClasses) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_SinkClass_l> >::callMethodWithReply(
        *this,
        "GetListSinkClasses",
        "",
        callStatus
        , result, listSinkClasses);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::GetListSinkClassesAsync(GetListSinkClassesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_SinkClass_l> >::callMethodAsync(
        *this,
        "GetListSinkClasses",
        "",
        std::move(callback));
}
void CommandInterfaceDBusProxy::GetListSystemProperties(CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_SystemProperty_l& listSystemProperties) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_SystemProperty_l> >::callMethodWithReply(
        *this,
        "GetListSystemProperties",
        "",
        callStatus
        , result, listSystemProperties);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::GetListSystemPropertiesAsync(GetListSystemPropertiesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_SystemProperty_l> >::callMethodAsync(
        *this,
        "GetListSystemProperties",
        "",
        std::move(callback));
}
void CommandInterfaceDBusProxy::GetTimingInformation(const CommandInterface::am_mainConnectionID_t& mainConnectionID, CommonAPI::CallStatus& callStatus, CommandInterface::am_Error_e& result, CommandInterface::am_timeSync_t& delay) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_mainConnectionID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_timeSync_t> >::callMethodWithReply(
        *this,
        "GetTimingInformation",
        "q",
        mainConnectionID, 
        callStatus
        , result, delay);
}
std::future<CommonAPI::CallStatus> CommandInterfaceDBusProxy::GetTimingInformationAsync(const CommandInterface::am_mainConnectionID_t& mainConnectionID, GetTimingInformationAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_mainConnectionID_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<CommandInterface::am_Error_e, CommandInterface::am_timeSync_t> >::callMethodAsync(
        *this,
        "GetTimingInformation",
        "q",
        mainConnectionID, 
        std::move(callback));
}

void CommandInterfaceDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
}

} // namespace audiomanager
} // namespace genivi
} // namespace org

/*
* This file was generated by the CommonAPI Generators.
*
 * Copyright (C) 2013, BMW AG
 *
 * \author Christian Linke, christian.linke@bmw.de BMW 2012,2013
*/
#include "ConsumerDBusProxy.h"

namespace org {
namespace genivi {
namespace NodeStateManager {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createConsumerDBusProxy(
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection) {
    return std::make_shared<ConsumerDBusProxy>(commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection);
}

__attribute__((constructor)) void registerConsumerDBusProxy(void) {
    CommonAPI::DBus::DBusFactory::registerProxyFactoryMethod(Consumer::getInterfaceId(),
       &createConsumerDBusProxy);
}

ConsumerDBusProxy::ConsumerDBusProxy(
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection):
        CommonAPI::DBus::DBusProxy(commonApiAddress, interfaceName, busName, objectPath, dbusProxyconnection)
,        bootMode_(*this, interfaceName.c_str(), "BootMode"),
        restartReason_(*this, interfaceName.c_str(), "RestartReason"),
        shutdownReason_(*this, interfaceName.c_str(), "ShutdownReason"),
        wakeUpReason_(*this, interfaceName.c_str(), "WakeUpReason")
,        nodeApplicationMode_(*this, "NodeApplicationMode", "i"),
                        sessionStateChanged_(*this, "SessionStateChanged", "sii"),
                        nodeState_(*this, "NodeState", "i")
                 {
}

ConsumerDBusProxy::BootModeAttribute& ConsumerDBusProxy::getBootModeAttribute() {
    return bootMode_;
}
ConsumerDBusProxy::RestartReasonAttribute& ConsumerDBusProxy::getRestartReasonAttribute() {
    return restartReason_;
}
ConsumerDBusProxy::ShutdownReasonAttribute& ConsumerDBusProxy::getShutdownReasonAttribute() {
    return shutdownReason_;
}
ConsumerDBusProxy::WakeUpReasonAttribute& ConsumerDBusProxy::getWakeUpReasonAttribute() {
    return wakeUpReason_;
}

ConsumerDBusProxy::NodeApplicationModeEvent& ConsumerDBusProxy::getNodeApplicationModeEvent() {
    return nodeApplicationMode_;
}
ConsumerDBusProxy::SessionStateChangedEvent& ConsumerDBusProxy::getSessionStateChangedEvent() {
    return sessionStateChanged_;
}
ConsumerDBusProxy::NodeStateEvent& ConsumerDBusProxy::getNodeStateEvent() {
    return nodeState_;
}

void ConsumerDBusProxy::GetAppHealthCount(CommonAPI::CallStatus& callStatus, uint32_t& Count) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<uint32_t> >::callMethodWithReply(
        *this,
        "GetAppHealthCount",
        "",
        callStatus
        , Count);
}
std::future<CommonAPI::CallStatus> ConsumerDBusProxy::GetAppHealthCountAsync(GetAppHealthCountAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<uint32_t> >::callMethodAsync(
        *this,
        "GetAppHealthCount",
        "",
        std::move(callback));
}
void ConsumerDBusProxy::LifecycleRequestComplete(const uint32_t& RequestId, const int32_t& Status, CommonAPI::CallStatus& callStatus, int32_t& ErrorCode) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint32_t, int32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t> >::callMethodWithReply(
        *this,
        "LifecycleRequestComplete",
        "ui",
        RequestId, Status, 
        callStatus
        , ErrorCode);
}
std::future<CommonAPI::CallStatus> ConsumerDBusProxy::LifecycleRequestCompleteAsync(const uint32_t& RequestId, const int32_t& Status, LifecycleRequestCompleteAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint32_t, int32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t> >::callMethodAsync(
        *this,
        "LifecycleRequestComplete",
        "ui",
        RequestId, Status, 
        std::move(callback));
}
void ConsumerDBusProxy::GetInterfaceVersion(CommonAPI::CallStatus& callStatus, uint32_t& Version) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<uint32_t> >::callMethodWithReply(
        *this,
        "GetInterfaceVersion",
        "",
        callStatus
        , Version);
}
std::future<CommonAPI::CallStatus> ConsumerDBusProxy::GetInterfaceVersionAsync(GetInterfaceVersionAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<uint32_t> >::callMethodAsync(
        *this,
        "GetInterfaceVersion",
        "",
        std::move(callback));
}
void ConsumerDBusProxy::GetApplicationMode(CommonAPI::CallStatus& callStatus, int32_t& ErrorCode, int32_t& ApplicationModeId) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t, int32_t> >::callMethodWithReply(
        *this,
        "GetApplicationMode",
        "",
        callStatus
        , ErrorCode, ApplicationModeId);
}
std::future<CommonAPI::CallStatus> ConsumerDBusProxy::GetApplicationModeAsync(GetApplicationModeAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t, int32_t> >::callMethodAsync(
        *this,
        "GetApplicationMode",
        "",
        std::move(callback));
}
void ConsumerDBusProxy::UnRegisterSession(const std::string& SessionName, const std::string& SessionOwner, const int32_t& SeatID, CommonAPI::CallStatus& callStatus, int32_t& ErrorCode) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, int32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t> >::callMethodWithReply(
        *this,
        "UnRegisterSession",
        "ssi",
        SessionName, SessionOwner, SeatID, 
        callStatus
        , ErrorCode);
}
std::future<CommonAPI::CallStatus> ConsumerDBusProxy::UnRegisterSessionAsync(const std::string& SessionName, const std::string& SessionOwner, const int32_t& SeatID, UnRegisterSessionAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, int32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t> >::callMethodAsync(
        *this,
        "UnRegisterSession",
        "ssi",
        SessionName, SessionOwner, SeatID, 
        std::move(callback));
}
void ConsumerDBusProxy::RegisterSession(const std::string& SessionName, const std::string& SessionOwner, const int32_t& SeatID, const int32_t& SessionState, CommonAPI::CallStatus& callStatus, int32_t& ErrorCode) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, int32_t, int32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t> >::callMethodWithReply(
        *this,
        "RegisterSession",
        "ssii",
        SessionName, SessionOwner, SeatID, SessionState, 
        callStatus
        , ErrorCode);
}
std::future<CommonAPI::CallStatus> ConsumerDBusProxy::RegisterSessionAsync(const std::string& SessionName, const std::string& SessionOwner, const int32_t& SeatID, const int32_t& SessionState, RegisterSessionAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, int32_t, int32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t> >::callMethodAsync(
        *this,
        "RegisterSession",
        "ssii",
        SessionName, SessionOwner, SeatID, SessionState, 
        std::move(callback));
}
void ConsumerDBusProxy::UnRegisterShutdownClient(const std::string& BusName, const std::string& ObjName, const uint32_t& ShutdownMode, CommonAPI::CallStatus& callStatus, int32_t& ErrorCode) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, uint32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t> >::callMethodWithReply(
        *this,
        "UnRegisterShutdownClient",
        "ssu",
        BusName, ObjName, ShutdownMode, 
        callStatus
        , ErrorCode);
}
std::future<CommonAPI::CallStatus> ConsumerDBusProxy::UnRegisterShutdownClientAsync(const std::string& BusName, const std::string& ObjName, const uint32_t& ShutdownMode, UnRegisterShutdownClientAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, uint32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t> >::callMethodAsync(
        *this,
        "UnRegisterShutdownClient",
        "ssu",
        BusName, ObjName, ShutdownMode, 
        std::move(callback));
}
void ConsumerDBusProxy::RegisterShutdownClient(const std::string& BusName, const std::string& ObjName, const uint32_t& ShutdownMode, const uint32_t& TimeoutMs, CommonAPI::CallStatus& callStatus, int32_t& ErrorCode) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, uint32_t, uint32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t> >::callMethodWithReply(
        *this,
        "RegisterShutdownClient",
        "ssuu",
        BusName, ObjName, ShutdownMode, TimeoutMs, 
        callStatus
        , ErrorCode);
}
std::future<CommonAPI::CallStatus> ConsumerDBusProxy::RegisterShutdownClientAsync(const std::string& BusName, const std::string& ObjName, const uint32_t& ShutdownMode, const uint32_t& TimeoutMs, RegisterShutdownClientAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, uint32_t, uint32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t> >::callMethodAsync(
        *this,
        "RegisterShutdownClient",
        "ssuu",
        BusName, ObjName, ShutdownMode, TimeoutMs, 
        std::move(callback));
}
void ConsumerDBusProxy::GetNodeState(CommonAPI::CallStatus& callStatus, int32_t& ErrorCode, int32_t& NodeStateId) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t, int32_t> >::callMethodWithReply(
        *this,
        "GetNodeState",
        "",
        callStatus
        , ErrorCode, NodeStateId);
}
std::future<CommonAPI::CallStatus> ConsumerDBusProxy::GetNodeStateAsync(GetNodeStateAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t, int32_t> >::callMethodAsync(
        *this,
        "GetNodeState",
        "",
        std::move(callback));
}
void ConsumerDBusProxy::GetSessionState(const std::string& SessionName, const int32_t& SeatID, CommonAPI::CallStatus& callStatus, int32_t& SessionState, int32_t& ErrorCode) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, int32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t, int32_t> >::callMethodWithReply(
        *this,
        "GetSessionState",
        "si",
        SessionName, SeatID, 
        callStatus
        , SessionState, ErrorCode);
}
std::future<CommonAPI::CallStatus> ConsumerDBusProxy::GetSessionStateAsync(const std::string& SessionName, const int32_t& SeatID, GetSessionStateAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, int32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t, int32_t> >::callMethodAsync(
        *this,
        "GetSessionState",
        "si",
        SessionName, SeatID, 
        std::move(callback));
}
void ConsumerDBusProxy::SetSessionState(const std::string& SessionName, const std::string& SessionOwner, const int32_t& SessionState, const int32_t& SeatID, CommonAPI::CallStatus& callStatus, int32_t& ErrorCode) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, int32_t, int32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t> >::callMethodWithReply(
        *this,
        "SetSessionState",
        "ssii",
        SessionName, SessionOwner, SessionState, SeatID, 
        callStatus
        , ErrorCode);
}
std::future<CommonAPI::CallStatus> ConsumerDBusProxy::SetSessionStateAsync(const std::string& SessionName, const std::string& SessionOwner, const int32_t& SessionState, const int32_t& SeatID, SetSessionStateAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, int32_t, int32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<int32_t> >::callMethodAsync(
        *this,
        "SetSessionState",
        "ssii",
        SessionName, SessionOwner, SessionState, SeatID, 
        std::move(callback));
}

void ConsumerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

} // namespace NodeStateManager
} // namespace genivi
} // namespace org

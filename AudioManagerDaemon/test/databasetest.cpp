/**
* Copyright (C) 2011, BMW AG
*
* GeniviAudioMananger AudioManagerDaemon
*
* \file databasetest.cpp
*
* \date 20-Oct-2011 3:42:04 PM
* \author Christian Mueller (christian.ei.mueller@bmw.de)
*
* \section License
* GNU Lesser General Public License, version 2.1, with special exception (GENIVI clause)
* Copyright (C) 2011, BMW AG Christian Mueller  Christian.ei.mueller@bmw.de
*
* This program is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License, version 2.1, as published by the Free Software Foundation.
* This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License, version 2.1, for more details.
* You should have received a copy of the GNU Lesser General Public License, version 2.1, along with this program; if not, see <http://www.gnu.org/licenses/lgpl-2.1.html>.
* Note that the copyright holders assume that the GNU Lesser General Public License, version 2.1, may also be applicable to programs even in cases in which the program is not a library in the technical sense.
* Linking AudioManager statically or dynamically with other modules is making a combined work based on AudioManager. You may license such other modules under the GNU Lesser General Public License, version 2.1. If you do not want to license your linked modules under the GNU Lesser General Public License, version 2.1, you may use the program under the following exception.
* As a special exception, the copyright holders of AudioManager give you permission to combine AudioManager with software programs or libraries that are released under any license unless such a combination is not permitted by the license of such a software program or library. You may copy and distribute such a system following the terms of the GNU Lesser General Public License, version 2.1, including this special exception, for AudioManager and the licenses of the other code concerned.
* Note that people who make modified versions of AudioManager are not obligated to grant this special exception for their modified versions; it is their choice whether to do so. The GNU Lesser General Public License, version 2.1, gives permission to release a modified version without this exception; this exception also makes it possible to release a modified version which carries forward this exception.
*
* THIS CODE HAS BEEN GENERATED BY ENTERPRISE ARCHITECT GENIVI MODEL. PLEASE CHANGE ONLY IN ENTERPRISE ARCHITECT AND GENERATE AGAIN
*/

#include "databasetest.h"

int GetRandomNumber(int nLow, int nHigh)
{
    return (rand() % (nHigh - nLow + 1)) + nLow;
}

bool equalSoundProperty (const am_SoundProperty_s a, const am_SoundProperty_s b)
{
  return (a.type==b.type && a.value == b.value);
}

bool equalMainSoundProperty (const am_MainSoundProperty_s a, const am_MainSoundProperty_s b)
{
  return (a.type==b.type && a.value == b.value);
}

bool equalRoutingElement (const am_RoutingElement_s a,const am_RoutingElement_s b)
{
	return (a.connectionFormat==b.connectionFormat && a.domainID==b.domainID && a.sinkID==b.sinkID && a.sourceID==b.sourceID);
}

bool equalClassProperties (const am_ClassProperty_s a,const am_ClassProperty_s b)
{
	return (a.classProperty==b.classProperty && a.value==b.value);
}

void databaseTest::SetUp()
{
	DLT_REGISTER_APP("Dtest","AudioManagerDeamon");
	DLT_REGISTER_CONTEXT(AudioManager,"Main","Main Context");
	DLT_LOG(AudioManager,DLT_LOG_INFO, DLT_STRING("Database Test started "));
}

void databaseTest::TearDown()
{
	DLT_UNREGISTER_CONTEXT(AudioManager);
}

bool databaseTest::compareSource(std::vector<am_Source_s>::iterator listIterator, const am_Source_s& sourceData)
{
	return (listIterator->available.availability == sourceData.available.availability)
		&& (listIterator->available.availabilityReason == sourceData.available.availabilityReason)
		&& (listIterator->sourceClassID == sourceData.sourceClassID)
		&& (listIterator->domainID == sourceData.domainID)
		&& (listIterator->interruptState == sourceData.interruptState)
		&& (listIterator->visible == sourceData.visible)
		&& (listIterator->name.compare(sourceData.name)==0)
		&& (listIterator->volume == sourceData.volume)
		&& std::equal(listIterator->listConnectionFormats.begin(),listIterator->listConnectionFormats.end(),sourceData.listConnectionFormats.begin())
		&& std::equal(listIterator->listMainSoundProperties.begin(),listIterator->listMainSoundProperties.end(),sourceData.listMainSoundProperties.begin(),equalMainSoundProperty)
		&& std::equal(listIterator->listSoundProperties.begin(),listIterator->listSoundProperties.end(),sourceData.listSoundProperties.begin(),equalSoundProperty);
}

bool databaseTest::compareSink(std::vector<am_Sink_s>::iterator listIterator, const am_Sink_s& sinkData)
{
	return (listIterator->available.availability == sinkData.available.availability)
		&& (listIterator->available.availabilityReason == sinkData.available.availabilityReason)
		&& (listIterator->sinkClassID == sinkData.sinkClassID)
		&& (listIterator->domainID == sinkData.domainID)
		&& (listIterator->mainVolume == sinkData.mainVolume)
		&& (listIterator->muteState == sinkData.muteState)
		&& (listIterator->visible == sinkData.visible)
		&& (listIterator->name.compare(sinkData.name)==0)
		&& (listIterator->volume == sinkData.volume)
		&& std::equal(listIterator->listConnectionFormats.begin(),listIterator->listConnectionFormats.end(),sinkData.listConnectionFormats.begin())
		&& std::equal(listIterator->listMainSoundProperties.begin(),listIterator->listMainSoundProperties.end(),sinkData.listMainSoundProperties.begin(),equalMainSoundProperty)
		&& std::equal(listIterator->listSoundProperties.begin(),listIterator->listSoundProperties.end(),sinkData.listSoundProperties.begin(),equalSoundProperty);
}

bool databaseTest::compareGateway(std::vector<am_Gateway_s>::iterator listIterator, const am_Gateway_s& gatewayData)
{
	return (listIterator->name.compare(gatewayData.name)==0)
		&& (listIterator->sinkID == gatewayData.sinkID)
		&& (listIterator->sourceID == gatewayData.sourceID)
		&& (listIterator->controlDomainID == gatewayData.controlDomainID)
		&& (listIterator->domainSinkID == gatewayData.domainSinkID)
		&& (listIterator->domainSourceID == gatewayData.domainSourceID)
		&& std::equal(listIterator->convertionMatrix.begin(),listIterator->convertionMatrix.end(),gatewayData.convertionMatrix.begin())
		&& std::equal(listIterator->listSourceFormats.begin(),listIterator->listSourceFormats.end(),gatewayData.listSourceFormats.begin())
		&& std::equal(listIterator->listSinkFormats.begin(),listIterator->listSinkFormats.end(),gatewayData.listSinkFormats.begin());
}

bool databaseTest::compareGateway1(const am_Gateway_s gateway1, const am_Gateway_s gatewayData)
{
	return (gateway1.name.compare(gatewayData.name)==0)
		&& (gateway1.sinkID == gatewayData.sinkID)
		&& (gateway1.sourceID == gatewayData.sourceID)
		&& (gateway1.controlDomainID == gatewayData.controlDomainID)
		&& (gateway1.domainSinkID == gatewayData.domainSinkID)
		&& (gateway1.domainSourceID == gatewayData.domainSourceID)
		&& std::equal(gateway1.convertionMatrix.begin(),gateway1.convertionMatrix.end(),gatewayData.convertionMatrix.begin())
		&& std::equal(gateway1.listSourceFormats.begin(),gateway1.listSourceFormats.end(),gatewayData.listSourceFormats.begin())
		&& std::equal(gateway1.listSinkFormats.begin(),gateway1.listSinkFormats.end(),gatewayData.listSinkFormats.begin());
}

bool databaseTest::compareSinkMainSink(std::vector<am_SinkType_s>::iterator listIterator, const std::vector<am_Sink_s>& sinkList)
{
	std::vector<am_Sink_s>::const_iterator sinkListIterator=sinkList.begin();
	for(;sinkListIterator<sinkList.end();++sinkListIterator)
	{
		if (listIterator->sinkID==sinkListIterator->sinkID)
		{
			return (listIterator->name.compare(sinkListIterator->name)==0)
				&& (listIterator->availability.availability==sinkListIterator->available.availability)
				&& (listIterator->availability.availabilityReason==sinkListIterator->available.availabilityReason)
				&& (listIterator->muteState==sinkListIterator->muteState)
				&& (listIterator->volume==sinkListIterator->mainVolume)
				&& (listIterator->sinkClassID==sinkListIterator->sinkClassID);
		}
	}
	return false;
}

bool databaseTest::compareSinkMainSource(std::vector<am_SourceType_s>::iterator listIterator, const std::vector<am_Source_s>& sourceList)
{
	std::vector<am_Source_s>::const_iterator sinkListIterator=sourceList.begin();
	for(;sinkListIterator<sourceList.end();++sinkListIterator)
	{
		if (listIterator->sourceID==sinkListIterator->sourceID)
		{
			return (listIterator->name.compare(sinkListIterator->name)==0)
				&& (listIterator->availability.availability==sinkListIterator->available.availability)
				&& (listIterator->availability.availabilityReason==sinkListIterator->available.availabilityReason)
				&& (listIterator->sourceClassID==sinkListIterator->sourceClassID);
		}
	}
	return false;
}

std::vector<am_ConnectionFormat_e> databaseTest::getStandardConnectionFormatList()
{
	std::vector<am_ConnectionFormat_e> list;
	list.push_back(CF_ANALOG);
	list.push_back(CF_STEREO);
	return list;
}

std::string databaseTest::int2string(int i)
{
	std::stringstream out;
	out << i;
	return out.str();
}

std::vector<am_SoundProperty_s> databaseTest::getStandardSoundPropertyList()
{
	std::vector<am_SoundProperty_s> soundPropertyList;
	am_SoundProperty_s soundProperty;
	soundProperty.type=SP_BASS;
	soundProperty.value=23;
	soundPropertyList.push_back(soundProperty);
	soundProperty.type=SP_MID;
	soundProperty.value=2;
	soundPropertyList.push_back(soundProperty);
	return soundPropertyList;
}

std::vector<am_MainSoundProperty_s> databaseTest::getStandardMainSoundPropertyList()
{
	std::vector<am_MainSoundProperty_s> mainSoundPropertyList;
	am_MainSoundProperty_s mainSoundProperty;
	mainSoundProperty.type=MSP_NAVIGATION_OFFSET;
	mainSoundProperty.value=23;
	mainSoundPropertyList.push_back(mainSoundProperty);
	mainSoundProperty.type=MSP_TEST;
	mainSoundProperty.value=3;
	mainSoundPropertyList.push_back(mainSoundProperty);
	return mainSoundPropertyList;
}

void databaseTest::createSink(
		am_Sink_s& sink,
		am_sinkID_t sinkID=0,
		std::string name="AnySink",
		am_domainID_t domainID=4,
		am_Availablility_e availability=A_AVAILABLE,
		am_AvailabilityReason_e availabilityReason=AR_NEWMEDIA,
		am_sinkClass_t sinkClassID=1,
		std::vector<am_ConnectionFormat_e> connectionFormatList=getStandardConnectionFormatList(),
		std::vector<am_SoundProperty_s> soundPropertyList=getStandardSoundPropertyList(),
		std::vector<am_MainSoundProperty_s> mainSoundPropertyList=getStandardMainSoundPropertyList(),
		am_mainVolume_t mainVolume=12,
		am_MuteState_e muteState=MS_UNMUTED,
		bool visible=true,
		am_volume_t volume=23)
{
	sink.name=name;
	sink.domainID=domainID;
	sink.available.availability=availability;
	sink.available.availabilityReason=availabilityReason;
	sink.sinkClassID=sinkClassID;
	sink.listConnectionFormats=connectionFormatList;
	sink.listSoundProperties=soundPropertyList;
	sink.listMainSoundProperties=mainSoundPropertyList;
	sink.mainVolume=mainVolume;
	sink.muteState=muteState;
	sink.visible=visible;
	sink.volume=volume;
	sink.sinkID=sinkID;
}

void databaseTest::createSource(
		am_Source_s& source,
		am_sourceID_t sourceID=0,
		std::string name="AnySource",
		am_domainID_t domainID=4,
		am_Availablility_e availability=A_AVAILABLE,
		am_AvailabilityReason_e availabilityReason=AR_NEWMEDIA,
		am_sourceClass_t sourceClassID=1,
		std::vector<am_ConnectionFormat_e> connectionFormatList=getStandardConnectionFormatList(),
		std::vector<am_SoundProperty_s> soundPropertyList=getStandardSoundPropertyList(),
		std::vector<am_MainSoundProperty_s> mainSoundPropertyList=getStandardMainSoundPropertyList(),
		am_InterruptState_e interruptState=IS_OFF,
		bool visible=true,
		am_volume_t volume=23,
		am_SourceState_e sourceState=SS_ON)
{
	source.name=name;
	source.domainID=domainID;
	source.available.availability=availability;
	source.available.availabilityReason=availabilityReason;
	source.sourceClassID=sourceClassID;
	source.listConnectionFormats=connectionFormatList;
	source.listSoundProperties=soundPropertyList;
	source.listMainSoundProperties=mainSoundPropertyList;
	source.interruptState=interruptState;
	source.visible=visible;
	source.volume=volume;
	source.sourceID=sourceID;
	source.sourceState=sourceState;
}

void databaseTest::createDomain(
		am_Domain_s & domain,
		am_domainID_t domainID=0,
		std::string name = "AnyDomain",
		std::string nodename = "AnyNode",
		std::string busname = "AnyBusname",
		bool complete= true,
		bool early= true,
		am_DomainState_e state=DS_CONTROLLED)
{

	domain.domainID=domainID;
	domain.name=name;
	domain.nodename=nodename;
	domain.busname=busname;
	domain.complete=complete;
	domain.early=early;
	domain.state=state;
}


void databaseTest::createGateway(
		am_Gateway_s & gateway,
		am_gatewayID_t gatewayID=0,
		std::string name="AnyGateway",
		am_sinkID_t sinkID=1,
		am_sourceID_t sourceID=2,
		am_domainID_t controlDomainID=1,
		am_domainID_t domainSinkID=3,
		am_domainID_t domainSourceID=4,
		std::vector<bool> convertionMatrix=getStandardConvertionMatrix(),
		std::vector<am_ConnectionFormat_e> listSourceFormats=getStandardConnectionFormatList(),
		std::vector<am_ConnectionFormat_e> listSinkFormats=getStandardConnectionFormatList())
{
	gateway.name=name;
	gateway.sinkID= sinkID;
	gateway.sourceID= sourceID;
	gateway.controlDomainID= controlDomainID;
	gateway.domainSinkID= domainSinkID;
	gateway.domainSourceID= domainSourceID;
	gateway.convertionMatrix= convertionMatrix;
	gateway.listSourceFormats=listSourceFormats;
	gateway.listSinkFormats=listSinkFormats;
	gateway.gatewayID=gatewayID;

}

void databaseTest::createConnection(
		am_Connection_s & connection,
		am_connectionID_t connectionID=0,
		am_sinkID_t sinkID=1,
		am_sourceID_t sourceID=2,
		am_timeSync_t delay=-1,
		am_ConnectionFormat_e connectionFormat=CF_ANALOG)
{
	connection.connectionID=connectionID;
	connection.sinkID=sinkID;
	connection.sourceID=sourceID;
	connection.delay=delay;
	connection.connectionFormat=connectionFormat;
}

void databaseTest::createMainConnection(
		am_MainConnection_s & mainConnection,
		am_Route_s route,
		am_timeSync_t delay=-1,
		am_mainConnectionID_t connectionID=0,
		am_ConnectionState_e state=CS_CONNECTED)
{
	mainConnection.connectionID=connectionID;
	mainConnection.connectionState=state;
	mainConnection.route=route;
	mainConnection.delay=delay;
}


std::vector<bool> databaseTest::getStandardConvertionMatrix()
{
	std::vector<bool> convMatrix;
	convMatrix.push_back(true);
	convMatrix.push_back(false);
	convMatrix.push_back(true);
	convMatrix.push_back(false);
	convMatrix.push_back(true);
	convMatrix.push_back(true);
	return convMatrix;
}


void databaseTest::connectionList2RoutingList(std::vector<am_RoutingElement_s> & routingList, const std::vector<am_Connection_s>& connectionList)
{
	am_RoutingElement_s routingElement;
	std::vector<am_Connection_s>::const_iterator cIterator=connectionList.begin();
	for(;cIterator<connectionList.end();++cIterator)
	{
		routingElement.sinkID=cIterator->sinkID;
		routingElement.sourceID=cIterator->sourceID;
		routingElement.connectionFormat=cIterator->connectionFormat;
		routingElement.domainID=4;										//todo: make this test read out the real value
		routingList.push_back(routingElement);
	}
}

void databaseTest::createMainConnectionSetup()
{
	//fill the connection database
	am_Connection_s connection;
	am_Source_s source;
	am_Sink_s sink;
	std::vector<am_Connection_s> connectionList;

	for (uint16_t i=1;i<10;i++)
	{
		am_sinkID_t forgetSink;
		am_sourceID_t forgetSource;
		am_connectionID_t forgetConnection;

		createConnection(connection,0,i,i);
		connectionList.push_back(connection);

		createSink(sink,i,"sink" + int2string(i),4);
		createSource(source,i,"source" + int2string(i),4);

		ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(sink,forgetSink))<< "ERROR: database error";
		ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(source,forgetSource))<< "ERROR: database error";
		ASSERT_EQ(E_OK,pDatabaseHandler.enterConnectionDB(connection,forgetConnection))<< "ERROR: database error";
	}

	//fill the route
	std::vector<am_RoutingElement_s> routingList;
	connectionList2RoutingList(routingList,connectionList);

	//create the Route
	am_Route_s route;
	route.route=routingList;
	route.sinkID=1;
	route.sourceID=1;

	//create a mainConnection
	am_MainConnection_s mainConnection;
	am_mainConnectionID_t mainConnectionID;
	std::vector<am_MainConnection_s> mainConnectionList;
	createMainConnection(mainConnection,route);

	//enter mainconnection in database
	ASSERT_EQ(E_OK,pDatabaseHandler.enterMainConnectionDB(mainConnection,mainConnectionID))<< "ERROR: database error";
	ASSERT_NE(0,mainConnectionID)<< "ERROR: connectionID zero";

	//read out the mainconnections and check if they are equal to the data written.
	ASSERT_EQ(E_OK,pDatabaseHandler.getListMainConnections(mainConnectionList));
	bool equal=true;
	std::vector<am_MainConnection_s>::iterator listIterator=mainConnectionList.begin();
	for(;listIterator<mainConnectionList.end();++listIterator)
	{
		if(listIterator->connectionID==mainConnectionID) {
				equal= equal && (listIterator->connectionState == mainConnection.connectionState)
					&& (listIterator->route.sinkID == mainConnection.route.sinkID)
					&& (listIterator->route.sourceID == mainConnection.route.sourceID)
					&& (listIterator->delay == mainConnection.delay)
					&& (std::equal(listIterator->route.route.begin(),listIterator->route.route.end(),routingList.begin(),equalRoutingElement));
		}
	}
	ASSERT_EQ(true,equal);
}

TEST_F(databaseTest,getSinkClassOfSink)
{
	std::vector<am_SinkClass_s> sinkClassList;
	std::vector<am_ClassProperty_s> classPropertyList;
	am_SinkClass_s sinkClass, returnClass;
	am_ClassProperty_s classProperty;
	am_sinkClass_t sinkClassID;
	am_Sink_s sink;
	am_sinkID_t sinkID;
	classProperty.classProperty=CP_SINK_TYPE;
	classProperty.value=1;
	classPropertyList.push_back(classProperty);
	classProperty.classProperty=CP_SOURCE_TYPE;
	classProperty.value=4;
	classPropertyList.push_back(classProperty);
	sinkClass.name="test";
	sinkClass.sinkClassID=4;
	sinkClass.listClassProperties=classPropertyList;
	createSink(sink);
	sink.sinkClassID=4;

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(sink,sinkID));
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkClassDB(sinkClass,sinkClassID));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSinkClasses(sinkClassList));
	ASSERT_EQ(sinkClassList[0].name,sinkClass.name);
	ASSERT_EQ(sinkClassList[0].sinkClassID,4);
	ASSERT_TRUE(std::equal(sinkClassList[0].listClassProperties.begin(),sinkClassList[0].listClassProperties.end(),classPropertyList.begin(),equalClassProperties));
	ASSERT_EQ(E_OK,pDatabaseHandler.getSinkClassInfoDB(sinkID,returnClass));
	ASSERT_EQ(sinkClassList[0].name,returnClass.name);
	ASSERT_EQ(sinkClassList[0].sinkClassID,returnClass.sinkClassID);
	ASSERT_TRUE(std::equal(sinkClassList[0].listClassProperties.begin(),sinkClassList[0].listClassProperties.end(),returnClass.listClassProperties.begin(),equalClassProperties));
}


TEST_F(databaseTest,getSourceClassOfSource)
{
	std::vector<am_SourceClass_s> sourceClassList;
	std::vector<am_ClassProperty_s> classPropertyList;
	am_SourceClass_s sourceClass, sinkSourceClass;
	am_ClassProperty_s classProperty;
	am_sourceClass_t sourceClassID;
	am_Source_s source;
	am_sourceID_t sourceID;
	classProperty.classProperty=CP_SINK_TYPE;
	classProperty.value=1;
	classPropertyList.push_back(classProperty);
	classProperty.classProperty=CP_SOURCE_TYPE;
	classProperty.value=4;
	classPropertyList.push_back(classProperty);
	sourceClass.name="test";
	sourceClass.sourceClassID=1;
	sourceClass.listClassProperties=classPropertyList;
	createSource(source);

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(source,sourceID));
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceClassDB(sourceClassID,sourceClass));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSourceClasses(sourceClassList));
	ASSERT_EQ(sourceClassList[0].name,sourceClass.name);
	ASSERT_EQ(sourceClassList[0].sourceClassID,1);
	ASSERT_TRUE(std::equal(sourceClassList[0].listClassProperties.begin(),sourceClassList[0].listClassProperties.end(),classPropertyList.begin(),equalClassProperties));
	ASSERT_EQ(E_OK,pDatabaseHandler.getSourceClassInfoDB(sourceID,sinkSourceClass));
	ASSERT_EQ(sourceClassList[0].name,sinkSourceClass.name);
	ASSERT_EQ(sourceClassList[0].sourceClassID,sinkSourceClass.sourceClassID);
	ASSERT_TRUE(std::equal(sourceClassList[0].listClassProperties.begin(),sourceClassList[0].listClassProperties.end(),sinkSourceClass.listClassProperties.begin(),equalClassProperties));
}


TEST_F(databaseTest,removeSourceClass)
{
	std::vector<am_SourceClass_s> sourceClassList;
	std::vector<am_ClassProperty_s> classPropertyList;
	am_SourceClass_s sourceClass;
	am_ClassProperty_s classProperty;
	am_sourceClass_t sourceClassID;
	classProperty.classProperty=CP_SINK_TYPE;
	classProperty.value=1;
	classPropertyList.push_back(classProperty);
	classProperty.classProperty=CP_SOURCE_TYPE;
	classProperty.value=4;
	classPropertyList.push_back(classProperty);
	sourceClass.name="test";
	sourceClass.sourceClassID=3;
	sourceClass.listClassProperties=classPropertyList;

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceClassDB(sourceClassID,sourceClass));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSourceClasses(sourceClassList));
	ASSERT_EQ(sourceClassList[0].name,sourceClass.name);
	ASSERT_EQ(sourceClassList[0].sourceClassID,3);
	ASSERT_TRUE(std::equal(sourceClassList[0].listClassProperties.begin(),sourceClassList[0].listClassProperties.end(),classPropertyList.begin(),equalClassProperties));
	ASSERT_EQ(E_OK,pDatabaseHandler.removeSourceClassDB(3));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSourceClasses(sourceClassList));
	ASSERT_TRUE(sourceClassList.empty());
}

TEST_F(databaseTest,updateSourceClass)
{
	std::vector<am_SourceClass_s> sourceClassList;
	std::vector<am_ClassProperty_s> classPropertyList,changedPropertyList;
	am_SourceClass_s sourceClass, changedClass;
	am_ClassProperty_s classProperty;
	am_sourceClass_t sourceClassID;
	classProperty.classProperty=CP_SINK_TYPE;
	classProperty.value=1;
	classPropertyList.push_back(classProperty);
	classProperty.classProperty=CP_SOURCE_TYPE;
	classProperty.value=4;
	classPropertyList.push_back(classProperty);
	sourceClass.name="test";
	sourceClass.sourceClassID=0;
	sourceClass.listClassProperties=classPropertyList;
	changedClass=sourceClass;
	changedClass.listClassProperties[1].value=6;
	changedPropertyList=changedClass.listClassProperties;
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceClassDB(sourceClassID,sourceClass));
	changedClass.sourceClassID=sourceClassID;
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSourceClasses(sourceClassList));
	ASSERT_EQ(sourceClassList[0].name,sourceClass.name);
	ASSERT_EQ(sourceClassList[0].sourceClassID,100);
	ASSERT_TRUE(std::equal(sourceClassList[0].listClassProperties.begin(),sourceClassList[0].listClassProperties.end(),classPropertyList.begin(),equalClassProperties));
	ASSERT_EQ(E_OK,pDatabaseHandler.changeSourceClassInfoDB(changedClass));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSourceClasses(sourceClassList));
	ASSERT_EQ(sourceClassList[0].name,sourceClass.name);
	ASSERT_EQ(sourceClassList[0].sourceClassID,100);
	ASSERT_TRUE(std::equal(sourceClassList[0].listClassProperties.begin(),sourceClassList[0].listClassProperties.end(),changedPropertyList.begin(),equalClassProperties));
}

TEST_F(databaseTest,enterSourceClass)
{
	std::vector<am_SourceClass_s> sourceClassList;
	std::vector<am_ClassProperty_s> classPropertyList;
	am_SourceClass_s sourceClass;
	am_ClassProperty_s classProperty;
	am_sourceClass_t sourceClassID;
	classProperty.classProperty=CP_SINK_TYPE;
	classProperty.value=1;
	classPropertyList.push_back(classProperty);
	classProperty.classProperty=CP_SOURCE_TYPE;
	classProperty.value=4;
	classPropertyList.push_back(classProperty);
	sourceClass.name="test";
	sourceClass.sourceClassID=0;
	sourceClass.listClassProperties=classPropertyList;

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceClassDB(sourceClassID,sourceClass));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSourceClasses(sourceClassList));
	ASSERT_EQ(sourceClassList[0].name,sourceClass.name);
	ASSERT_EQ(sourceClassList[0].sourceClassID,100);
	ASSERT_TRUE(std::equal(sourceClassList[0].listClassProperties.begin(),sourceClassList[0].listClassProperties.end(),classPropertyList.begin(),equalClassProperties));
}

TEST_F(databaseTest,enterSourceClassStatic)
{
	std::vector<am_SourceClass_s> sourceClassList;
	std::vector<am_ClassProperty_s> classPropertyList;
	am_SourceClass_s sourceClass;
	am_ClassProperty_s classProperty;
	am_sourceClass_t sourceClassID;
	classProperty.classProperty=CP_SINK_TYPE;
	classProperty.value=1;
	classPropertyList.push_back(classProperty);
	classProperty.classProperty=CP_SOURCE_TYPE;
	classProperty.value=4;
	classPropertyList.push_back(classProperty);
	sourceClass.name="test";
	sourceClass.sourceClassID=3;
	sourceClass.listClassProperties=classPropertyList;

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceClassDB(sourceClassID,sourceClass));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSourceClasses(sourceClassList));
	ASSERT_EQ(sourceClassList[0].name,sourceClass.name);
	ASSERT_EQ(sourceClassList[0].sourceClassID,3);
	ASSERT_TRUE(std::equal(sourceClassList[0].listClassProperties.begin(),sourceClassList[0].listClassProperties.end(),classPropertyList.begin(),equalClassProperties));
}


TEST_F(databaseTest,removeSinkClass)
{
	std::vector<am_SinkClass_s> sinkClassList;
	std::vector<am_ClassProperty_s> classPropertyList;
	am_SinkClass_s sinkClass;
	am_ClassProperty_s classProperty;
	am_sinkClass_t sinkClassID;
	classProperty.classProperty=CP_SINK_TYPE;
	classProperty.value=1;
	classPropertyList.push_back(classProperty);
	classProperty.classProperty=CP_SOURCE_TYPE;
	classProperty.value=4;
	classPropertyList.push_back(classProperty);
	sinkClass.name="test";
	sinkClass.sinkClassID=0;
	sinkClass.listClassProperties=classPropertyList;

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkClassDB(sinkClass,sinkClassID));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSinkClasses(sinkClassList));
	ASSERT_EQ(sinkClassList[0].name,sinkClass.name);
	ASSERT_EQ(sinkClassList[0].sinkClassID,100);
	ASSERT_TRUE(std::equal(sinkClassList[0].listClassProperties.begin(),sinkClassList[0].listClassProperties.end(),classPropertyList.begin(),equalClassProperties));
	ASSERT_EQ(E_OK,pDatabaseHandler.removeSinkClassDB(sinkClassID));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSinkClasses(sinkClassList));
	ASSERT_TRUE(sinkClassList.empty());
}

TEST_F(databaseTest,updateSinkClass)
{
	std::vector<am_SinkClass_s> sinkClassList;
	std::vector<am_ClassProperty_s> classPropertyList, changedPropertyList;
	am_SinkClass_s sinkClass, changedClass;
	am_ClassProperty_s classProperty;
	am_sinkClass_t sinkClassID;
	classProperty.classProperty=CP_SINK_TYPE;
	classProperty.value=1;
	classPropertyList.push_back(classProperty);
	classProperty.classProperty=CP_SOURCE_TYPE;
	classProperty.value=4;
	classPropertyList.push_back(classProperty);
	sinkClass.name="test";
	sinkClass.sinkClassID=0;
	sinkClass.listClassProperties=classPropertyList;
	changedClass=sinkClass;
	changedClass.listClassProperties[1].value=6;
	changedPropertyList=changedClass.listClassProperties;
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkClassDB(sinkClass,sinkClassID));
	changedClass.sinkClassID=sinkClassID;
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSinkClasses(sinkClassList));
	ASSERT_EQ(sinkClassList[0].name,sinkClass.name);
	ASSERT_EQ(sinkClassList[0].sinkClassID,100);
	ASSERT_TRUE(std::equal(sinkClassList[0].listClassProperties.begin(),sinkClassList[0].listClassProperties.end(),classPropertyList.begin(),equalClassProperties));
	ASSERT_EQ(E_OK,pDatabaseHandler.changeSinkClassInfoDB(changedClass));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSinkClasses(sinkClassList));
	ASSERT_EQ(sinkClassList[0].name,sinkClass.name);
	ASSERT_EQ(sinkClassList[0].sinkClassID,100);
	ASSERT_TRUE(std::equal(sinkClassList[0].listClassProperties.begin(),sinkClassList[0].listClassProperties.end(),changedPropertyList.begin(),equalClassProperties));
}

TEST_F(databaseTest,enterSinkClass)
{
	std::vector<am_SinkClass_s> sinkClassList;
	std::vector<am_ClassProperty_s> classPropertyList;
	am_SinkClass_s sinkClass;
	am_ClassProperty_s classProperty;
	am_sinkClass_t sinkClassID;
	classProperty.classProperty=CP_SINK_TYPE;
	classProperty.value=1;
	classPropertyList.push_back(classProperty);
	classProperty.classProperty=CP_SOURCE_TYPE;
	classProperty.value=4;
	classPropertyList.push_back(classProperty);
	sinkClass.name="test";
	sinkClass.sinkClassID=0;
	sinkClass.listClassProperties=classPropertyList;

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkClassDB(sinkClass,sinkClassID));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSinkClasses(sinkClassList));
	ASSERT_EQ(sinkClassList[0].name,sinkClass.name);
	ASSERT_EQ(sinkClassList[0].sinkClassID,100);
	ASSERT_TRUE(std::equal(sinkClassList[0].listClassProperties.begin(),sinkClassList[0].listClassProperties.end(),classPropertyList.begin(),equalClassProperties));
}

TEST_F(databaseTest,enterSinkClassStatic)
{
	std::vector<am_SinkClass_s> sinkClassList;
	std::vector<am_ClassProperty_s> classPropertyList;
	am_SinkClass_s sinkClass;
	am_ClassProperty_s classProperty;
	am_sinkClass_t sinkClassID;
	classProperty.classProperty=CP_SINK_TYPE;
	classProperty.value=1;
	classPropertyList.push_back(classProperty);
	classProperty.classProperty=CP_SOURCE_TYPE;
	classProperty.value=4;
	classPropertyList.push_back(classProperty);
	sinkClass.name="test";
	sinkClass.sinkClassID=4;
	sinkClass.listClassProperties=classPropertyList;

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkClassDB(sinkClass,sinkClassID));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSinkClasses(sinkClassList));
	ASSERT_EQ(sinkClassList[0].name,sinkClass.name);
	ASSERT_EQ(sinkClassList[0].sinkClassID,4);
	ASSERT_TRUE(std::equal(sinkClassList[0].listClassProperties.begin(),sinkClassList[0].listClassProperties.end(),classPropertyList.begin(),equalClassProperties));
}


TEST_F(databaseTest, changeSystemProperty)
{
	std::vector<am_SystemProperty_s> listSystemProperties,listReturn;
	am_SystemProperty_s systemProperty;

	systemProperty.type=SYP_TEST;
	systemProperty.value=33;
	listSystemProperties.push_back(systemProperty);
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSystemProperties(listSystemProperties));
	systemProperty.value=444;
	ASSERT_EQ(E_OK,pDatabaseHandler.changeSystemPropertyDB(systemProperty));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSystemProperties(listReturn));
	ASSERT_EQ(listReturn[0].type,systemProperty.type);
	ASSERT_EQ(listReturn[0].value,systemProperty.value);
}

TEST_F(databaseTest, systemProperties)
{
	std::vector<am_SystemProperty_s> listSystemProperties,listReturn;
	am_SystemProperty_s systemProperty;

	systemProperty.type=SYP_TEST;
	systemProperty.value=33;
	listSystemProperties.push_back(systemProperty);

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSystemProperties(listSystemProperties));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSystemProperties(listReturn));
	ASSERT_EQ(listReturn[0].type,systemProperty.type);
	ASSERT_EQ(listReturn[0].value,systemProperty.value);
}


TEST_F(databaseTest,enterSourcesCorrect)
{
	//fill the connection database
	am_Source_s staticSource,firstDynamicSource,secondDynamicSource;
	am_sourceID_t staticSourceID,firstDynamicSourceID,secondDynamicSourceID;
	std::vector<am_Source_s> sourceList;

	createSource(staticSource,4,"Static");

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(staticSource,staticSourceID))<< "ERROR: database error";
	ASSERT_EQ(staticSource.sourceID,staticSourceID)<< "ERROR: ID not the one given in staticSource";

	createSource(firstDynamicSource,0,"firstDynamicSource");

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(firstDynamicSource,firstDynamicSourceID))<< "ERROR: database error";
	ASSERT_EQ(firstDynamicSourceID,DYNAMIC_ID_BOUNDARY)<< "ERROR: ID not the one given in firstDynamicSink";

	createSource(secondDynamicSource,0,"secondDynamicSource");

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(secondDynamicSource,secondDynamicSourceID))<< "ERROR: database error";
	ASSERT_NEAR(secondDynamicSourceID,DYNAMIC_ID_BOUNDARY,10)<< "ERROR: ID not the one given in secondDynamicSink";

	//now read back and check the returns agains the given values
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSources(sourceList))<< "ERROR: database error";
	bool equal=true;

	std::vector<am_Source_s>::iterator listIterator=sourceList.begin();
	for(;listIterator<sourceList.end();++listIterator)
	{
		if(listIterator->sourceID==staticSourceID)
		{
			equal = equal && compareSource(listIterator,staticSource);
		}

		if(listIterator->sourceID==firstDynamicSourceID)
		{
			equal = equal && compareSource(listIterator,firstDynamicSource);
		}

		if(listIterator->sourceID==secondDynamicSourceID)
		{
			equal = equal && compareSource(listIterator,secondDynamicSource);
		}

	}
	ASSERT_EQ(true,equal);
}


TEST_F(databaseTest, changeSourceMainSoundProperty)
{
	std::vector<am_Source_s> listSources;
	am_Source_s source;
	am_sourceID_t sourceID;
	createSource(source);
	am_MainSoundProperty_s property;
	property.type=MSP_NAVIGATION_OFFSET;
	property.value=33;
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(source,sourceID));
	ASSERT_EQ(E_OK,pDatabaseHandler.changeMainSourceSoundPropertyDB(property,sourceID));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSources(listSources));
	std::vector<am_MainSoundProperty_s>::iterator listIterator=listSources[0].listMainSoundProperties.begin();
	for(;listIterator<listSources[0].listMainSoundProperties.end();++listIterator)
	{
		if(listIterator->type==property.type)
		{
			ASSERT_EQ(listIterator->value,property.value);
		}
	}
}

TEST_F(databaseTest, changeSinkMuteState)
{
	std::vector<am_Sink_s> listSinks;
	am_Sink_s sink;
	am_sinkID_t sinkID;
	createSink(sink);
	am_MuteState_e muteState=MS_MUTED;
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(sink,sinkID));
	ASSERT_EQ(E_OK,pDatabaseHandler.changeSinkMuteStateDB(muteState,sinkID));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSinks(listSinks));
	ASSERT_EQ(muteState,listSinks[0].muteState);
}

TEST_F(databaseTest, changeSinkMainSoundProperty)
{
	std::vector<am_Sink_s> listSinks;
	am_Sink_s sink;
	am_sinkID_t sinkID;
	createSink(sink);
	am_MainSoundProperty_s property;
	property.type=MSP_NAVIGATION_OFFSET;
	property.value=33;
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(sink,sinkID));
	ASSERT_EQ(E_OK,pDatabaseHandler.changeMainSinkSoundPropertyDB(property,sinkID));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSinks(listSinks));
	std::vector<am_MainSoundProperty_s>::iterator listIterator=listSinks[0].listMainSoundProperties.begin();
	for(;listIterator<listSinks[0].listMainSoundProperties.end();++listIterator)
	{
		if(listIterator->type==property.type)
		{
			ASSERT_EQ(listIterator->value,property.value);
		}
	}
}

TEST_F(databaseTest, changeDomainState)
{
	std::vector<am_Domain_s> listDomains;
	am_Domain_s domain;
	am_domainID_t domainID;
	createDomain(domain);
	am_DomainState_e newState=DS_INDEPENDENT_STARTUP;
	ASSERT_EQ(E_OK,pDatabaseHandler.enterDomainDB(domain,domainID));
	ASSERT_EQ(E_OK,pDatabaseHandler.changDomainStateDB(newState,domainID));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListDomains(listDomains));
	ASSERT_EQ(newState,listDomains[0].state);
}


TEST_F(databaseTest, changeMainConnectionState)
{
	std::vector<am_MainConnection_s> listMainConnections;
	createMainConnectionSetup();
	ASSERT_EQ(E_OK,pDatabaseHandler.changeMainConnectionStateDB(1,CS_DISCONNECTING))<< "ERROR: database error";
	ASSERT_EQ(E_OK,pDatabaseHandler.getListMainConnections(listMainConnections));
	ASSERT_EQ(CS_DISCONNECTING,listMainConnections[0].connectionState);
}

TEST_F(databaseTest, changeSinkAvailability)
{
	std::vector<am_Sink_s> listSinks;
	am_Sink_s sink;
	am_sinkID_t sinkID;
	createSink(sink);
	am_Availability_s availability;
	availability.availability=A_UNKNOWN;
	availability.availabilityReason=AR_TEMPERATURE;
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(sink,sinkID));
	ASSERT_EQ(E_OK,pDatabaseHandler.changeSinkAvailabilityDB(availability,sinkID));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSinks(listSinks));
	ASSERT_EQ(availability.availability,listSinks[0].available.availability);
	ASSERT_EQ(availability.availabilityReason,listSinks[0].available.availabilityReason);
}

TEST_F(databaseTest, changeSourceAvailability)
{
	std::vector<am_Source_s> listSources;
	am_Source_s source;
	am_sourceID_t sourceID;
	createSource(source);
	am_Availability_s availability;
	availability.availability=A_UNKNOWN;
	availability.availabilityReason=AR_TEMPERATURE;
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(source,sourceID));
	ASSERT_EQ(E_OK,pDatabaseHandler.changeSourceAvailabilityDB(availability,sourceID));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSources(listSources));
	ASSERT_EQ(availability.availability,listSources[0].available.availability);
	ASSERT_EQ(availability.availabilityReason,listSources[0].available.availabilityReason);
}


TEST_F(databaseTest,changeMainConnectionRoute)
{
	std::vector<am_MainConnection_s> originalList;
	std::vector<am_MainConnection_s> newList;
	createMainConnectionSetup();
	//fill the connection database
	am_Connection_s connection;
	am_Source_s source;
	am_Sink_s sink;
	std::vector<am_Connection_s> connectionList;

	for (uint16_t i=1;i<10;i++)
	{
		am_sinkID_t forgetSink;
		am_sourceID_t forgetSource;
		am_connectionID_t forgetConnection;

		createConnection(connection,0,i+20,i+20,-1,CF_ANALOG);
		connectionList.push_back(connection);

		createSink(sink,i+20,"sink" + int2string(i+20),4);
		createSource(source,i+20,"source" + int2string(i+30),4);

		ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(sink,forgetSink))<< "ERROR: database error";
		ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(source,forgetSource))<< "ERROR: database error";
		ASSERT_EQ(E_OK,pDatabaseHandler.enterConnectionDB(connection,forgetConnection))<< "ERROR: database error";
		ASSERT_EQ(E_OK,pDatabaseHandler.getListMainConnections(originalList))<< "ERROR: database error";

	}

	//fill the route
	std::vector<am_RoutingElement_s> routingList;
	connectionList2RoutingList(routingList,connectionList);

	//create the Route
	am_Route_s route;
	route.route=routingList;
	route.sinkID=2;
	route.sourceID=2;

	ASSERT_EQ(E_OK,pDatabaseHandler.changeMainConnectionRouteDB(1,route));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListMainConnections(newList))<< "ERROR: database error";
	ASSERT_TRUE(std::equal(newList[0].route.route.begin(),newList[0].route.route.end(),routingList.begin(),equalRoutingElement));
	ASSERT_FALSE(std::equal(newList[0].route.route.begin(),newList[0].route.route.end(),originalList[0].route.route.begin(),equalRoutingElement));
}

TEST_F(databaseTest,changeMainSinkVolume)
{
	am_Sink_s sink;
	am_sinkID_t sinkID;
	am_mainVolume_t newVol=20;
	std::vector<am_Sink_s> listSinks;
	createSink(sink);
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(sink,sinkID));
	ASSERT_EQ(E_OK,pDatabaseHandler.changeSinkMainVolumeDB(newVol,sinkID));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSinks(listSinks));
	ASSERT_EQ(listSinks[0].mainVolume,newVol);
}

TEST_F(databaseTest,getMainSourceSoundProperties)
{
	am_Source_s source;
	am_sourceID_t sourceID;
	createSource(source);
	std::vector<am_MainSoundProperty_s> mainSoundProperties=source.listMainSoundProperties;
	std::vector<am_MainSoundProperty_s> listMainSoundProperties;
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(source,sourceID));
	ASSERT_EQ(E_OK,pDatabaseHandler.getListMainSourceSoundProperties(sourceID,listMainSoundProperties));
	ASSERT_TRUE(std::equal(mainSoundProperties.begin(),mainSoundProperties.end(),listMainSoundProperties.begin(),equalMainSoundProperty));
}

TEST_F(databaseTest,getMainSinkSoundProperties)
		{
			am_Sink_s sink;
			am_sinkID_t sinkID;
			createSink(sink);
			std::vector<am_MainSoundProperty_s> mainSoundProperties=sink.listMainSoundProperties;
			std::vector<am_MainSoundProperty_s> listMainSoundProperties;
			ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(sink,sinkID));
			ASSERT_EQ(E_OK,pDatabaseHandler.getListMainSinkSoundProperties(sinkID,listMainSoundProperties));
			ASSERT_TRUE(std::equal(mainSoundProperties.begin(),mainSoundProperties.end(),listMainSoundProperties.begin(),equalMainSoundProperty));
		}

TEST_F(databaseTest,getMainSources)
{
	am_Source_s source, source1,source2;
	am_sourceID_t sourceID;
	createSource(source);
	createSource(source1);
	createSource(source2);
	bool equal=true;
	source1.visible=false;
	std::vector<am_SourceType_s> listMainSources;
	std::vector<am_Source_s> listSources;
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(source,sourceID));
	source.sourceID=sourceID;
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(source1,sourceID));
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(source2,sourceID));
	source2.sourceID=sourceID;
	ASSERT_EQ(E_OK,pDatabaseHandler.getListMainSources(listMainSources));
	listSources.push_back(source);
	listSources.push_back(source2);
	std::vector<am_SourceType_s>::iterator listIterator=listMainSources.begin();
	for(;listIterator<listMainSources.end();++listIterator)
	{
		equal = equal && compareSinkMainSource(listIterator,listSources);
	}
	ASSERT_TRUE(equal);
}

TEST_F(databaseTest,getMainSinks)
{
	am_Sink_s sink, sink1,sink2;
	am_sinkID_t sinkID;
	createSink(sink);
	createSink(sink1);
	createSink(sink2);
	bool equal=true;
	sink1.visible=false;
	std::vector<am_SinkType_s> listMainSinks;
	std::vector<am_Sink_s> listSinks;
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(sink,sinkID));
	sink.sinkID=sinkID;
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(sink1,sinkID));
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(sink2,sinkID));
	sink2.sinkID=sinkID;
	ASSERT_EQ(E_OK,pDatabaseHandler.getListMainSinks(listMainSinks));
	listSinks.push_back(sink);
	listSinks.push_back(sink2);
	std::vector<am_SinkType_s>::iterator listIterator=listMainSinks.begin();
	for(;listIterator<listMainSinks.end();++listIterator)
	{
		equal = equal && compareSinkMainSink(listIterator,listSinks);
	}
	ASSERT_TRUE(equal);
}

TEST_F(databaseTest,getVisibleMainConnections)
{
	createMainConnectionSetup();
	am_MainConnection_s mainConnection;
	am_Route_s route;
	createMainConnection(mainConnection,route);
	std::vector<am_MainConnectionType_s> visibleMainConnection;
	ASSERT_EQ(E_OK,pDatabaseHandler.getListVisibleMainConnections(visibleMainConnection));
	ASSERT_TRUE(1==visibleMainConnection[0].mainConnectionID);
	ASSERT_TRUE(mainConnection.connectionState==visibleMainConnection[0].connectionState);
	ASSERT_TRUE(mainConnection.delay==visibleMainConnection[0].delay);
	ASSERT_TRUE(1==visibleMainConnection[0].sinkID);
	ASSERT_TRUE(1==visibleMainConnection[0].sourceID);
}

TEST_F(databaseTest,getListSourcesOfDomain)
{
	am_Source_s source, source2;
	am_Domain_s domain;
	am_domainID_t domainID;
	am_sourceID_t sourceID;
	std::vector<am_sourceID_t> sourceList,sourceCheckList;
	createSource(source,1,"testSink",1);
	createSource(source2,0,"testSink",5);
	createDomain(domain);
	sourceCheckList.push_back(1);//sink.sinkID);
	ASSERT_EQ(E_OK,pDatabaseHandler.enterDomainDB(domain,domainID));
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(source,sourceID))<< "ERROR: database error";
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(source2,sourceID))<< "ERROR: database error";
	ASSERT_EQ(E_NON_EXISTENT,pDatabaseHandler.getListSourcesOfDomain(2,sourceList))<< "ERROR: database error";
	ASSERT_TRUE(sourceList.empty());
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSourcesOfDomain(1,sourceList))<< "ERROR: database error";
	ASSERT_TRUE(std::equal(sourceList.begin(),sourceList.end(),sourceCheckList.begin()) && !sourceList.empty());
}

TEST_F(databaseTest,getListSinksOfDomain)
{
	am_Sink_s sink, sink2;
	am_Domain_s domain;
	am_domainID_t domainID;
	am_sinkID_t sinkID;
	std::vector<am_sinkID_t> sinkList,sinkCheckList;
	createSink(sink,1,"testSink",1);
	createSink(sink2,0,"testSink",5);
	createDomain(domain);
	sinkCheckList.push_back(1);//sink.sinkID);
	ASSERT_EQ(E_OK,pDatabaseHandler.enterDomainDB(domain,domainID));
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(sink,sinkID))<< "ERROR: database error";
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(sink2,sinkID))<< "ERROR: database error";
	ASSERT_EQ(E_NON_EXISTENT,pDatabaseHandler.getListSinksOfDomain(2,sinkList))<< "ERROR: database error";
	ASSERT_TRUE(sinkList.empty());
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSinksOfDomain(1,sinkList))<< "ERROR: database error";
	ASSERT_TRUE(std::equal(sinkList.begin(),sinkList.end(),sinkCheckList.begin()) && !sinkList.empty());
}

TEST_F(databaseTest,getListGatewaysOfDomain)
{
	am_Gateway_s gateway, gateway2;
	am_gatewayID_t gatewayID;
	am_domainID_t domainID;
	am_Domain_s domain;
	std::vector<am_gatewayID_t> gatewayList,gatewayCheckList;
	createGateway(gateway,1,"testGateway",1,1,1);
	createGateway(gateway2,0,"testGateway2",1,1,4);
	createDomain(domain);
	gatewayCheckList.push_back(gateway.gatewayID);
	ASSERT_EQ(E_OK,pDatabaseHandler.enterDomainDB(domain,domainID));
	ASSERT_EQ(E_OK,pDatabaseHandler.enterGatewayDB(gateway,gatewayID))<< "ERROR: database error";
	ASSERT_EQ(E_OK,pDatabaseHandler.enterGatewayDB(gateway2,gatewayID))<< "ERROR: database error";
	ASSERT_EQ(E_NON_EXISTENT,pDatabaseHandler.getListGatewaysOfDomain(2,gatewayList))<< "ERROR: database error";
	ASSERT_TRUE(gatewayList.empty());
	ASSERT_EQ(E_OK,pDatabaseHandler.getListGatewaysOfDomain(1,gatewayList))<< "ERROR: database error";
	ASSERT_TRUE(std::equal(gatewayList.begin(),gatewayList.end(),gatewayCheckList.begin()) && !gatewayList.empty());
}

TEST_F(databaseTest,removeDomain)
{
	am_Domain_s domain;
	am_domainID_t domainID;
	std::vector<am_Domain_s> listDomains;
	createDomain(domain);
	ASSERT_EQ(E_OK,pDatabaseHandler.enterDomainDB(domain,domainID))<< "ERROR: database error";
	ASSERT_EQ(E_OK,pDatabaseHandler.removeDomainDB(domainID))<< "ERROR: database error";
	ASSERT_EQ(E_OK,pDatabaseHandler.getListDomains(listDomains))<< "ERROR: database error";
	ASSERT_TRUE(listDomains.empty());
}

TEST_F(databaseTest,removeGateway)
{
	am_Gateway_s gateway;
	am_gatewayID_t gatewayID;
	std::vector<am_Gateway_s> listGateways;
	createGateway(gateway);
	ASSERT_EQ(E_OK,pDatabaseHandler.enterGatewayDB(gateway,gatewayID))<< "ERROR: database error";
	ASSERT_EQ(E_OK,pDatabaseHandler.removeGatewayDB(gatewayID))<< "ERROR: database error";
	ASSERT_EQ(E_OK,pDatabaseHandler.getListGateways(listGateways))<< "ERROR: database error";
	ASSERT_TRUE(listGateways.empty());
}

TEST_F(databaseTest,removeSink)
{
	am_Sink_s sink;
	am_sinkID_t sinkID;
	std::vector<am_Sink_s> listSinks;
	createSink(sink);
	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(sink,sinkID))<< "ERROR: database error";
	ASSERT_EQ(E_OK,pDatabaseHandler.removeSinkDB(sinkID))<< "ERROR: database error";
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSinks(listSinks))<< "ERROR: database error";
	ASSERT_TRUE(listSinks.empty());
}

TEST_F(databaseTest,removeSource)
{
	//fill the connection database
	am_Source_s source;
	am_sourceID_t sourceID;
	std::vector<am_Source_s> listSources;
	createSource(source);

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(source,sourceID))<< "ERROR: database error";
	ASSERT_EQ(E_OK,pDatabaseHandler.removeSourceDB(sourceID))<< "ERROR: database error";
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSources(listSources))<< "ERROR: database error";
	ASSERT_TRUE(listSources.empty());
}

TEST_F(databaseTest, removeMainConnection)
{
	createMainConnectionSetup();
	ASSERT_EQ(E_OK,pDatabaseHandler.removeMainConnectionDB(1))<< "ERROR: database error";
}

TEST_F(databaseTest,removeNonexistentMainConnectionFail)
{
	ASSERT_EQ(E_NON_EXISTENT,pDatabaseHandler.removeMainConnectionDB(34))<< "ERROR: database error";
}

TEST_F(databaseTest,removeNonexistentSource)
{
	ASSERT_EQ(E_NON_EXISTENT,pDatabaseHandler.removeSourceDB(3))<< "ERROR: database error";
}

TEST_F(databaseTest,removeNonexistentSink)
{
	ASSERT_EQ(E_NON_EXISTENT,pDatabaseHandler.removeSinkDB(2))<< "ERROR: database error";
}

TEST_F(databaseTest,removeNonexistentGateway)
{
	ASSERT_EQ(E_NON_EXISTENT,pDatabaseHandler.removeGatewayDB(12))<< "ERROR: database error";
}

TEST_F(databaseTest,registerGatewayCorrect)
{
	//initialize gateway
	std::vector<am_Gateway_s> returnList;
	am_Gateway_s gateway, gateway1, gateway2;
	am_gatewayID_t gatewayID=0,gatewayID1=0,gatewayID2=0;

	createGateway(gateway,0,"Gateway1");
	createGateway(gateway1,20,"Gateway2");
	createGateway(gateway2,0,"Gateway3");

	ASSERT_EQ(E_OK,pDatabaseHandler.enterGatewayDB(gateway,gatewayID))<< "ERROR: database error";
	ASSERT_EQ(100,gatewayID)<< "ERROR: domainID zero";

	ASSERT_EQ(E_OK,pDatabaseHandler.enterGatewayDB(gateway1,gatewayID1))<< "ERROR: database error";
	ASSERT_EQ(gateway1.gatewayID,gatewayID1)<< "ERROR: domainID zero";

	ASSERT_EQ(E_OK,pDatabaseHandler.enterGatewayDB(gateway2,gatewayID2))<< "ERROR: database error";
	ASSERT_EQ(101,gatewayID2)<< "ERROR: domainID zero";

	//now check if we read out the correct values
	ASSERT_EQ(E_OK,pDatabaseHandler.getListGateways(returnList));
	bool equal=true;
	std::vector<am_Gateway_s>::iterator listIterator=returnList.begin();

	for(;listIterator<returnList.end();++listIterator)
	{
		if(listIterator->gatewayID==gatewayID)
		{
			equal= equal && compareGateway(listIterator,gateway);
		}

		if(listIterator->gatewayID==gatewayID1)
		{
			equal= equal && compareGateway(listIterator,gateway1);
		}

		if(listIterator->gatewayID==gatewayID2)
		{
			equal= equal && compareGateway(listIterator,gateway2);
		}
	}

	ASSERT_EQ(true,equal);
}

TEST_F(databaseTest,getGatewayInfo)
{
	//initialize gateway
	std::vector<am_Gateway_s> returnList;
	am_Gateway_s gateway, gateway1, gateway2;
	am_gatewayID_t gatewayID=0,gatewayID1=0,gatewayID2=0;

	createGateway(gateway,0,"Gateway1");
	createGateway(gateway1,20,"Gateway2");
	createGateway(gateway2,0,"Gateway3");

	ASSERT_EQ(E_OK,pDatabaseHandler.enterGatewayDB(gateway,gatewayID))<< "ERROR: database error";
	ASSERT_EQ(100,gatewayID)<< "ERROR: domainID zero";

	ASSERT_EQ(E_OK,pDatabaseHandler.enterGatewayDB(gateway1,gatewayID1))<< "ERROR: database error";
	ASSERT_EQ(gateway1.gatewayID,gatewayID1)<< "ERROR: domainID zero";

	ASSERT_EQ(E_OK,pDatabaseHandler.enterGatewayDB(gateway2,gatewayID2))<< "ERROR: database error";
	ASSERT_EQ(101,gatewayID2)<< "ERROR: domainID zero";

	//now check if we read out the correct values
	ASSERT_EQ(E_OK,pDatabaseHandler.getListGateways(returnList));
	bool equal=true;
	std::vector<am_Gateway_s>::iterator listIterator=returnList.begin();

	for(;listIterator<returnList.end();++listIterator)
	{
		if(listIterator->gatewayID==gatewayID)
		{
			equal= equal && compareGateway(listIterator,gateway);
		}

		if(listIterator->gatewayID==gatewayID1)
		{
			equal= equal && compareGateway(listIterator,gateway1);
		}

		if(listIterator->gatewayID==gatewayID2)
		{
			equal= equal && compareGateway(listIterator,gateway2);
		}
	}

	ASSERT_EQ(true,equal);

	am_Gateway_s gatewayInfo;
	ASSERT_EQ(E_OK,pDatabaseHandler.getGatewayInfoDB(20,gatewayInfo));
	ASSERT_TRUE(compareGateway1(gateway1,gatewayInfo));

}

TEST_F(databaseTest,enterSinkThatAlreadyExistFail)
{
	//fill the connection database
	am_Sink_s staticSink,SecondSink;
	am_sinkID_t staticSinkID,SecondSinkID;

	createSink(staticSink,43,"Static");

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(staticSink,staticSinkID))<< "ERROR: database error";
	ASSERT_EQ(staticSink.sinkID,staticSinkID)<< "ERROR: ID not the one given in staticSink";

	createSink(SecondSink,43,"secondStatic");

	ASSERT_EQ(E_ALREADY_EXISTS,pDatabaseHandler.enterSinkDB(SecondSink,SecondSinkID))<< "ERROR: database error";
}

TEST_F(databaseTest,enterSourcesThatAlreadyExistFail)
{
	//fill the connection database
	am_Source_s staticSource,SecondSource;
	am_sourceID_t staticSourceID,SecondSourceID;
	createSource(staticSource,4,"FirstSource");

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSourceDB(staticSource,staticSourceID))<< "ERROR: database error";
	ASSERT_EQ(staticSource.sourceID,staticSourceID)<< "ERROR: ID not the one given in staticSource";

	createSource(SecondSource,4,"SecondSource");

	ASSERT_EQ(E_ALREADY_EXISTS,pDatabaseHandler.enterSourceDB(SecondSource,SecondSourceID))<< "ERROR: database error";
}

TEST_F(databaseTest,registerDomainCorrect)
{
	//initialize domain
	std::vector<am_Domain_s> returnList;
	am_Domain_s domain;
	am_domainID_t domainID=0;
	createDomain(domain);

	ASSERT_EQ(E_OK,pDatabaseHandler.enterDomainDB(domain,domainID))<< "ERROR: database error";
	ASSERT_NE(0,domainID)<< "ERROR: domainID zero";

	//now check if we read out the correct values
	ASSERT_EQ(E_OK,pDatabaseHandler.getListDomains(returnList));
	bool equal=true;
	std::vector<am_Domain_s>::iterator listIterator=returnList.begin();
	for(;listIterator<returnList.end();++listIterator)
	{
		if(listIterator->domainID==domainID) {
				equal= equal && (listIterator->name.compare(domain.name)==0)
					&& (listIterator->busname.compare(domain.busname)==0)
					&& (listIterator->complete == domain.complete)
					&& (listIterator->early == domain.early)
					&& (listIterator->state == domain.state);
		}
	}
	ASSERT_EQ(true,equal);
}

TEST_F(databaseTest,registerDomainFailonID0)
{
	am_Domain_s domain;
	am_domainID_t domainID=5;
	createDomain(domain,1);
	ASSERT_DEATH(pDatabaseHandler.enterDomainDB(domain,domainID),"Assertion `domainData.domainID==0'");
}

TEST_F(databaseTest,registerConnectionCorrect)
{
	am_Connection_s connection;
	am_connectionID_t connectionID;
	std::vector<am_Connection_s> returnList;
	createConnection(connection);

	ASSERT_EQ(E_OK,pDatabaseHandler.enterConnectionDB(connection,connectionID))<< "ERROR: database error";;
	ASSERT_NE(0,connectionID)<< "ERROR: connectionID zero";

	//now check if we read out the correct values
	ASSERT_EQ(E_OK,pDatabaseHandler.getListConnections(returnList));
	bool equal=false;
	std::vector<am_Connection_s>::iterator listIterator=returnList.begin();
	for(;listIterator<returnList.end();++listIterator)
	{
		if(listIterator->connectionID==connectionID) {
				equal= (listIterator->sourceID == connection.sourceID)
					&& (listIterator->sinkID == connection.sinkID)
					&& (listIterator->delay == connection.delay)
					&& (listIterator->connectionFormat = connection.connectionFormat);
		}
	}
	ASSERT_EQ(true,equal);
}

TEST_F(databaseTest,enterMainConnectionCorrect)
{
	createMainConnectionSetup();
}

TEST_F(databaseTest,enterSinksCorrect)
{
	//fill the connection database
	am_Sink_s staticSink,firstDynamicSink,secondDynamicSink;
	am_sinkID_t staticSinkID,firstDynamicSinkID,secondDynamicSinkID;
	std::vector<am_Sink_s> sinkList;

	createSink(staticSink,4,"Static");

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(staticSink,staticSinkID))<< "ERROR: database error";
	ASSERT_EQ(staticSink.sinkID,staticSinkID)<< "ERROR: ID not the one given in staticSink";

	createSink(firstDynamicSink,0,"firstDynamicSink");

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(firstDynamicSink,firstDynamicSinkID))<< "ERROR: database error";
	ASSERT_EQ(firstDynamicSinkID,DYNAMIC_ID_BOUNDARY)<< "ERROR: ID not the one given in firstDynamicSink";

	createSink(secondDynamicSink,0,"secondDynamicSink");

	ASSERT_EQ(E_OK,pDatabaseHandler.enterSinkDB(secondDynamicSink,secondDynamicSinkID))<< "ERROR: database error";
	ASSERT_NEAR(secondDynamicSinkID,DYNAMIC_ID_BOUNDARY,10)<< "ERROR: ID not the one given in secondDynamicSink";

	//now read back and check the returns agains the given values
	ASSERT_EQ(E_OK,pDatabaseHandler.getListSinks(sinkList))<< "ERROR: database error";
	bool equal=true;

	std::vector<am_Sink_s>::iterator listIterator=sinkList.begin();
	for(;listIterator<sinkList.end();++listIterator)
	{
		if(listIterator->sinkID==staticSinkID)
		{
			equal = equal && compareSink(listIterator,staticSink);
		}

		if(listIterator->sinkID==firstDynamicSinkID)
		{
			equal = equal && compareSink(listIterator,firstDynamicSink);
		}

		if(listIterator->sinkID==secondDynamicSinkID)
		{
			equal = equal && compareSink(listIterator,secondDynamicSink);
		}
	}
	ASSERT_EQ(true,equal);
}


int main(int argc, char **argv)
{
	::testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}










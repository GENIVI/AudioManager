 /*
 * This file was generated by the CommonAPI Generators.
 *
  * Copyright (C) 2012, BMW AG
  *
  * This file is part of GENIVI Project AudioManager.
  *
  * Contributions are licensed to the GENIVI Alliance under one or more
  * Contribution License Agreements.
  *
  * \copyright
  * This Source Code Form is subject to the terms of the
  * Mozilla Public License, v. 2.0. If a  copy of the MPL was not distributed with
  * this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  *
  *
  * \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
  *
  * For further information see http://www.genivi.org/.
 */
 #ifndef ORG_GENIVI_NODESTATEMANAGER_LIFECYCLECONSUMER_Life_Cycle_Consumer_PROXY_BASE_H_
 #define ORG_GENIVI_NODESTATEMANAGER_LIFECYCLECONSUMER_Life_Cycle_Consumer_PROXY_BASE_H_
 
 #include "LifeCycleConsumer.h"
 
 
 
 #define COMMONAPI_INTERNAL_COMPILATION
 

 #include <CommonAPI/Proxy.h>
 #include <functional>
 #include <future>
 
 #undef COMMONAPI_INTERNAL_COMPILATION

 namespace org {
 namespace genivi {
 namespace NodeStateManager {
 namespace LifeCycleConsumer {

 class LifeCycleConsumerProxyBase: virtual public CommonAPI::Proxy {
  public:
     typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> LifecycleRequestAsyncCallback;




     virtual void LifecycleRequest(const uint32_t& Request, const uint32_t& RequestId, CommonAPI::CallStatus& callStatus, int32_t& ErrorCode) = 0;
     virtual std::future<CommonAPI::CallStatus> LifecycleRequestAsync(const uint32_t& Request, const uint32_t& RequestId, LifecycleRequestAsyncCallback callback) = 0;
 };

 } // namespace LifeCycleConsumer
 } // namespace NodeStateManager
 } // namespace genivi
 } // namespace org

 #endif // ORG_GENIVI_NODESTATEMANAGER_LIFECYCLECONSUMER_Life_Cycle_Consumer_PROXY_BASE_H_

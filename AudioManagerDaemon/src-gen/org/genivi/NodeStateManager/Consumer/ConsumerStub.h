/*
* This file was generated by the CommonAPI Generators.
*
 * Copyright (C) 2012, BMW AG
 *
 * This file is part of GENIVI Project AudioManager.
 *
 * Contributions are licensed to the GENIVI Alliance under one or more
 * Contribution License Agreements.
 *
 * \copyright
 * This Source Code Form is subject to the terms of the
 * Mozilla Public License, v. 2.0. If a  copy of the MPL was not distributed with
 * this file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
 *
 * For further information see http://www.genivi.org/.
*/
#ifndef ORG_GENIVI_NODESTATEMANAGER_CONSUMER_Consumer_STUB_H_
#define ORG_GENIVI_NODESTATEMANAGER_CONSUMER_Consumer_STUB_H_




#include "Consumer.h"

#define COMMONAPI_INTERNAL_COMPILATION


#include <CommonAPI/Stub.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace NodeStateManager {
namespace Consumer {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Consumer. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class ConsumerStubAdapter: virtual public CommonAPI::StubAdapter, public Consumer {
 public:
    ///Notifies all remote listeners about a change of value of the attribute RestartReason.
    virtual void fireRestartReasonAttributeChanged(const int32_t& RestartReason) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ShutdownReason.
    virtual void fireShutdownReasonAttributeChanged(const int32_t& ShutdownReason) = 0;
    ///Notifies all remote listeners about a change of value of the attribute WakeUpReason.
    virtual void fireWakeUpReasonAttributeChanged(const int32_t& WakeUpReason) = 0;
    ///Notifies all remote listeners about a change of value of the attribute BootMode.
    virtual void fireBootModeAttributeChanged(const int32_t& BootMode) = 0;

    /**
     * Sends a broadcast event for NodeState. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNodeStateEvent(const int32_t& NodeState) = 0;
    /**
     * Sends a broadcast event for NodeApplicationMode. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNodeApplicationModeEvent(const int32_t& ApplicationModeId) = 0;
    /**
     * Sends a broadcast event for SessionStateChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSessionStateChangedEvent(const std::string& SessionStateName, const int32_t& SeatID, const int32_t& SessionState) = 0;
};


/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Consumer.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ConsumerStubRemoteEvent {
 public:
    virtual ~ConsumerStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute RestartReason.
    virtual bool onRemoteSetRestartReasonAttribute(int32_t RestartReason) = 0;
    /// Action callback for remote set requests on the attribute RestartReason.
    virtual void onRemoteRestartReasonAttributeChanged() = 0;

    /// Verification callback for remote set requests on the attribute ShutdownReason.
    virtual bool onRemoteSetShutdownReasonAttribute(int32_t ShutdownReason) = 0;
    /// Action callback for remote set requests on the attribute ShutdownReason.
    virtual void onRemoteShutdownReasonAttributeChanged() = 0;

    /// Verification callback for remote set requests on the attribute WakeUpReason.
    virtual bool onRemoteSetWakeUpReasonAttribute(int32_t WakeUpReason) = 0;
    /// Action callback for remote set requests on the attribute WakeUpReason.
    virtual void onRemoteWakeUpReasonAttributeChanged() = 0;

    /// Verification callback for remote set requests on the attribute BootMode.
    virtual bool onRemoteSetBootModeAttribute(int32_t BootMode) = 0;
    /// Action callback for remote set requests on the attribute BootMode.
    virtual void onRemoteBootModeAttributeChanged() = 0;

};


/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Consumer to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ConsumerStub : public CommonAPI::Stub<ConsumerStubAdapter , ConsumerStubRemoteEvent> {
 public:
    virtual ~ConsumerStub() { }

    /// Provides getter access to the attribute RestartReason.
    virtual const int32_t& getRestartReasonAttribute() = 0;
    /// Provides getter access to the attribute ShutdownReason.
    virtual const int32_t& getShutdownReasonAttribute() = 0;
    /// Provides getter access to the attribute WakeUpReason.
    virtual const int32_t& getWakeUpReasonAttribute() = 0;
    /// Provides getter access to the attribute BootMode.
    virtual const int32_t& getBootModeAttribute() = 0;

    /// This is the method that will be called on remote calls on the method GetNodeState.
    virtual void GetNodeState(int32_t& NodeStateId, int32_t& ErrorCode) = 0;
    /// This is the method that will be called on remote calls on the method SetSessionState.
    virtual void SetSessionState(std::string SessionName, std::string SessionOwner, int32_t SeatID, int32_t SessionState, int32_t& ErrorCode) = 0;
    /// This is the method that will be called on remote calls on the method GetSessionState.
    virtual void GetSessionState(std::string SessionName, int32_t SeatID, int32_t& SessionState, int32_t& ErrorCode) = 0;
    /// This is the method that will be called on remote calls on the method GetApplicationMode.
    virtual void GetApplicationMode(int32_t& ApplicationModeId, int32_t& ErrorCode) = 0;
    /// This is the method that will be called on remote calls on the method RegisterShutdownClient.
    virtual void RegisterShutdownClient(std::string BusName, std::string ObjName, uint32_t ShutdownMode, uint32_t TimeoutMs, int32_t& ErrorCode) = 0;
    /// This is the method that will be called on remote calls on the method UnRegisterShutdownClient.
    virtual void UnRegisterShutdownClient(std::string BusName, std::string ObjName, uint32_t ShutdownMode, int32_t& ErrorCode) = 0;
    /// This is the method that will be called on remote calls on the method RegisterSession.
    virtual void RegisterSession(std::string SessionName, std::string SessionOwner, int32_t SeatID, int32_t SessionState, int32_t& ErrorCode) = 0;
    /// This is the method that will be called on remote calls on the method UnRegisterSession.
    virtual void UnRegisterSession(std::string SessionName, std::string SessionOwner, int32_t SeatID, int32_t& ErrorCode) = 0;
    /// This is the method that will be called on remote calls on the method GetAppHealthCount.
    virtual void GetAppHealthCount(uint32_t& Count) = 0;
    /// This is the method that will be called on remote calls on the method GetInterfaceVersion.
    virtual void GetInterfaceVersion(uint32_t& Version) = 0;
    /// This is the method that will be called on remote calls on the method LifecycleRequestComplete.
    virtual void LifecycleRequestComplete(uint32_t RequestId, int32_t Status, int32_t& ErrorCode) = 0;
    
    /// Sends a broadcast event for NodeState.
    virtual void fireNodeStateEvent(const int32_t& NodeState) = 0;
    /// Sends a broadcast event for NodeApplicationMode.
    virtual void fireNodeApplicationModeEvent(const int32_t& ApplicationModeId) = 0;
    /// Sends a broadcast event for SessionStateChanged.
    virtual void fireSessionStateChangedEvent(const std::string& SessionStateName, const int32_t& SeatID, const int32_t& SessionState) = 0;
};

} // namespace Consumer
} // namespace NodeStateManager
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_NODESTATEMANAGER_CONSUMER_Consumer_STUB_H_

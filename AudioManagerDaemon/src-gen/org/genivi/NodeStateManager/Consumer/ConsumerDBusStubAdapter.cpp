/*
* This file was generated by the CommonAPI Generators.
*
 * Copyright (C) 2012, BMW AG
 *
 * This file is part of GENIVI Project AudioManager.
 *
 * Contributions are licensed to the GENIVI Alliance under one or more
 * Contribution License Agreements.
 *
 * \copyright
 * This Source Code Form is subject to the terms of the
 * Mozilla Public License, v. 2.0. If a  copy of the MPL was not distributed with
 * this file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * \author Aleksandar Donchev, aleksander.donchev@partner.bmw.de BMW 2013
 *
 * For further information see http://www.genivi.org/.
*/
#include "ConsumerDBusStubAdapter.h"
#include <org/genivi/NodeStateManager/Consumer/Consumer.h>

namespace org {
namespace genivi {
namespace NodeStateManager {
namespace Consumer {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createConsumerDBusStubAdapter(
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<ConsumerDBusStubAdapter>(commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

__attribute__((constructor)) void registerConsumerDBusStubAdapter(void) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(Consumer::getInterfaceId(),
                                                               &createConsumerDBusStubAdapter);
}

ConsumerDBusStubAdapter::ConsumerDBusStubAdapter(
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        ConsumerDBusStubAdapterHelper(commonApiAddress, dbusInterfaceName, dbusBusName, dbusObjectPath, dbusConnection, std::dynamic_pointer_cast<ConsumerStub>(stub)) {
}

const char* ConsumerDBusStubAdapter::getMethodsDBusIntrospectionXmlData() const {
    return
        "<method name=\"getRestartReasonAttribute\">\n"
        	"<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setRestartReasonAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onRestartReasonAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"getShutdownReasonAttribute\">\n"
        	"<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setShutdownReasonAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onShutdownReasonAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"getWakeUpReasonAttribute\">\n"
        	"<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setWakeUpReasonAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onWakeUpReasonAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"getBootModeAttribute\">\n"
        	"<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setBootModeAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onBootModeAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<signal name=\"NodeState\">\n"
            "<arg name=\"NodeState\" type=\"i\" />\n"
        "</signal>\n"
        "<signal name=\"NodeApplicationMode\">\n"
            "<arg name=\"ApplicationModeId\" type=\"i\" />\n"
        "</signal>\n"
        "<signal name=\"SessionStateChanged\">\n"
            "<arg name=\"SessionStateName\" type=\"s\" />\n"
            "<arg name=\"SeatID\" type=\"i\" />\n"
            "<arg name=\"SessionState\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"GetNodeState\">\n"
            "<arg name=\"NodeStateId\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"ErrorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"SetSessionState\">\n"
            "<arg name=\"SessionName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"SessionOwner\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"SeatID\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"SessionState\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"ErrorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"GetSessionState\">\n"
            "<arg name=\"SessionName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"SeatID\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"SessionState\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"ErrorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"GetApplicationMode\">\n"
            "<arg name=\"ApplicationModeId\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"ErrorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"RegisterShutdownClient\">\n"
            "<arg name=\"BusName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"ObjName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"ShutdownMode\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"TimeoutMs\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"ErrorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"UnRegisterShutdownClient\">\n"
            "<arg name=\"BusName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"ObjName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"ShutdownMode\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"ErrorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"RegisterSession\">\n"
            "<arg name=\"SessionName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"SessionOwner\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"SeatID\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"SessionState\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"ErrorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"UnRegisterSession\">\n"
            "<arg name=\"SessionName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"SessionOwner\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"SeatID\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"ErrorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"GetAppHealthCount\">\n"
            "<arg name=\"Count\" type=\"u\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"GetInterfaceVersion\">\n"
            "<arg name=\"Version\" type=\"u\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"LifecycleRequestComplete\">\n"
            "<arg name=\"RequestId\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"Status\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"ErrorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
    ;
}


static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ConsumerStub,
        int32_t
        > getRestartReasonAttributeStubDispatcher(&ConsumerStub::getRestartReasonAttribute, "i");
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ConsumerStub,
        int32_t
        > setRestartReasonAttributeStubDispatcher(
                &ConsumerStub::getRestartReasonAttribute,
                &ConsumerStubRemoteEvent::onRemoteSetRestartReasonAttribute,
                &ConsumerStubRemoteEvent::onRemoteRestartReasonAttributeChanged,
                &ConsumerStubAdapter::fireRestartReasonAttributeChanged,
                "i");

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ConsumerStub,
        int32_t
        > getShutdownReasonAttributeStubDispatcher(&ConsumerStub::getShutdownReasonAttribute, "i");
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ConsumerStub,
        int32_t
        > setShutdownReasonAttributeStubDispatcher(
                &ConsumerStub::getShutdownReasonAttribute,
                &ConsumerStubRemoteEvent::onRemoteSetShutdownReasonAttribute,
                &ConsumerStubRemoteEvent::onRemoteShutdownReasonAttributeChanged,
                &ConsumerStubAdapter::fireShutdownReasonAttributeChanged,
                "i");

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ConsumerStub,
        int32_t
        > getWakeUpReasonAttributeStubDispatcher(&ConsumerStub::getWakeUpReasonAttribute, "i");
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ConsumerStub,
        int32_t
        > setWakeUpReasonAttributeStubDispatcher(
                &ConsumerStub::getWakeUpReasonAttribute,
                &ConsumerStubRemoteEvent::onRemoteSetWakeUpReasonAttribute,
                &ConsumerStubRemoteEvent::onRemoteWakeUpReasonAttributeChanged,
                &ConsumerStubAdapter::fireWakeUpReasonAttributeChanged,
                "i");

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ConsumerStub,
        int32_t
        > getBootModeAttributeStubDispatcher(&ConsumerStub::getBootModeAttribute, "i");
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ConsumerStub,
        int32_t
        > setBootModeAttributeStubDispatcher(
                &ConsumerStub::getBootModeAttribute,
                &ConsumerStubRemoteEvent::onRemoteSetBootModeAttribute,
                &ConsumerStubRemoteEvent::onRemoteBootModeAttributeChanged,
                &ConsumerStubAdapter::fireBootModeAttributeChanged,
                "i");


static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ConsumerStub,
    std::tuple<>,
    std::tuple<int32_t, int32_t>
    > getNodeStateStubDispatcher(&ConsumerStub::GetNodeState, "ii");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ConsumerStub,
    std::tuple<std::string, std::string, int32_t, int32_t>,
    std::tuple<int32_t>
    > setSessionStateStubDispatcher(&ConsumerStub::SetSessionState, "i");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ConsumerStub,
    std::tuple<std::string, int32_t>,
    std::tuple<int32_t, int32_t>
    > getSessionStateStubDispatcher(&ConsumerStub::GetSessionState, "ii");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ConsumerStub,
    std::tuple<>,
    std::tuple<int32_t, int32_t>
    > getApplicationModeStubDispatcher(&ConsumerStub::GetApplicationMode, "ii");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ConsumerStub,
    std::tuple<std::string, std::string, uint32_t, uint32_t>,
    std::tuple<int32_t>
    > registerShutdownClientStubDispatcher(&ConsumerStub::RegisterShutdownClient, "i");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ConsumerStub,
    std::tuple<std::string, std::string, uint32_t>,
    std::tuple<int32_t>
    > unRegisterShutdownClientStubDispatcher(&ConsumerStub::UnRegisterShutdownClient, "i");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ConsumerStub,
    std::tuple<std::string, std::string, int32_t, int32_t>,
    std::tuple<int32_t>
    > registerSessionStubDispatcher(&ConsumerStub::RegisterSession, "i");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ConsumerStub,
    std::tuple<std::string, std::string, int32_t>,
    std::tuple<int32_t>
    > unRegisterSessionStubDispatcher(&ConsumerStub::UnRegisterSession, "i");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ConsumerStub,
    std::tuple<>,
    std::tuple<uint32_t>
    > getAppHealthCountStubDispatcher(&ConsumerStub::GetAppHealthCount, "u");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ConsumerStub,
    std::tuple<>,
    std::tuple<uint32_t>
    > getInterfaceVersionStubDispatcher(&ConsumerStub::GetInterfaceVersion, "u");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ConsumerStub,
    std::tuple<uint32_t, int32_t>,
    std::tuple<int32_t>
    > lifecycleRequestCompleteStubDispatcher(&ConsumerStub::LifecycleRequestComplete, "i");

void ConsumerDBusStubAdapter::fireRestartReasonAttributeChanged(const int32_t& value) {
	CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<int32_t>>
        ::sendSignal(
            *this,
            "onRestartReasonAttributeChanged",
            "i",
            value
    );
}
void ConsumerDBusStubAdapter::fireShutdownReasonAttributeChanged(const int32_t& value) {
	CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<int32_t>>
        ::sendSignal(
            *this,
            "onShutdownReasonAttributeChanged",
            "i",
            value
    );
}
void ConsumerDBusStubAdapter::fireWakeUpReasonAttributeChanged(const int32_t& value) {
	CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<int32_t>>
        ::sendSignal(
            *this,
            "onWakeUpReasonAttributeChanged",
            "i",
            value
    );
}
void ConsumerDBusStubAdapter::fireBootModeAttributeChanged(const int32_t& value) {
	CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<int32_t>>
        ::sendSignal(
            *this,
            "onBootModeAttributeChanged",
            "i",
            value
    );
}

void ConsumerDBusStubAdapter::fireNodeStateEvent(const int32_t& NodeState) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<int32_t>>
            ::sendSignal(
                *this,
                "NodeState",
                "i",
                NodeState
        );
}
void ConsumerDBusStubAdapter::fireNodeApplicationModeEvent(const int32_t& ApplicationModeId) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<int32_t>>
            ::sendSignal(
                *this,
                "NodeApplicationMode",
                "i",
                ApplicationModeId
        );
}
void ConsumerDBusStubAdapter::fireSessionStateChangedEvent(const std::string& SessionStateName, const int32_t& SeatID, const int32_t& SessionState) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, int32_t, int32_t>>
            ::sendSignal(
                *this,
                "SessionStateChanged",
                "sii",
                SessionStateName, SeatID, SessionState
        );
}

} // namespace Consumer
} // namespace NodeStateManager
} // namespace genivi
} // namespace org

template<>
const org::genivi::NodeStateManager::Consumer::ConsumerDBusStubAdapterHelper::StubDispatcherTable org::genivi::NodeStateManager::Consumer::ConsumerDBusStubAdapterHelper::stubDispatcherTable_ = {
    { { "getRestartReasonAttribute", "" }, &org::genivi::NodeStateManager::Consumer::getRestartReasonAttributeStubDispatcher }
    , { { "setRestartReasonAttribute", "i" }, &org::genivi::NodeStateManager::Consumer::setRestartReasonAttributeStubDispatcher },
    { { "getShutdownReasonAttribute", "" }, &org::genivi::NodeStateManager::Consumer::getShutdownReasonAttributeStubDispatcher }
    , { { "setShutdownReasonAttribute", "i" }, &org::genivi::NodeStateManager::Consumer::setShutdownReasonAttributeStubDispatcher },
    { { "getWakeUpReasonAttribute", "" }, &org::genivi::NodeStateManager::Consumer::getWakeUpReasonAttributeStubDispatcher }
    , { { "setWakeUpReasonAttribute", "i" }, &org::genivi::NodeStateManager::Consumer::setWakeUpReasonAttributeStubDispatcher },
    { { "getBootModeAttribute", "" }, &org::genivi::NodeStateManager::Consumer::getBootModeAttributeStubDispatcher }
    , { { "setBootModeAttribute", "i" }, &org::genivi::NodeStateManager::Consumer::setBootModeAttributeStubDispatcher }
    ,
    { { "GetNodeState", "" }, &org::genivi::NodeStateManager::Consumer::getNodeStateStubDispatcher },
    { { "SetSessionState", "ssii" }, &org::genivi::NodeStateManager::Consumer::setSessionStateStubDispatcher },
    { { "GetSessionState", "si" }, &org::genivi::NodeStateManager::Consumer::getSessionStateStubDispatcher },
    { { "GetApplicationMode", "" }, &org::genivi::NodeStateManager::Consumer::getApplicationModeStubDispatcher },
    { { "RegisterShutdownClient", "ssuu" }, &org::genivi::NodeStateManager::Consumer::registerShutdownClientStubDispatcher },
    { { "UnRegisterShutdownClient", "ssu" }, &org::genivi::NodeStateManager::Consumer::unRegisterShutdownClientStubDispatcher },
    { { "RegisterSession", "ssii" }, &org::genivi::NodeStateManager::Consumer::registerSessionStubDispatcher },
    { { "UnRegisterSession", "ssi" }, &org::genivi::NodeStateManager::Consumer::unRegisterSessionStubDispatcher },
    { { "GetAppHealthCount", "" }, &org::genivi::NodeStateManager::Consumer::getAppHealthCountStubDispatcher },
    { { "GetInterfaceVersion", "" }, &org::genivi::NodeStateManager::Consumer::getInterfaceVersionStubDispatcher },
    { { "LifecycleRequestComplete", "ui" }, &org::genivi::NodeStateManager::Consumer::lifecycleRequestCompleteStubDispatcher }
};

/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.5.201312121915.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * @author Christian Linke
 */
#ifndef ORG_GENIVI_NODESTATEMANAGER_Life_Cycle_Consumer_STUB_DEFAULT_H_
#define ORG_GENIVI_NODESTATEMANAGER_Life_Cycle_Consumer_STUB_DEFAULT_H_


#include <org/genivi/NodeStateManager/LifeCycleConsumerStub.h>
#include <sstream>

namespace org {
namespace genivi {
namespace NodeStateManager {

/**
 * Provides a default implementation for LifeCycleConsumerStubRemoteEvent and
 * LifeCycleConsumerStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class LifeCycleConsumerStubDefault : public virtual LifeCycleConsumerStub {
public:
    LifeCycleConsumerStubDefault();

    LifeCycleConsumerStubRemoteEvent* initStubAdapter(const std::shared_ptr<LifeCycleConsumerStubAdapter>& stubAdapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId);


    virtual void LifecycleRequest(const std::shared_ptr<CommonAPI::ClientId> clientId, uint32_t Request, uint32_t RequestId, int32_t& ErrorCode);
    virtual void LifecycleRequest(uint32_t Request, uint32_t RequestId, int32_t& ErrorCode);




protected:
private:
    class RemoteEventHandler: public LifeCycleConsumerStubRemoteEvent {
     public:
        RemoteEventHandler(LifeCycleConsumerStubDefault* defaultStub);


     private:
        LifeCycleConsumerStubDefault* defaultStub_;
    };

    RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace NodeStateManager
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_NODESTATEMANAGER_Life_Cycle_Consumer_STUB_DEFAULT_H_

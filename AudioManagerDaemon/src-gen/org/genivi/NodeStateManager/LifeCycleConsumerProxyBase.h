 /*
 * This file was generated by the CommonAPI Generators.
 *
  * Copyright (C) 2013, BMW AG
  *
  * \author Christian Linke, christian.linke@bmw.de BMW 2012,2013
 */
 #ifndef ORG_GENIVI_NODESTATEMANAGER_Life_Cycle_Consumer_PROXY_BASE_H_
 #define ORG_GENIVI_NODESTATEMANAGER_Life_Cycle_Consumer_PROXY_BASE_H_
 
 #include "LifeCycleConsumer.h"
 
 
 
 #define COMMONAPI_INTERNAL_COMPILATION
 

 #include <CommonAPI/Proxy.h>
 #include <functional>
 #include <future>
 
 #undef COMMONAPI_INTERNAL_COMPILATION

 namespace org {
 namespace genivi {
 namespace NodeStateManager {

 class LifeCycleConsumerProxyBase: virtual public CommonAPI::Proxy {
  public:
     typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> LifecycleRequestAsyncCallback;




     virtual void LifecycleRequest(const uint32_t& Request, const uint32_t& RequestId, CommonAPI::CallStatus& callStatus, int32_t& ErrorCode) = 0;
     virtual std::future<CommonAPI::CallStatus> LifecycleRequestAsync(const uint32_t& Request, const uint32_t& RequestId, LifecycleRequestAsyncCallback callback) = 0;
 };

 } // namespace NodeStateManager
 } // namespace genivi
 } // namespace org

 #endif // ORG_GENIVI_NODESTATEMANAGER_Life_Cycle_Consumer_PROXY_BASE_H_
